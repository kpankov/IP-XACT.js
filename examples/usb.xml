<?xml version="1.0" encoding="utf-8"?>
<ipxact:component xmlns:ipxact="http://www.accellera.org/XMLSchema/IPXACT/1685-2014" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:snps="http://www.synopsys.com/SPIRIT-snps" xsi:schemaLocation="http://www.accellera.org/XMLSchema/IPXACT/1685-2014 http://www.accellera.org/XMLSchema/IPXACT/1685-2014/index.xsd">
  <ipxact:vendor>Synopsys</ipxact:vendor>
  <ipxact:library>DesignWareCores</ipxact:library>
  <ipxact:name>DWC_usb3</ipxact:name>
  <ipxact:version>3.20a</ipxact:version>
  <ipxact:busInterfaces>
    <ipxact:busInterface>
      <ipxact:name>ACLK</ipxact:name>
      <ipxact:description>Global clock signal. 
All signals are sampled on the rising edge of the global clock.</ipxact:description>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="axi" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="axi_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ACLK</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>bus_clk_early</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:system>
        <ipxact:group>AXI_CLK</ipxact:group>
      </ipxact:system>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>AXIRESETn</ipxact:name>
      <ipxact:description>Global reset signal. This signal is active LOW.</ipxact:description>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="axi" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="axi_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARESETn</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>vcc_reset_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:system>
        <ipxact:group>AXI_RESET</ipxact:group>
      </ipxact:system>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>AXI_LowPowerInterface</ipxact:name>
      <ipxact:description>AMBA AXI Low Power Interface</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::AXI-LowPowerInterface" version="3.3"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::AXI-LowPowerInterface_rtl" version="3.3"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>csysreq</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_csysreq</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>csysack</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_csysack</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>cactive</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_cactive</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave/>
      <ipxact:vendorExtensions>
        <snps:busInterface fileName="Synopsys_DesignWareLibrary_DW-SoC::AXI-LowPowerInterface_3.3.xml">
          <snps:interfacePort>
            <name>cactive</name>
            <snps:attribute name="InterfaceLink">xm_cactive</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>csysack</name>
            <snps:attribute name="InterfaceLink">xm_csysack</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>csysreq</name>
            <snps:attribute name="InterfaceLink">xm_csysreq</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>AXI_Master</ipxact:name>
      <ipxact:description>AMBA AXI Interface</ipxact:description>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="axi" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="axi_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWADDR</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awaddr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWLEN</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awlen</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWSIZE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awsize</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWBURST</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awburst</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWLOCK</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awlock</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWCACHE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awcache</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWPROT</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awprot</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_awready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_wid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WDATA</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_wdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WSTRB</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_wstrb</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WLAST</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_wlast</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_wvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_wready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>BID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_bid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>BRESP</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_bresp</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>BVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_bvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>BREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_bready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_arid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARADDR</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_araddr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARLEN</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_arlen</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARSIZE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_arsize</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARBURST</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_arburst</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARLOCK</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_arlock</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARCACHE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_arcache</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARPROT</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_arprot</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_arvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_arready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_rid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RDATA</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_rdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RRESP</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_rresp</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RLAST</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_rlast</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_rvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xm_rready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:master/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MemoryMap">DWC_usb3_map</snps:attribute>
          <snps:interfaceParameter>
            <name>axi_4</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_acelite</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_arqos</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_arregion</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_aw</name>
            <snps:attribute name="InterfaceLink">DWC_USB3_AWIDTH</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_awqos</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_awregion</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_blw</name>
            <snps:attribute name="Value">4</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_dw</name>
            <snps:attribute name="InterfaceLink">DWC_USB3_MDWIDTH</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_idw</name>
            <snps:attribute name="InterfaceLink">DWC_USB3_IDWIDTH</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfacePort>
            <name>ARADDR</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>ARID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>ARLEN</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>AWID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>AWLEN</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>BID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>RID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>WID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>AXI_Slave</ipxact:name>
      <ipxact:description>AMBA AXI Interface</ipxact:description>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="axi" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="axi_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWADDR</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awaddr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWLEN</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awlen</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWSIZE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awsize</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWBURST</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awburst</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWLOCK</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awlock</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWCACHE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awcache</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWPROT</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awprot</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>AWREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_awready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_wid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WDATA</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_wdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WSTRB</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_wstrb</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WLAST</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_wlast</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_wvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>WREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_wready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>BID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_bid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>BRESP</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_bresp</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>BVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_bvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>BREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_bready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_arid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARADDR</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_araddr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARLEN</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_arlen</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARSIZE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_arsize</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARBURST</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_arburst</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARLOCK</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_arlock</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARCACHE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_arcache</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARPROT</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_arprot</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_arvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ARREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_arready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_rid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RDATA</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_rdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RRESP</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_rresp</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RLAST</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_rlast</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RVALID</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_rvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RREADY</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>xs_rready</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave>
        <ipxact:memoryMapRef memoryMapRef="DWC_usb3_map"/>
      </ipxact:slave>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MemoryMap">DWC_usb3_map</snps:attribute>
          <snps:interfaceParameter>
            <name>axi_4</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_acelite</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_arqos</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_arregion</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_aw</name>
            <snps:attribute name="InterfaceLink">DWC_USB3_AWIDTH</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_awqos</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_awregion</name>
            <snps:attribute name="Value">0</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_blw</name>
            <snps:attribute name="Value">4</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_dw</name>
            <snps:attribute name="InterfaceLink">DWC_USB3_SDWIDTH</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>axi_idw</name>
            <snps:attribute name="InterfaceLink">DWC_USB3_SIDWIDTH</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfacePort>
            <name>ARADDR</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>ARID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>AWID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>BID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>RID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>WID</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>DPRAM0</ipxact:name>
      <ipxact:description>Dual port RAM</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::RAM-2P" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::RAM-2P_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>addra</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram0_p1_addr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>douta</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram0_p1_rdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rea</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram0_p1_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ena</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram0_p1_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>addrb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram0_p2_addr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>dinb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram0_p2_wdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram0_p2_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>web</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram0_p2_wr_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>enb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram0_p2_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave/>
      <ipxact:vendorExtensions>
        <snps:busInterface fileName="Synopsys_DesignWareLibrary_DW-SoC::RAM-2P_2.0.xml">
          <snps:interfaceParameter>
            <name>DataWidth</name>
            <snps:attribute name="InterfaceLink">DWC_USB3_MDWIDTH</snps:attribute>
            <snps:attribute name="Value">64</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>RAMDepth</name>
            <snps:attribute name="Value">1994</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfacePort>
            <name>addra</name>
            <snps:attribute name="InterfaceLink">ram{0}_p1_addr</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>addrb</name>
            <snps:attribute name="InterfaceLink">ram{0}_p2_addr</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>dinb</name>
            <snps:attribute name="InterfaceLink">ram{0}_p2_wdata</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>douta</name>
            <snps:attribute name="InterfaceLink">ram{0}_p1_rdata</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>ena</name>
            <snps:attribute name="InterfaceLink">ram0_p1_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>enb</name>
            <snps:attribute name="InterfaceLink">ram0_p2_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>rea</name>
            <snps:attribute name="InterfaceLink">ram{0}_p1_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>reb</name>
            <snps:attribute name="InterfaceLink">ram{0}_p2_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>web</name>
            <snps:attribute name="InterfaceLink">ram0_p2_wr_n</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>DPRAM1</ipxact:name>
      <ipxact:description>Dual port RAM</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::RAM-2P" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::RAM-2P_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>addra</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram1_p1_addr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>douta</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram1_p1_rdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rea</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram1_p1_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ena</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram1_p1_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>addrb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram1_p2_addr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>dinb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram1_p2_wdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram1_p2_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>web</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram1_p2_wr_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>enb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram1_p2_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave/>
      <ipxact:vendorExtensions>
        <snps:busInterface fileName="Synopsys_DesignWareLibrary_DW-SoC::RAM-2P_2.0.xml">
          <snps:interfaceParameter>
            <name>DataWidth</name>
            <snps:attribute name="InterfaceLink">DWC_USB3_MDWIDTH</snps:attribute>
            <snps:attribute name="Value">64</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>RAMDepth</name>
            <snps:attribute name="Value">1101</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfacePort>
            <name>addra</name>
            <snps:attribute name="InterfaceLink">ram{1}_p1_addr</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>addrb</name>
            <snps:attribute name="InterfaceLink">ram{1}_p2_addr</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>dinb</name>
            <snps:attribute name="InterfaceLink">ram{1}_p2_wdata</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>douta</name>
            <snps:attribute name="InterfaceLink">ram{1}_p1_rdata</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>ena</name>
            <snps:attribute name="InterfaceLink">ram1_p1_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>enb</name>
            <snps:attribute name="InterfaceLink">ram1_p2_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>rea</name>
            <snps:attribute name="InterfaceLink">ram{1}_p1_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>reb</name>
            <snps:attribute name="InterfaceLink">ram{1}_p2_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>web</name>
            <snps:attribute name="InterfaceLink">ram1_p2_wr_n</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>DPRAM2</ipxact:name>
      <ipxact:description>Dual port RAM</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::RAM-2P" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::RAM-2P_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>addra</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram2_p1_addr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>douta</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram2_p1_rdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rea</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram2_p1_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>ena</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram2_p1_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>addrb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram2_p2_addr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>dinb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram2_p2_wdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>reb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram2_p2_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>web</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram2_p2_wr_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>enb</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>ram2_p2_ce_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave/>
      <ipxact:vendorExtensions>
        <snps:busInterface fileName="Synopsys_DesignWareLibrary_DW-SoC::RAM-2P_2.0.xml">
          <snps:interfaceParameter>
            <name>DataWidth</name>
            <snps:attribute name="InterfaceLink">DWC_USB3_MDWIDTH</snps:attribute>
            <snps:attribute name="Value">64</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>RAMDepth</name>
            <snps:attribute name="Value">776</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfacePort>
            <name>addra</name>
            <snps:attribute name="InterfaceLink">ram{2}_p1_addr</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>addrb</name>
            <snps:attribute name="InterfaceLink">ram{2}_p2_addr</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>dinb</name>
            <snps:attribute name="InterfaceLink">ram{2}_p2_wdata</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>douta</name>
            <snps:attribute name="InterfaceLink">ram{2}_p1_rdata</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>ena</name>
            <snps:attribute name="InterfaceLink">ram2_p1_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>enb</name>
            <snps:attribute name="InterfaceLink">ram2_p2_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>rea</name>
            <snps:attribute name="InterfaceLink">ram{2}_p1_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>reb</name>
            <snps:attribute name="InterfaceLink">ram{2}_p2_ce_n</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>web</name>
            <snps:attribute name="InterfaceLink">ram2_p2_wr_n</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>PipeIntf</ipxact:name>
      <ipxact:description>Pipe interface - revision 4.3</ipxact:description>
      <ipxact:busType vendor="synopsys.com" library="busdef.phy" name="pipeV4" version="4.1"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="synopsys.com" library="busdef.phy" name="pipeV4_rtl" version="4.1"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>TxData</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_TxData</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>TxDataK</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_TxDataK</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RxData</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_RxData</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RxDataK</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_RxDataK</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>TxDetectRx_Loopback</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_TxDetectRxLoopbk</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>TxElecIdle</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_TxElecIdle</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>TxCompliance</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_compliance</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>TxOnesZeros</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_TxOnesZeros</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RxPolarity</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_RxPolarity</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RxEqTraining</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_RxEqTrain</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PowerDown</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_PowerDown</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>Rate</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_Rate</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>TxDeemph</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_TxDeemph</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>TxMargin</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_TxMargin</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>TxSwing</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_TxSwing</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RxTermination</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_RxTermination</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RxValid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_RxValid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PhyStatus</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_PhyStatus</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RxElecIdle</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_RxElecIdle</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>RxStatus</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_RxStatus</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PowerPresent</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pipe3_PowerPresent</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MaxConsumers">1</snps:attribute>
          <snps:attribute name="MinConsumers">1</snps:attribute>
          <snps:interfaceParameter>
            <name>PhyType</name>
            <snps:attribute name="InterfaceLink">&lt;open&gt;</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>PipeVersion</name>
            <snps:attribute name="InterfaceLink">&lt;open&gt;</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfacePort>
            <name>PowerDown</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>Rate</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>RxData</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>RxDataK</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>TxData</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>TxDataK</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>TxDeemph</name>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>UTMI0</ipxact:name>
      <ipxact:description>UTMI+ interface - version 1.0</ipxact:description>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::utmi" version="2.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::utmi_rtl" version="2.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_txdata</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_tx_data</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>15</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_txvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_txvalid</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_txvalidh</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_txvalidh</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_word_if</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_word_if</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>Reset</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>usb2phy_reset</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_suspend_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_suspend_n</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_xcvrselect</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_xcvrselect</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>1</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_termselect</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_termselect</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_dppulldown</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmiotg_dppulldown</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_dmpulldown</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmiotg_dmpulldown</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_fslsserialmode</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_fslsserialmode</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_opmode</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_opmode</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>1</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_rxdata</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_rx_data</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>15</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_txready</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_txready</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_rxactive</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_rxactive</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_rxvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_rxvalid</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_rxvalidh</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_rxvalidh</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_clk</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_clk</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_rxerror</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_rxerror</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_linestate</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_linestate</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>1</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_hostdisconnect</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmi_hostdisconnect</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_bvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmisrp_bvalid</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>utmi_vbusvalid</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>utmiotg_vbusvalid</ipxact:name>
                <ipxact:partSelect>
                  <ipxact:range>
                    <ipxact:left>0</ipxact:left>
                    <ipxact:right>0</ipxact:right>
                  </ipxact:range>
                </ipxact:partSelect>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave/>
      <ipxact:vendorExtensions>
        <snps:busInterface fileName="Synopsys_DesignWareLibrary_DW-SoC::utmi_2.0.xml">
          <snps:interfaceParameter>
            <name>UTMI_MODE</name>
            <snps:attribute name="InterfaceLink">&lt;open&gt;</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfacePort>
            <name>Reset</name>
            <snps:attribute name="InterfaceLink">usb2phy_reset[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_bvalid</name>
            <snps:attribute name="InterfaceLink">utmisrp_bvalid</snps:attribute>
            <snps:attribute name="BusAlignment">slice</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_clk</name>
            <snps:attribute name="InterfaceLink">utmi_clk[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_dmpulldown</name>
            <snps:attribute name="InterfaceLink">utmiotg_dmpulldown</snps:attribute>
            <snps:attribute name="BusAlignment">slice</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_dppulldown</name>
            <snps:attribute name="InterfaceLink">utmiotg_dppulldown</snps:attribute>
            <snps:attribute name="BusAlignment">slice</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_fslsserialmode</name>
            <snps:attribute name="InterfaceLink">utmi_fslsserialmode[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_hostdisconnect</name>
            <snps:attribute name="InterfaceLink">utmi_hostdisconnect[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_linestate</name>
            <snps:attribute name="InterfaceLink">utmi_linestate[1:0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_opmode</name>
            <snps:attribute name="InterfaceLink">utmi_opmode[1:0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_rxactive</name>
            <snps:attribute name="InterfaceLink">utmi_rxactive[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_rxdata</name>
            <snps:attribute name="InterfaceLink">utmi_rx_data[15:0]</snps:attribute>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_rxerror</name>
            <snps:attribute name="InterfaceLink">utmi_rxerror[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_rxvalid</name>
            <snps:attribute name="InterfaceLink">utmi_rxvalid[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_rxvalidh</name>
            <snps:attribute name="InterfaceLink">utmi_rxvalidh[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_suspend_n</name>
            <snps:attribute name="InterfaceLink">utmi_suspend_n[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_termselect</name>
            <snps:attribute name="InterfaceLink">utmi_termselect[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_txdata</name>
            <snps:attribute name="InterfaceLink">utmi_tx_data[15:0]</snps:attribute>
            <snps:attribute name="BusAlignment">right</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_txready</name>
            <snps:attribute name="InterfaceLink">utmi_txready[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_txvalid</name>
            <snps:attribute name="InterfaceLink">utmi_txvalid[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_txvalidh</name>
            <snps:attribute name="InterfaceLink">utmi_txvalidh[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_vbusvalid</name>
            <snps:attribute name="InterfaceLink">utmiotg_vbusvalid[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_word_if</name>
            <snps:attribute name="InterfaceLink">utmi_word_if[0]</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>utmi_xcvrselect</name>
            <snps:attribute name="InterfaceLink">utmi_xcvrselect[1:0]</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
  </ipxact:busInterfaces>
  <ipxact:memoryMaps>
    <ipxact:memoryMap>
      <ipxact:name>DWC_usb3_map</ipxact:name>
      <ipxact:description>DWC USB3 Memory Map</ipxact:description>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_gbl</ipxact:name>
        <ipxact:description>USB3 Global Register Block</ipxact:description>
        <ipxact:baseAddress>'hc100</ipxact:baseAddress>
        <ipxact:range>'h600</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:usage>register</ipxact:usage>
        <ipxact:register>
          <ipxact:name>GSBUSCFG0</ipxact:name>
          <ipxact:description>Global SoC Bus Configuration Register 0

This register configures system bus DMA options for the master bus, which may be configured as AHB, AXI, or Native. Options include burst length and cache type (bufferable/posted, cacheable/snoop, and so on). The application can program this register upon power-on, or a change in mode of operation after the DMA engine is halted.

xHCI Register Power-On Value:

If you are using a standard xHCI host driver, make sure to set the register's power-on value during coreConsultant configuration (DWC_USB3_GSBUSCFG0_INIT parameter) because the standard xHCI driver does not access this register.

For more details on this register, refer to "Architecture Details" chapter in the Databook.</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>INCRBRSTENA</ipxact:name>
            <ipxact:description>Undefined Length INCR Burst Type Enable (INCRBrstEna)

Input to BUS-GM; This bit determines the set of burst lengths the master interface uses. It works in conjunction with the GSBUSCFG0[7:1] enables (INCR256/128/64/32/16/8/4).

0: INCRX burst mode

HBURST (for AHB configurations) and ARLEN/AWLEN (for AXI configurations) do not use INCR except in case of non-aligned burst transfers. In the case of address-aligned transfers, they use only the following burst lengths:
 - 1
 - 4 (if GSBUSCFG0.INCR4BrstEna = 1)
 - 8 (if GSBUSCFG0.INCR8BrstEna = 1)
 - 16 (if GSBUSCFG0.INCR16BrstEna = 1)
 - 32 (if GSBUSCFG0.INCR32BrstEna = 1)
 - 64 (if GSBUSCFG0.INCR64BrstEna = 1)
 - 128 (if GSBUSCFG0.INCR128BrstEna = 1)
 - 256 (if GSBUSCFG0.INCR256BrstEna = 1)
Note: 
 - In case of non-address-aligned transfers, INCR may get generated at the beginning and end of the transfers to align the address boundaries, even though INCR is disabled.
 - In AHB mode, if INCRX burst mode is enabled, but none of the supported INCRx bursts bits are enabled, then the controller will perform (undefined length) INCR bursts.
1: INCR (undefined length) burst mode
 - AHB configurations: HBURST uses SINGLE or INCR of any length with handling 1KB boundary breakup.
 - AXI configurations: ARLEN/AWLEN uses any length less than or equal to the largest-enabled burst length of INCR32/64/128/256.
For cache line-aligned applications, this bit is typically set to 0 to ensure that the master interface uses only power-of-2 burst lengths (as enabled via GSBUSCFG0[7:0]).</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INCR4BRSTENA</ipxact:name>
            <ipxact:description>INCR4 Burst Type Enable

Input to BUS-GM; For the AXI configuration, when this bit is enabled the controller is allowed to do bursts of beat length 1, 2, 3, and 4. It is highly recommended that this bit is enabled to prevent descriptor reads and writes from being broken up into separate transfers.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INCR8BRSTENA</ipxact:name>
            <ipxact:description>INCR8 Burst Type Enable

Input to BUS-GM; For the AHB/AXI configuration, if software set this bit to "1", the AHB/AXI master uses INCR to do the 8-beat burst.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INCR16BRSTENA</ipxact:name>
            <ipxact:description>INCR16 Burst Type Enable

Input to BUS-GM. For the AHB/AXI configuration, if software set this bit to '1', the AHB/AXI master uses INCR to do the 16-beat burst.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INCR32BRSTENA</ipxact:name>
            <ipxact:description>INCR32 Burst Type Enable

Input to BUS-GM;
For the AHB/AXI configuration, if software set this bit to 1, the AHB/AXI master uses INCR to do the 32-beat burst.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INCR64BRSTENA</ipxact:name>
            <ipxact:description>INCR64 Burst Type Enable
 - Input to BUS-GM; 
For the AHB/AXI configuration, if software set this bit to 1, the AHB/AXI master uses INCR to do the 64-beat burst.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INCR128BRSTENA</ipxact:name>
            <ipxact:description>INCR128 Burst Type Enable

Input to BUS-GM;

For the AHB/AXI configuration, if software set this bit to 1, the AHB/AXI master uses INCR to do the 128-beat burst.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INCR256BRSTENA</ipxact:name>
            <ipxact:description>INCR256 Burst Type Enable

Input to BUS-GM. 

For the AHB/AXI configuration, if software set this bit to 1, the AHB/AXI master uses INCR to do the 256-beat burst.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_9_8</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DESBIGEND</ipxact:name>
            <ipxact:description>Descriptor Access is Big Endian

This bit controls the endian mode for descriptor accesses.
 - Little-endian (default)
 - Big-endian 
In big-endian mode, DMA access (both read and write) for descriptors uses a Byte Invariant Big-Endian mode (see "Little-Endian and Big-Endian" section  in the DWC SuperSpeed USB 3.0 Controller User Guide. 

Data is considered as 'embedded data' in the descriptors in the following cases: 
 - Device mode: The buffer pointer of a Setup TRB points to the Setup TRB itself.
 - Host mode: The Immediate Data (IDT) bit in a Transfer TRB is set to 1.
In device mode, if the system uses different endian modes for descriptor and data, software must not use 'embedded' data.

In host mode, if the system uses different endian modes for data and descriptors, the controller treats 'embedded data' as descriptor (not as data) in terms of endian mode handling. If this is not the expectation of the system, the software must manipulate the 'embedded data' accordingly.

Note: Since AXI requires byte invariant endianness, setting DescBigend and DatBigEnd to one causes an address invariant transform to be applied, which is not appropriate. See section 9.3 and 9.4 of the AMBA AXI Specification. Hence for an AXI master (DWC_USB3_MBUS_TYPE=1), this bit must be set to zero.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DATBIGEND</ipxact:name>
            <ipxact:description>Data Access is Big Endian

 This bit controls the endian mode for data accesses.
 - Little-endian (default); 
 - Big-endian; 
In big-endian mode, DMA access (both read and write) for packet data a Byte Invariant Big-Endian mode (see "Little-Endian and Big-Endian" section  in the DWC SuperSpeed USB 3.0 Controller User Guide).

Note: Since AXI requires byte invariant endianness, setting DescBigend and DatBigEnd to one causes an address invariant transform to be applied, which is not appropriate. See section 9.3 and 9.4 of the AMBA AXI Specification. Hence for an AXI master (DWC_USB3_MBUS_TYPE=1), this bit must be set to zero.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15_12</ipxact:name>
            <ipxact:description>Reserved for future use</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DESWRREQINFO</ipxact:name>
            <ipxact:description>DESWRREQINFO

AHB-prot/AXI-cache/OCP-ReqInfo for Descriptor Write (DesWrReqInfo) 

Input to BUS-GM.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DATWRREQINFO</ipxact:name>
            <ipxact:description>DATWRREQINFO

AHB-prot/AXI-cache/OCP-ReqInfo for Data Write (DatWrReqInfo).  

Input to BUS-GM.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DESRDREQINFO</ipxact:name>
            <ipxact:description>DESRDREQINFO

AHB-prot/AXI-cache/OCP-ReqInfo for Descriptor Read (DesRdReqInfo).

Input to BUS-GM.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DATRDREQINFO</ipxact:name>
            <ipxact:description>DATRDREQINFO  

AHB-prot/AXI-cache/OCP-ReqInfo for Data Read (DatRdReqInfo) 

Input to BUS-GM.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GSBUSCFG1</ipxact:name>
          <ipxact:description>Global SoC Bus Configuration Register 1

xHCI Register Power-On Value:

If you are using a standard xHCI host driver, make sure to set the register's power-on value during coreConsultant configuration (DWC_USB3_GSBUSCFG1_INIT parameter) because the standard xHCI driver does not access this register.

For more details on this register, refer to "Architecture Details" chapter in the Databook.</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_7_0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PipeTransLimit</ipxact:name>
            <ipxact:description>AXI Pipelined Transfers Burst Request Limit

The field controls the number of outstanding pipelined transfer requests the AXI master pushes to the AXI slave. 

When the AXI master reaches this limit, it does not make any more requests on the AXI ARADDR and AWADDR buses until the associated data phases complete.

This field is encoded as follows:
 - 'h0: 1 request
 - 'h1: 2 requests
 - 'h2: 3 requests
 - 'h3: 4 requests
 -  ...
 - 'hF: 16 requests</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h3</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>EN1KPAGE</ipxact:name>
            <ipxact:description>1k Page Boundary Enable

By default (this bit is disabled) the AXI breaks transfers at the 4k page boundary. When this bit is enabled, the AXI master (DMA data) breaks transfers at the 1k page boundary.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_13</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7ffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>19</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GTXTHRCFG</ipxact:name>
          <ipxact:description>Global Tx Threshold Control Register

For more information on
 - Using this register, refer to "Architecture Details" chapter. 
 - Selecting values for the fields of this register, see the "TX/RX Data FIFO Sizes and TX/RX Threshold Control Register Settings" section in the DWC SuperSpeed USB 3.0 Controller User Guide.
Note:
 - GTXTHRCFG register is not applicable for Debug Target.
 - GTXTHRCFG register is not applicable in USB 2.0-only mode.</ipxact:description>
          <ipxact:addressOffset>'h8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_10_0</ipxact:name>
            <ipxact:description>Reserved for future use</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_13_11</ipxact:name>
            <ipxact:description>Reserved (Rsvd/Rs) 

The register field must write only 0 by the application. The read value must be treated as X (unknown).</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_14</ipxact:name>
            <ipxact:description>Reserved1(Rsvd/Rs)

Register field must write only 0 by the application. The read value must be treated as X (unknown).</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15</ipxact:name>
            <ipxact:description>Reserved_15</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>UsbMaxTxBurstSize</ipxact:name>
            <ipxact:description>USB Maximum TX Burst Size

 When UsbTxPktCntSel is one, this field specifies the Maximum Bulk OUT burst the core can do. When the system bus is slower than the USB, TX FIFO can underrun during a long burst. User can program a smaller value to this field to limit the TX burst size that the core can do. 

 Host mode: It only applies to SS Bulk, Isochronous, and Interrupt OUT endpoints. 

 Device mode: This value is not used in device mode, but users need to program a value when using the TX threshold feature to make sure that the value programmed in UsbTxPktCnt is less than this value.

Valid values are from 1 to 16.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="unconstrained">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>UsbTxPktCnt</ipxact:name>
            <ipxact:description>USB Transmit Packet Count

This field specifies the number of packets that must be in the TXFIFO before the core can start transmission for the corresponding USB transaction (burst). This field is only valid when the USB Transmit Packet Count Enable field is set to one. Valid values are from 1 to 15.

Note:
 - In device mode, if device controller does not have the TRBs for the number of packets or if it cannot fetch the TRBs because of high latency or switching between other endpoints, then it does not wait for the threshold number of packets. The threshold number of packets will be honored only when the TRBs are available in the controller for the number of packets before it starts the data fetch.
 -  This field must be less than or equal to the USB Maximum TX Burst Size field.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="unconstrained">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_28</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>UsbTxPktCntSel</ipxact:name>
            <ipxact:description>USB Transmit Packet Count Enable

This field enables/disables the USB transmission multi-packet thresholding:
 - 0: USB transmission multi-packet thresholding is disabled; the core can start transmission on the USB after the entire (one full) packet has been fetched into the corresponding TXFIFO.
 - 1: USB transmission multi-packet thresholding is enabled. The core can only start transmission on the USB after USB Transmit Packet Count amount of packets for the USB transaction (burst) are already in the corresponding TXFIFO. This mode is valid in both host and device modes. It is only used for SuperSpeed operation.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="unconstrained">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_30</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GRXTHRCFG</ipxact:name>
          <ipxact:description>Global Rx Threshold Control Register

In a normal case, a Tx burst starts as soon as one packet is prefetched; an Rx burst starts as soon as 1-packet space is available. This works well as long as the system bus is faster than the USB 3.0 bus (a 1024-bytes packet takes ~2.2 microseconds on the USB bus in SS mode). 

If the system bus latency is larger than 2.2 microseconds to access a 1024-byte packet, then starting a burst on 1-packet condition leads to an early abort of the burst causing unnecessary performance reduction.  

To avoid underrun and overrun during the burst, in a high-latency bus system (like USB), threshold and burst size control is provided through GTXTHRCFG and GRXTHRCFG registers. Bit [29] of the GTXTHRCFG and GRXTHRCFG registers enables this feature.

For more information on
 - Using this register, refer to "Architecture Details" chapter. 
 - Selecting values for the fields of this register, see the "TX/RX Data FIFO Sizes and TX/RX Threshold Control Register Settings" section in the DWC SuperSpeed USB 3.0 Controller User Guide.
Note:
 - GRXTHRCFG register is not applicable for Debug Target.
 - There is an issue when ACK TP with NumP=0 followed by ACK TP with NumP=1 without ERDY TP sent by the device controller during a burst bulk OUT transfer. This may cause third-party USB 3.0 host controllers to keep waiting for the ERDY TP.
The USB 3.0 specification states that "When an endpoint is not in a flow control condition, it shall not send an ERDY TP unless the endpoint is a Bulk endpoint that supports streams." In this case, after the device sent the ACK TP (nump=1), the endpoint was not in the flow control, so it did not send an ERDY.
The device would have sent ERDY if the next OUT packet was not received. When the next OUT packet was received, at that time there was enough buffer space to accept it, so the device accepted the packet by informing host that it is not no longer in the flow control. The Host should wait for the responses for all the OUT packets to return and then decide if the endpoint is still in flow control or not.
The USB 3.1 specification supersedes all the USB 3.0 specification. The errata states that "If the host continues, or resumes, transactions to an endpoint, the endpoint shall re-evaluate its flow control state and respond appropriately." However, there are no ECNs on the USB 3.0 for this issue.
To work around this issue, the Global Rx Threshold mode must be disable by setting GRXTHRCFG.UsbRxPktCntSel=0. Instead, software can program the DCFG.NUMP mode (where fixed NUMP is transmitted always) instead of the RX threshold based nump mode to prevent the device from sending ACK TP with NumP=0. The NUMP in the ACK TP is the minimum value of (DCFG.NUMP, bMaxBurstSize) for each endpoint.</ipxact:description>
          <ipxact:addressOffset>'hc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ResvISOCOUTSpc</ipxact:name>
            <ipxact:description>Space reserved in Rx FIFO for ISOC OUT

In host mode, this field is not applicable and must be programmed to 0. 

In device mode, this value represents the amount of space to be reserved for ISOC OUT packets. 

The value to be programmed should be chosen so as to ensure that non ISOC packets are not completely dropped. 

If no space needs to be reserved for ISOC OUT packets, program this field to 0.

This field is valid only in device mode. The maximum configurable depth of RX FIFO is 8192. Therefore, this field is 13 bits wide.

The value of space reserved is in terms of DWC_USB3_MDWIDTH.

For SS, the space reservation is always rounded off to the nearest packet boundary. Therefore, it is always recommended to program a value corresponding to MPS or its multiples.

For HS/FS, the space reservation is the actual value.

Note: For SS, reserve space for ISOC when the Rx FIFO space can accommodate two MPS or more. Otherwise, this may result in degraded performance for non-ISOC packets. If the space is entirely allocated for ISOC, the non-ISOC packets will be completely dropped. To help you decide during the time of configuring the core, refer to the section "Device-Mode Receive Path" in Chapter 3.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>13</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_14_13</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_18_16</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>UsbMaxRxBurstSize</ipxact:name>
            <ipxact:description>USB Maximum Receive Burst Size

In host mode, this field specifies the Maximum Bulk IN burst the DWC_usb3 core can perform. 

When the system bus is slower than the USB, RX FIFO can overrun during a long burst. 

You can program a smaller value to this field to limit the RX burst size that the core can perform. It only applies to SS Bulk, Isochronous, and Interrupt IN endpoints in the host mode. 

In device mode, this field specifies the NUMP value that is sent in ERDY for an OUT endpoint. The programmed value should not exceed the RXFIFO size.

This field is valid only when UsbRxPktCntSel is one. The valid values for this field are from 1 to 16.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>UsbRxPktCnt</ipxact:name>
            <ipxact:description>USB Receive Packet Count

In host mode, this field specifies the space (in terms of the number of packets) that must be available in the RX FIFO before the core can start the corresponding USB RX transaction (burst). 

In device mode, this field specifies the space (in terms of the number of packets) that must be available in the RX FIFO before the core can send ERDY for a flow-controlled endpoint.

This field is valid only when the USB Receive Packet Count Enable field is set to 1. The valid values for this field are from 1 to 15. 

Note: This field must be less than or equal to the USB Maximum Receive Burst Size field.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_28</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>UsbRxPktCntSel</ipxact:name>
            <ipxact:description>USB Receive Packet Count Enable

This field enables/disables the USB reception multi-packet thresholding:
 - 0: The core can only start reception on the USB when the RX FIFO has space for at least one packet.
 - 1: The core can only start reception on the USB when the RX FIFO has space for at least UsbRxPktCnt amount of packets. This mode is valid in both host and device mode. It is only used for SuperSpeed. 
In device mode, 
 - Setting this bit to 1 also enables the functionality of reporting NUMP in the ACK TP based on the RX FIFO space instead of reporting a fixed NUMP derived from DCFG.NUMP for non-control endpoints.
 - If you are using external buffer control (EBC) feature, disable this mode by setting UsbRxPktCntSel to 0.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_30</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GCTL</ipxact:name>
          <ipxact:description>Global Core Control Register

Refer to &lt;workspace&gt;/src/DWC_usb3_params.v for details on `DWC_USB3_GCTL_INIT.

Note: 

When Hibernation is not enabled, you can write any value to GblHibernationEn. It always returns 0 when read.
</ipxact:description>
          <ipxact:addressOffset>'h10</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DSBLCLKGTNG</ipxact:name>
            <ipxact:description>Disable Clock Gating (DsblClkGtng)

This bit is set to 1 and the core is in Low Power mode, internal clock gating is disabled.

You can set this bit to 1'b1 after Power On Reset.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>GblHibernationEn</ipxact:name>
            <ipxact:description>GblHibernationEn

This bit enables hibernation at the global level. If hibernation is not enabled through this bit, the PMU immediately accepts the D0-&gt;D3 and D3-&gt;D0 power state change requests, but does not save or restore any core state.

In addition, the PMUs never drive the PHY interfaces and let the core continue to drive the PHY interfaces.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>U2EXIT_LFPS</ipxact:name>
            <ipxact:description>U2EXIT_LFPS

If this bit is,
 - 0: the link treats 248ns LFPS as a valid U2 exit. 
 - 1: the link waits for 8us of LFPS before it detects a valid U2 exit.
This bit is added to improve interoperability with a third-party host/device controller. This host/device controller in U2 state while performing receiver detection generates an LFPS glitch of about 4ms duration. This causes the host/device to exit from U2 state because the LFPS filter value is 248ns. With the new functionality enabled, the host/device can stay in U2 while ignoring this glitch from the host/device controller.

This bit is applicable for both host and device controller.
 
This bit is added to improve interoperability with a third party host controller. This host controller in U2 state while performing receiver detection generates an LFPS glitch of about 4ms duration. This causes the device to exit from U2 state because the LFPS filter value is 248ns. With the new functionality enabled, the device can stay in U2 while ignoring this glitch from the host controller.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DISSCRAMBLE</ipxact:name>
            <ipxact:description>Disable Scrambling (DisScramble)

 Transmit request to Link Partner on next transition to Recovery or Polling.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SCALEDOWN</ipxact:name>
            <ipxact:description>Scale-Down Mode (ScaleDown)

When Scale-Down mode is enabled for simulation, the core uses scaled-down timing values, resulting in faster simulations.

When Scale-Down mode is disabled, actual timing values are used. This is required for hardware operation.

HS/FS/LS Modes
 - 2'b00: Disables all scale-downs. Actual timing values are used.
 - 2'b01: Enables scale-down of all timing values except Device mode suspend and resume. These include Speed enumeration, HNP/SRP, and Host mode suspend and resume
 - 2'b10: Enables scale-down of Device mode suspend and resume timing values only.
 - 2'b11: Enables bit 0 and bit 1 scale-down timing values.
SS Mode
 - 2'b00: Disables all scale-downs. Actual timing values are used.
 - 2'b01: Enables scaled down SS timing and repeat values including: (1) Number of TxEq training sequences reduce to 8; (2) LFPS polling burst time reduce to 256 nS; (3) LFPS warm reset receive reduce to 30 uS. Refer to the rtl_vip_scaledown_mapping.xls file under &lt;workspace&gt;/sim/SoC_sim directory for the complete list.
 - 2'b10: No TxEq training sequences are sent. Overrides Bit 4.
 - 2'b11: Enables bit 0 and bit 1 scale-down timing values.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RAMCLKSEL</ipxact:name>
            <ipxact:description>RAM Clock Select (RAMClkSel)
 - 2'b00: bus clock
 - 2'b01: pipe clock (Only used in device mode)
 - 2'b10: In device mode , pipe/2 clock.In Host mode, controller switches ram_clk between pipe/2 clock, mac2_clk and bus_clk based on the status of the U2/U3 ports
 - 2'b11: In device mode, selects mac2_clk as ram_clk (when 8-bit UTMI or ULPI used. Not supported in 16-bit UTMI mode) In Host mode, controller switches ram_clk between pipe_clk, mac2_clk and bus_clk based on the status of the U2/U3 ports. 
In device mode, upon a USB reset and USB disconnect, the hardware clears these bits to 2'b00. For more information on how to select the RAM clock, see "Clock Generation and Clock Tree Synthesis (CTS) Requirements" in the Architectural Details chapter in the DesignWare Cores SuperSpeed USB 3.0 Controller Databook.  

Note:
 - In device mode, if you set RAMClkSel to 2'b11 (mac2_clk), the controller internally switches the ram_clk to bus_clk when the link state changes to Suspend (L2 or L3), and switches the ram_clk back to mac2_clk when the link state changes to resume or U2.
 - In host mode, if a value of 2/3 is chosen, then controller switches ram_clk between bus_clk, mac2_clk and pipe_clk, pipe_clk/2, based on the state of the U2/U3 ports. For example if only the U2 port is active and the U3 ports are suspended, then the ram_clk is swicthed to mac2_clk. When only the U3 ports are active and the U2 ports are suspended, then the core internally swicth the ram_clk to pipe3 clock and when all U2 and U3 ports are suspended, it switch the ram_clk to bus_clk. This allows de coupling the ram_clk from the bus_clk and depending on the bandwidth requiredmnet allows the bus_clk to be run at a lower frequency than the ram_clk requirements. bus_clk frequency still cannot go below 60Mhz in host mode, and this is not verified.
A value of 2 can be chosen only if the pipe data width is 8 or 16 bits. In this case the when the ram_clk is switched to pipe_clk, it uses pipe_clk/2 instead of pipe_clk. If a value of 3 is chosen for RAMClkSel, then when ram_clk is switched to pipe_clk, then pipe_clk is used without any divider. 
 - In device mode, when RAMClkSel != 2'b00, the bus_clk_early frequency can be a minimum of 1 MHz. This is tested in simulation and also in hardware with Linux, Microsoft Windows 8, and MCCI Windows7 host drivers. Only control and non periodic transfers are supported when bus_clk is 1 MHz. For periodic applications, the bus_clk_early minimum frequency is higher depending on your application and SoC bus. Even though 1 MHz has been tested with standard host drivers, Synopsys recommends 5 MHz minimum for ASIC designs to provide a margin or at least have a backup option to increase the bus_clk frequency to 5 MHz if needed.
Programming this field with random data will cause side effect. Bit Bash register testing is not recommended.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEBUGATTACH</ipxact:name>
            <ipxact:description>Debug Attach

When this bit is set, 
 - SS Link proceeds directly to the Polling link state (after RUN/STOP in the DCTL register is asserted) without checking remote termination; 
 - Link LFPS polling timeout is infinite;
 - Polling timeout during TS1 is infinite (in case link is waiting for TXEQ to finish).</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>U1U2TimerScale</ipxact:name>
            <ipxact:description>Disable U1/U2 timer Scaledown (U1U2TimerScale). 

If set to '1' along with GCTL[5:4] (ScaleDown) = 2'bX1, disables the scale down of U1/U2 inactive timer values. This is for simulation mode only.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SOFITPSYNC</ipxact:name>
            <ipxact:description>SOFITPSYNC

If this bit is set to '0' operating in host mode, the core keeps the UTMI/ULPI PHY on the first port in a non-suspended state whenever there is a SuperSpeed port that is not in Rx.Detect, SS.Disable and U3. 

If this bit is set to '1' operating in host mode, the core keeps the UTMI/ULPI PHY on the first port in a non-suspended state whenever the other non-SuperSpeed ports are not in a suspended state. This feature is useful because it saves power by suspending UTMI/ULPI when SuperSpeed only is active, and it helps resolve when the PHY does not transmit a host resume unless it is placed in suspend state. This bit must be programmed as a part of initialization at power-on reset, and must not be dynamically changed afterwards. 

Note:
 - USB2PHYCFGn[6].PhySusp eventually decides to put the UTMI/ULPI PHY in to suspend state. In addition, when this bit is set to '1', the core generates ITP from the ref_clk based counter. Otherwise, ITP and SOF are generated from utmi/ulpi_clk[0] based counter. To program the reference clock period inside the core, refer to GUCTL[31:22].REFCLKPER.
 - This feature is valid in Host and DRD/OTG configurations and used only in Host mode operation.
 - If you never use this feature or the GFLADJ.GFLADJ_REFCLK_LPM_SEL, the minimum frequency for the ref_clk can be as low as 32KHz. You can connect the suspend_clk (as low as 32 KHz) to the ref_clk.
 - If you plan to enable hardware-based LPM or software-based LPM (PORTPMSC. HLE=1), then you cannot use this feature. Turn off this feature by setting this bit to '0' and use the GFLADJ.GFLADJ_REFCLK_LPM_SEL feature.
 - If you set this bit to '1', the GUSB2PHYCFG.U2_FREECLK_EXISTS bit and the DWC_USB3_FREECLK_USB2_EXIST parameter must be set to '0'.
Program this bit to 0 if the core is intended to be operated in USB 3.0 mode.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CORESOFTRESET</ipxact:name>
            <ipxact:description>Core Soft Reset (CoreSoftReset)
 - 1'b0 - No soft reset
 - 1'b1 - Soft reset to core
Clears the interrupts and all the CSRs except the following registers:
 - GCTL
 - GUCTL
 - GSTS
 - GSNPSID
 - GGPIO
 - GUID
 - GUSB2PHYCFGn registers
 - GUSB3PIPECTLn registers
 - DCFG
 - DCTL
 - DEVTEN
 - DSTS
When you reset PHYs (using GUBS3PHYCFG or GUSB3PIPECTL registers), you must keep the core in reset state until PHY clocks are stable. This controls the bus, ram, and mac domain resets. Refer to the "Reset Generation" section in the Architecture Details chapter in the DesignWare Cores SuperSpeed USB 3.0 Controller Databook.

Note: This bit is for debug purposes only. Use USBCMD.HCRESET in xHCI Mode and DCTL.SoftReset in device mode for soft reset.

 Programming this field with random data will reset the internal logic of the host controller. Due to this side effect Bit Bash register testing is not recommended.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PRTCAPDIR</ipxact:name>
            <ipxact:description>PRTCAPDIR: Port Capability Direction (PrtCapDir)
 - 2'b01: for Host configurations
 - 2'b10: for Device configurations
 - 2'b11: for OTG configurations
When DWC_USB3_EN_OTG is 0, then the core acts as a DRD. When DWC_USB3_EN_OTG is 1,
 - If PrtCapDir is 2'b11, it acts as an OTG 2.0 device with A-device or B-device determined by the IDDIG input, and Host or Peripheral role based on HNP.
 - If PrtCapDir is 2'b01, it acts as a DRD in host mode.
 - If PrtCapDir is 2'b10, it acts as a DRD in device mode. The OTG device can be programmed to enable/disable SRP and HNP by using the fields present in OCFG register.
When DWC_USB3_EN_OTG is 2,
 - If PrtCapDir is 2'b11, it acts as an OTG 3.0 device with A-device or B-device determined by the IDDIG input, and Host or Peripheral role based on HNP/RSP.
 - If PrtCapDir is 2'b01, it acts as a DRD in host mode. In this mode, the VBUS is driven immediately after power-on reset. When the DWC_usb3 controller is plugged into a PC and the application configures the device later on, VBUS is driven on the USB from both sides of the cable. This will potentially damage the PC host.
 - If PrtCapDir is 2'b10, it acts as a DRD in device mode. The OTG device can be programmed to enable/disable SRP and HNP/RSP using the fields present in the OCFG register.
Note: For static Host-only/Device-only applications, use DRD Host or DRD Device mode. The combination of GCTL.PrtCapDir=2'b11 with SRP and HNP/RSP disabled is not recommended for these applications.

The sequence for switching modes in DRD configuration is as follows: 

Switching from Device to Host:

1. Reset the controller using GCTL[11] (CoreSoftReset).

2. Set GCTL[13:12] (PrtCapDir) to 2'b01 (Host mode).

3. Reset the host using USBCMD.HCRESET.

4. Follow the steps in "Initializing Host Registers" section of the databook.

Switching from Host to Device:

1. Reset the controller using GCTL[11] (CoreSoftReset).

2. Set GCTL[13:12] (PrtCapDir) to 2'b10 (Device mode).

3. Reset the device by setting DCTL[30] (CSftRst). 

4. Follow the steps in "Register Initialization" section of the databook.

 Programming this field with random data causes the core to keep toggling between the host mode and the device mode . Bit Bash register testing is not recommended.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>FRMSCLDWN</ipxact:name>
            <ipxact:description>FRMSCLDWN

This field scales down device view of a SOF/USOF/ITP duration.

For SS/HS mode:
 - Value of 2'h3 implements interval to be 15.625 us
 - Value of 2'h2 implements interval to be 31.25 us
 - Value of 2'h1 implements interval to be 62.5 us
 - Value of 2'h0 implements interval to be 125us
For FS mode, the scale-down value is multiplied by 8.

When xHCI Debug Capability is enabled, this field also scales down the MaxPacketSize of the IN and OUT bulk endpoint to allow more traffic during simulation. It can only be changed from a non-zero value during simulation. 
 - 2'h0: 1024 bytes
 - 2'h1: 512 bytes
 - 2'h2: 256 bytes
 - 2'h3: 128 bytes</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>U2RSTECN</ipxact:name>
            <ipxact:description>U2RSTECN

If the SuperSpeed connection fails during POLL or LMP exchange, the device connects at non-SS mode. 

If this bit is set, then device attempts three more times to connect at SS, even if it previously failed to operate in SS mode. For each attempt, the device checks receiver termination eight times.

From 2.60a release, this bit controls whether to check for Rx.Detect eight times or one time for every attempt. Device controller on USB 2.0 reset checks for receiver termination eight times per attempt if this bit is set to zero, or only once per attempt if the bit is set to one.

Note: This bit is applicable only in device mode.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BYPSSETADDR</ipxact:name>
            <ipxact:description>Bypass SetAddress in Device Mode.  

When BYPSSETADDR bit is set, the device core uses the value in the DCFG[DevAddr] bits directly for comparing the device address in the tokens. 

For simulation, you can use this feature to avoid sending an actual SET ADDRESS control transfer on the USB, and make the device core respond to a new address.

When the xHCI Debug capability is enabled and this bit is set, the Debug Target immediately enters the configured state without requiring the Debug Host to send a SetAddress or SetConfig request.

Note: You can set this bit for simulation purposes only. In the actual hardware, this bit must be set to 1'b0.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MASTERFILTBYPASS</ipxact:name>
            <ipxact:description>Master Filter Bypass

When this bit is set to 1'b1, irrespective of the parameter `DWC_USB3_EN_BUS_FILTERS chosen, all the filters in the DWC_usb3_filter module are bypassed.  

The double synchronizers to mac_clk preceding the filters are also bypassed. For enabling the filters, this bit must be 1'b0.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PWRDNSCALE</ipxact:name>
            <ipxact:description>Power Down Scale (PwrDnScale)

The USB3 suspend_clk input replaces pipe3_rx_pclk as a clock source to a small part of the USB3 core that operates when the SS PHY is in its lowest power (P3) state, and therefore does not provide a clock.

The Power Down Scale field specifies how many suspend_clk periods fit into a 16 kHz clock period. When performing the division, round up the remainder.

For example, when using an 8-bit/16-bit/32-bit PHY and 25-MHz Suspend clock,

Power Down Scale = 25000 kHz/16 kHz = 13'd1563 (rounder up)

Note:
 - Minimum Suspend clock frequency is 32 kHz
 - Maximum Suspend clock frequency is 125 MHz
The LTSSM uses Suspend clock for 12-ms and 100-ms timers during suspend mode. According to the USB 3.0 specification, the accuracy on these timers is 0% to +50%.
 - 12 ms + 0~+50% accuracy = 18 ms (Range is 12 ms - 18 ms)
 - 100 ms + 0~+50% accuracy = 150 ms (Range is 100 ms - 150 ms).
The suspend clock accuracy requirement is:
 - (12,000/62.5) * (GCTL[31:19]) * actual suspend_clk_period must be between 12,000 and 18,000
 - (100,0000/62.5) * (GCTL[31:19]) * actual suspend_clk_period must be between 100,000 and 150,000
For example, if your suspend_clk frequency varies from 7.5 MHz to 10.5MHz, then the value needs to programmed is:

Power Down Scale = 10500/16 = 657 (rounded up; and fastest frequency used).</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h618</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>13</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GPMSTS</ipxact:name>
          <ipxact:description>Global Power Management Status Register

This debug register gives information on which event caused the hibernation exit. It provides internal status and state machine information, and is for Synopsys use only for debugging purposes.

This register is not applicable in USB 2.0-only mode.</ipxact:description>
          <ipxact:addressOffset>'h14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>U2Wakeup</ipxact:name>
            <ipxact:description>U2Wakeup

This field indicates the following USB 2.0 port wakeup conditions: 
 - Bit [0]: Overcurrent Detected
 - Bit [1]: Resume Detected
 - Bit [2]: Connect Detected
 - Bit [3]: Disconnect Detected
 - Bit [4]: Last Connection State
 - Bit [5]: ID Change Detected
 - Bit [6]: SRP Request Detected
 - Bit [7]: ULPI Interrupt Detected
 - Bit [8]: USB Reset Detected
 - Bit [9]: Resume Detected Changed</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>10</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_10_11</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>U3Wakeup</ipxact:name>
            <ipxact:description>U3Wakeup

This field gives the following USB 3.0 port wakeup conditions: 
 - Bit [12]: Overcurrent Detected
 - Bit [13]: Resume Detected
 - Bit [14]: Connect Detected
 - Bit [15]: Disconnect Detected
 - Bit [16]: Last Connection State</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_27_17</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PortSel</ipxact:name>
            <ipxact:description>Global Power Management Status Register, PortSel

This field selects the port number.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GSTS</ipxact:name>
          <ipxact:description>Global Status Register</ipxact:description>
          <ipxact:addressOffset>'h18</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>CURMOD</ipxact:name>
            <ipxact:description>Current Mode of Operation (CurMod)

Indicates the current mode of operation:
 - 2'b00: Device mode
 - 2'b01: Host mode 
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_3_2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BUSERRADDRVLD</ipxact:name>
            <ipxact:description>Bus Error Address Valid (BusErrAddrVld)

Indicates that the GBUSERRADDR register is valid and reports the first bus address that encounters a bus error.

Note: Only supported in AHB and AXI configurations.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CSRTimeout</ipxact:name>
            <ipxact:description>CSR Timeout

When this bit is 1'b1, it indicates that the software performed a write or read to a core register that could not be completed within `DWC_USB3_CSR_ACCESS_TIMEOUT bus clock cycles (default: h1FFFF).</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>Device_IP</ipxact:name>
            <ipxact:description>Device Interrupt Pending

This field indicates that there is a pending interrupt pertaining to peripheral (device) operation in the Device event queue.
</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>Host_IP</ipxact:name>
            <ipxact:description>Host Interrupt Pending:

This field indicates that there is a pending interrupt pertaining to xHC in the Host event queue.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ADP_IP</ipxact:name>
            <ipxact:description>ADP Interrupt Pending

This field indicates that there is a pending interrupt pertaining to ADP in ADPEVT register.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BC_IP</ipxact:name>
            <ipxact:description>Battery Charger Interrupt Pending

This field indicates that there is a pending interrupt pertaining to BC in BCEVT register.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>OTG_IP</ipxact:name>
            <ipxact:description>OTG Interrupt Pending

 This field indicates that there is a pending interrupt pertaining to OTG in OEVT register.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SSIC_IP</ipxact:name>
            <ipxact:description>SSIC interrupt pending (SSIC_IP)

This field indicates that there is a pending interrupt related to SSIC in the SEVT register.

Note: When the DWC_USB3_NUM_SSIC_PORTS parameter is set to zero, this bit is reserved.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_19_12</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CBELT</ipxact:name>
            <ipxact:description>Current BELT Value

In Host mode, this field indicates the minimum value of all received device BELT values and the BELT value that is set by the Set Latency Tolerance Value command.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h7e8</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>12</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GUCTL1</ipxact:name>
          <ipxact:description>Global User Control Register 1</ipxact:description>
          <ipxact:addressOffset>'h1c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>LOA_FILTER_EN</ipxact:name>
            <ipxact:description>LOA_FILTER_EN

If this bit is set, the USB 2.0 port babble is checked at least three consecutive times before the port is disabled. This prevents false triggering of the babble condition when using low quality cables.

Note: This bit is valid only in host mode.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>OVRLD_L1_SUSP_COM</ipxact:name>
            <ipxact:description>OVRLD_L1_SUSP_COM

If this bit is set, the utmi_l1_suspend_com_n is overloaded with the utmi_sleep_n signal. This bit is usually set if the PHY stops the port clock during L1 sleep condition.

Note: The recommended connection for the SUSPENDM/SLEEPM signals to the PHY with respect to this bit is as follows.

For non-zero ports:

Connect:
 - utmi_sleep_n[n] to SLEEPM[n]
 - (utmi_suspend_n[n] &amp; utmi_l1_suspend_n[n]) to SUSPENDM[n]
 - USB2 PHYCLK[n] to utmi_clk[n]
GUCTL1.OVRLD_L1_SUSP_COM impacts only Port0.

For Port0:

For Synopsys PHY,

GUSB2PHYCFGn.U2_FREECLK_EXISTS=1; With this connection, the PHY keeps PLL active so that FREECLK is always available irrespective of suspend/sleep. 
 - Connect USB2 PHY COMMONONN to 0.
 - Connect utmi_sleep_n[0] to SLEEPM[0].
 - Connect (utmi_suspend_n[0] &amp; utmi_l1_suspend_n[0]) to SUSPENDM[0].
 - Connect USB2 PHY FREECLK to utmi_clk[0].
 - Leave utmi_suspend_com_n, utmi_l1_suspend_com_n unconnected.
 - GUCTL1.OVRLD_L1_SUSP_COM can be set to any value.
For Third Party PHY,

GUSB2PHYCFGn.U2_FREECLK_EXISTS=0; With this connection the PHY can shut off all the clocks when the required conditions are met (like, GUSB2PHYCFGn[8,6], GUCTL1[1], GFLADJ[23], GCTL[10], Suspend condition, HW LPM enable etc).
 - Connect -utmi_suspend_com_n to SUSPENDM[0] (or equivalent).
 - Connect -utmi_l1_suspend_com_n to SLEEPM[0] (or equivalent).
 - Connect PHYCLK0 (first port clock) to utmi_clk[0]. 
 - Leave utmi_suspend_n[0], utmi_l1_suspend_ n[0], utmi_sleep_n[0] unconnected.
 - Set GUCTL1.OVRLD_L1_SUSP_COM to 1'b1.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HC_PARCHK_DISABLE</ipxact:name>
            <ipxact:description>Host Parameter Check Disable (HParChkDisable)

When this bit is set to '0' (by default), the xHC checks that the input slot/EP context fields comply to the xHCI Specification. Upon detection of a parameter error during command execution, the xHC generates an event TRB with completion code indicating 'PARAMETER ERROR'.

When the bit is set to '1', the xHC does not perform parameter checks and does not generate 'PARAMETER ERROR' completion code.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HC_ERRATA_ENABLE</ipxact:name>
            <ipxact:description>Host ELD Enable (HELDEn)

When this bit is set to 1, it enables the Exit Latency Delta (ELD) support defined in the xHCI 1.0 Errata.

This bit is used only in the host mode. This bit has to be set to 1 in Host mode.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>L1_SUSP_THRLD_FOR_HOST</ipxact:name>
            <ipxact:description>L1_SUSP_THRLD_FOR_HOST

This field is effective only when the L1_SUSP_THRLD_EN_FOR_HOST bit is set to 1. For more details, refer to the description of the L1_SUSP_THRLD_EN_FOR_HOST bit.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h8</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>L1_SUSP_THRLD_EN_FOR_HOST</ipxact:name>
            <ipxact:description>L1_SUSP_THRLD_EN_FOR_HOST

This bit is used only in host mode.

The host controller asserts the utmi_l1_suspend_n and utmi_sleep_n output signals (see "LPM Interface Signals" table in the Databook) as follows:

The controller asserts the utmi_l1_suspend_n signal to put the PHY into deep low-power mode in L1 when both of the following are true:
 - The HIRD/BESL value used is greater than or equal to the value in L1_SUSP_THRLD_FOR_HOST field.
 - The L1_SUSP_THRLD_EN_FOR_HOST bit is set to 1'b1.
The controller asserts utmi_sleep_n on L1 when one of the following is true:
 - The HIRD/BESL value used is less than the value in L1_SUSP_THRLD_FOR_HOST field.
 - The L1_SUSP_THRLD_EN_FOR_HOST bit is set to 1'b0.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEV_HS_NYET_BULK_SPR</ipxact:name>
            <ipxact:description>DEV_HS_NYET_BULK_SPR
 - 0: Default behavior, no change in device response 
 - 1: Feature enabled, HS bulk OUT short packet gets NYET response
This bit is applicable for device mode only (and ignored in host mode) to be used in 2.0 operation. 

If this bit is set, the device core sends NYET response instead of ACK response for a successfully received bulk OUT short packet.
If NYET is sent after receiving short packet, then the host would PING before sending the next OUT; this improves the performance as well as clears up the buffer/cache on the host side. Internal to the device core, short packet (SPR=1) processing takes some time, and during this time, the USB is flow controlled. With NYET response instead of ACK on short packet, the host does not send another OUT-DATA without pinging in HS mode.

This bit is quasi-static, that is, it must not be changed during device operation.
</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RESUME_OPMODE_HS_HOST</ipxact:name>
            <ipxact:description>RESUME_OPMODE_HS_HOST

This bit is used only in host mode, and is for USB 2.0 opmode behavior in HS Resume.
 - When this bit is set to '1', the UTMI/ULPI opmode will be changed to "normal" along with HS terminations after EOR. This option is to support certain legacy UTMI/ULPI PHYs.
 - When this bit is set to '0', the UTMI/ULPI opmode will be changed to "normal" 2us after HS terminations change after EOR. This is the default behavior.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_14_11</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PARKMODE_DISABLE_FSLS</ipxact:name>
            <ipxact:description>PARKMODE_DISABLE_FSLS

This bit is used only in host mode, and is for debug purpose only.

When this bit is set to '1' all FS/LS bus instances in park mode disabled.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PARKMODE_DISABLE_HS</ipxact:name>
            <ipxact:description>PARKMODE_DISABLE_HS

This bit is used only in host mode.

When this bit is set to '1' all HS bus instances park mode are disabled.

To improve performance in park mode, the xHCI scheduler queues in three requests of 4 packets each for High Speed asynchronous endpoints in a micro-frame. But if a device is slow and if it NAKs more than 3 times, then it is rescheduled only in the next micro-frame. This could decrease the performance of a slow device even further.

In a few high speed devices (such as Sandisk Cruzer Blade 4GB VID:1921, PID:21863 and Flex Drive VID:3744, PID:8552) when an IN request is sent within 900ns of the ACK of the previous packet, these devices send a NAK. When connected to these devices, if required, the software can disable the park mode if you see performance drop in your system. When park mode is disabled, pipelining of multiple packet is disabled and instead one packet at a time is requested by the scheduler. This allows up to 12 NAKs in a micro-frame and improves performance of these slow devices.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PARKMODE_DISABLE_SS</ipxact:name>
            <ipxact:description>PARKMODE_DISABLE_SS

This bit is used only in host mode, and is for debug purpose only.

When this bit is set to '1' all SS bus instances in park mode are disabled.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NAK_PER_ENH_HS</ipxact:name>
            <ipxact:description>NAK_PER_ENH_HS
 - 1: Enables performance enhancement for HS async endpoints in the presence of NAKs
 - 0: Enhancement not applied
If a periodic endpoint is present, and if a bulk endpoint which is also
active is being NAKed by the device, then this could result in
decrease in performance of other High Speed bulk endpoint which is ACked by the device.
Setting this bit to 1, will enable the host controller to schedule more transactions 
to the async endpoints ( bulk/ control) and hence will improve the performance of the
bulk endpoint.
This control bit should be enabled only if the existing performance with the default
setting is not sufficient for your HighSpeed application. Setting this bit will only
control, and is only required for High Speed transfers.
</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NAK_PER_ENH_FS</ipxact:name>
            <ipxact:description>NAK_PER_ENH_FS
 - 1: Enables performance enhancement for FS async endpoints in the presence of NAKs
 - 0: Enhancement not applied
If a periodic endpoint is present , and if a bulk endpoint which is also
active is being NAKed by the device, then this could result in a
decrease in performance of other Full Speed bulk endpoint which is ACked by the device.
Setting this bit to 1, will enable the host controller to schedule more transactions
to the async endpoints (bulk/ control) and hence will improve the performance of the
bulk endpoint.
This control bit should be enabled only if the existing performance with the default
setting is not sufficient for your FullSpeed application. Setting this bit will only
control, and is only required for Full Speed transfers.
</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEV_LSP_TAIL_LOCK_DIS</ipxact:name>
            <ipxact:description>DEV_LSP_TAIL_LOCK_DIS
 - 0: Default behavior, enables device lsp lock logic for tail TRB update
 - 1: Fix disabled
This is a bug fix for STAR 9000716195 that affects the CSP mode for OUT endpoints in device mode. The issue is that tail TRB index is not synchronized with the cache Scratchpad bytecount update.
If the fast-forward request comes in-between the bytecount update on a newly fetched TRB and the tail-index write update in TPF,
the RDP works on an incorrect tail index and misses the byte count decrement for the newly fetched TRB in the fast-forwarding process.
This fix needs to be present all the times. 
</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>IP_GAP_ADD_ON</ipxact:name>
            <ipxact:description>This register field is used to add on to the default inter packet gap setting in the USB 2.0 MAC.
This should be programmed to a non zero value only in case where you need to increase the default inter packet delay calculations in the USB 2.0 MAC module DWC_usb3_u2mac.v
</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEV_L1_EXIT_BY_HW</ipxact:name>
            <ipxact:description>DEV_L1_EXIT_BY_HW
 - 0: Default behavior, disables device L1 hardware exit logic
 - 1: feature enabled
This bit is applicable for device mode (2.0) only. This field enables device controller sending remote wakeup for L1 if the device becomes ready for sending/accepting data when in L1 state.
If the host expects the device to send remote wakeup signaling to resume after going into L1 in flow controlled state, then this bit can be set to send the remote wake signal automatically when the device controller becomes ready.
This hardware remote wake feature is applicable only to bulk and interrupt transfers, and not for Isoch/Control
 - When control transfers are in progress, the LPM will be rejected (NYET response).  Only after control transfers are completed (either with ACK/STALL), LPM will be accepted
 - For Isoch transfers, the host needs to do the wake-up  and start the transfer. Device controller will not do remote-wakeup when Isoch endpoints get ready. The device SW needs to keep the GUSB2PHYCFG[EnblSlpM] reset in order to keep the PHY clock to be running for keeping track of SOF intervals.
 - When L1 hibernation is enabled, the controller will not do automatic exit for hibernation requests thru L1.
This bit is quasi-static, that is, it must not be changed during device operation. 
</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>P3_IN_U2</ipxact:name>
            <ipxact:description>P3_IN_U2
 - 0: Default behavior, When SuperSpeed link is in U2, PowerState P2 is attempted on the PIPE Interface.
 - 1: When SuperSpeed link is in U2, PowerState P3 is attempted if GUSB3PIPECTL[17] is set.
Setting this bit enables P3 Power State when the SuperSpeed link is in U2. Another Power Saving option. Check with your PHY vendor before enabling this option.When setting this bit to 1 to enable P3 in P2, GUSB3PIPECTL[27] should be set to 0 to make sure that the U2 exit is attempted in P0. This bit should be set only when GCTL.SOFITPSYNC=1 or GFLADJ.GFLADJ_REFCLK_LPM_SEL=1.
</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEV_FORCE_20_CLK_FOR_30_CLK</ipxact:name>
            <ipxact:description>DEV_FORCE_20_CLK_FOR_30_CLK
 - 0: Default behavior, Uses 3.0 clock when operating in 2.0 mode
 - 1: Feature enabled
This bit is applicable (and to be set) for device mode (DCFG.Speed != SS) only. In the 3.0 device core, if the core is  programmed to operate in 2.0 only (that is, Device Speed is programmed to 2.0 speeds in DCFG[Speed]), 
then setting this bit makes the internal 2.0 (utmi/ulpi) clock to be routed as the 3.0 (pipe) clock. Enabling this feature allows the pipe3 clock to be not-running when forcibly operating in 2.0 device mode.  

Note: 
 - When using this feature, all pipe3 inputs must be in inactive mode. In particular, the pipe3 clocks must not be running and the pipe3_phystatus_async must be tied to 0. This bit should not be set if the core is programmed to operate in SuperSpeed mode (even when it falls back to 2.0). 
 - This bit is quasi-static, that is, it must not be changed during operation. 
 - If the parameter "DWC_USB3_REMOVE_PIPE_CLK_MUX_FOR_20_MODE" is enabled, then muxing 2.0 clock/signals to pipe_clk/signals have to be done outside the controller for this feature to work.
</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEV_TRB_OUT_SPR_IND</ipxact:name>
            <ipxact:description>DEV_TRB_OUT_SPR_IND
 - 0: Default behavior, no change in TRB status dword
 - 1: Feature enabled, OUT TRB status indicates Short Packet
This bit is applicable for device mode only (and ignored in host mode). If the device application (software/hardware) wants to know if a short packet was received for an OUT in the TRB status itself, then this feature can be enabled, so that a bit is set in the TRB writeback in the buf_size dword. Bit[26] - SPR of the {trbstatus, RSVD, SPR, PCM1, bufsize} dword will be set during an OUT transfer TRB write back if this is the last TRB used for that transfer descriptor. This bit is quasi-static, that is, it must not be changed during device operation. 
</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TX_IPGAP_LINECHECK_DIS</ipxact:name>
            <ipxact:description>TX_IPGAP_LINECHECK_DIS
 - 0: Default behavior, no change in Linestate check
 - 1: Feature enabled, 2.0 MAC disables Linestate check during HS transmit
This bit is applicable for HS operation of u2mac. If this feature is enabled, then the 2.0 mac operating in HS ignores the UTMI/ULPI Linestate during the transmit of a token (during token-to-token and token-to-data IPGAP). When enabled, the controller implements a fixed 40-bit TxEndDelay after the packet is given on UTMI and ignores the Linestate during this time. This feature is applicable only in HS mode of operation. 

Device mode: If GUCTL1.TX_IPGAP_LINECHECK_DIS is set, then for device LPM handshake, the core will ignore the linestate after TX and wait for fixed clocks (40 bit times equivalent) after transmitting ACK on utmi.

Host mode: If GUCTL1.TX_IPGAP_LINECHECK_DIS is set, then the ipgap between (tkn to tkn/data) is added by 40 bit times of TXENDDELAY, and linestate is ignored during this 40 bit times delay.

Enable this bit if the LineState will not reflect the expected line state (J) during transmission. This bit is quasi-static, that is, it must not be changed during device operation. 
</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>FILTER_SE0_FSLS_EOP</ipxact:name>
            <ipxact:description>FILTER_SE0_FSLS_EOP
 - 0: Default behavior, no change in Linestate check for SE0 detection in FS/LS
 - 1: Feature enabled, FS/LS SE0 is filtered for 2 clocks for detecting EOP 
This bit is applicable for FS/LS operation. If this feature is enabled, then SE0 on the linestate is validated for 2 consecutive utmi/ulpi clock edges for EOP detection. This feature is applicable only in FS in device mode and FS/LS mode of operation in host mode. 

Device mode: FS -  If GUCTL1.FILTER_SE0_FSLS_EOP is set, then for device LPM handshake, the core will ignore single SE0 glitch on the linestate during transmit. Only 2 or more SE0 is considered as a valid EOP on FS.

Host mode: FS/LS - If GUCTL1.FILTER_SE0_FSLS_EOP is set, then the core will ignore single SE0 glitch on the linestate during transmit. Only 2 or more SE0 is considered as a valid EOP on FS/LS port.

Enable this feature if the LineState has SE0 glitches during transmission. This bit is quasi-static, that is, it must not be changed during device operation. 
</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DS_RXDET_MAX_TOUT_CTRL</ipxact:name>
            <ipxact:description>DS_RXDET_MAX_TOUT_CTRL

This bit is used to control the tRxDetectTimeoutDFP timer for the SuperSpeed link.
 - 0: Default behavior; 12ms is used as tRxDetectTimeoutDFP.
 - 1: 120ms is used as the tRxDetectTimeoutDFP.
This bit is used only in host mode. For more details, refer to ECN020 for USB 3.0 Specification.
</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEV_DECOUPLE_L1L2_EVT</ipxact:name>
            <ipxact:description>DEV_DECOUPLE_L1L2_EVT
 - 0: Default behavior, no change in device events L1/L2U3 events are not decoupled (old behavior of v2.90a and before)
 - 1: Feature enabled, L1 and L2 events are separated when operating in 2.0 mode. Separate event enable bits for L1 suspend and wake events.
This bit is applicable for device mode only. If this feature is enabled, L1 suspend and wake events have individual controls to enable/mask them.
Enable this feature if you want to get L1 (LPM) events separtely and not combined with L2 events when operating in 2.0 speeds.
</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GSNPSID</ipxact:name>
          <ipxact:description>Global Synopsys ID Register

This is a read-only register that contains the release number of the core.</ipxact:description>
          <ipxact:addressOffset>'h20</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>SYNOPSYSID</ipxact:name>
            <ipxact:description>Synopsys ID
 - SynopsysID[31:16] indicates Core Identification Number. 0x5533 is ASCII for U3 (DWC_usb3).
 - SynopsysID[15:0] indicates the release number. Current Release is 2.90a.
Software uses this register to configure release-specific features in the driver.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h5533320a</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GGPIO</ipxact:name>
          <ipxact:description>Global General Purpose Input/Output Register

The application can use this register for general purpose input and output ports or for debugging.</ipxact:description>
          <ipxact:addressOffset>'h24</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>GPI</ipxact:name>
            <ipxact:description>General Purpose Input

This field's read value reflects the gp_in[15:0] core input value. 

Note: Register bit-bash test should not check for reset value of this field since its not predictable; depends on the gp_in port.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>GPO</ipxact:name>
            <ipxact:description>General Purpose Output

This field's value is driven out on the gp_out[15:0] core output port.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GUID</ipxact:name>
          <ipxact:description>Global User ID Register

This is a read/write register containing the User ID. The power-on value for this register is specified as the User Identification Register. Power-on value during coreConsultant configuration (parameter DWC_USB3_USERID). This register can be used in the following ways:
 - To store the version or revision of your system;
 - To store hardware configurations that are outside the core;
 - As a scratch register.</ipxact:description>
          <ipxact:addressOffset>'h28</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>USERID</ipxact:name>
            <ipxact:description>USERID

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h12345678</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:vendorExtensions>
            <snps:register>
              <snps:attribute name="SideEffects">0</snps:attribute>
            </snps:register>
          </ipxact:vendorExtensions>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GUCTL</ipxact:name>
          <ipxact:description>Global User Control Register:  

This register provides a few options for the software to control the core behavior in the Host mode. Most of the options are used to improve host inter-operability with different devices.</ipxact:description>
          <ipxact:addressOffset>'h2c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DTFT</ipxact:name>
            <ipxact:description>Device Timeout Fine Tuning (DTFT)

This field is a Host mode parameter which determines how long the host waits for a response from device before considering a timeout.

For the DTFT field to take effect, DTCT must be set to 2'b00.

The DTFT value is the number of 125 MHz clocks * 256 to count before considering a device timeout. 

The minimum value of DTFT is 2.

For example, if the mac3_clk is 125 MHz clk (8 ns period), this is calculated as follows:

(DTFT value) * 256 * (8 ns) 

Quick Reference:
 - if DTFT = 0x2, 2*256*8 = 4usec timeout
 - if DTFT = 0x5, 5*256*8 = 10usec timeout
 - if DTFT = 0xA, 10*256*8 = 20usec timeout
 - if DTFT = 0x10, 16*256*8 = 32usec timeout
 - if DTFT = 0x19, 25*256*8 = 51usec timeout
 - if DTFT = 0x31, 49*256*8 = 100usec timeout
 - if DTFT = 0x62, 98*256*8 = 200usec timeout
Note: 
 - When SSIC is enabled, in HS_G1_G2_G3 mode when ssic_soc_pa_clk_freq = 2'b01, then DTFT value must be calculated for 156.25 MHz clock, for example, for equivalent delay of 32usec DTFT value must be 9'h14. 
 - When the system latency is larger than the programmed DTCT/DTFT value, if the host controller is not able to accept certain transactions on the bus (because of system bus delays), the controller may not release header credits which in turn can cause the host to report a transaction error. Therefore, program this value to be larger than your system delay.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h10</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DTCT</ipxact:name>
            <ipxact:description>Device Timeout Coarse Tuning (DTCT)

This field is a Host mode parameter which determines how long the host waits for a response from device before considering a timeout. 

The core first checks the DTCT value. If it is 0, then the timeout value is defined by the DTFT. If it is non-zero, then it uses the following timeout values:
 - 2'b00: 0 usec -&gt; use DTFT value instead
 - 2'b01: 500 usec
 - 2'b10: 1.5 msec
 - 2'b11: 6.5 msec
Note: When the system latency is larger than the programmed DTCT/DTFT value, if the host controller is not able to accept certain transactions on the bus (because of system bus delays), the controller may not release header credits which in turn can cause the host to report a transaction error. Therefore, program this value to be larger than your system delay.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>InsrtExtrFSBODI</ipxact:name>
            <ipxact:description>Insert Extra Delay Between FS Bulk OUT Transactions (InsrtExtrFSBODl).

Some FS devices are slow to receive Bulk OUT data and can get stuck when there are consecutive Bulk OUT transactions with short inter-transaction delays. This bit is used to control whether the host inserts extra delay between consecutive Bulk OUT transactions to a FS Endpoint.
 - 1'b0: Host doesn't insert extra delay between consecutive Bulk OUT transactions to a FS Endpoint.
 - 1'b1: Host inserts about 12us extra delay between consecutive Bulk OUT transactions to a FS Endpoint to work around the device issue.
Note: Setting this bit to one will reduce the Bulk OUT transfer performance for most of the FS devices.
</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ExtCapSupptEN</ipxact:name>
            <ipxact:description>External Extended Capability Support Enable (ExtCapSuptEN)

When set, this field enables extended capabilities to be implemented outside the core. 

When the ExtCapSupEN is set and the Debug Capability is enabled, the Next Capability pointer in "Debug Capability" returns 16.

A read to the first DWORD of the last internal extended capability (the "xHCI Supported Protocol Capability for USB 3.0" when the Debug Capability is not enabled) returns a value of 4 in the Next Capability Pointer field. 

This indicates to software that there is another capability four DWORDs after this capability (for example, at address N+16 where N is the address of this DWORD). 
If enabled, an external address decoder that snoops the xHC slave interface must be implemented.   If it sees an access to N+16 or greater, the slave access is re-routed to a piece of hardware which returns the external capability pointer register of the new capability and also handles reads/writes to this new capability and the side effects. 

If disabled, a read to the first DWORD of the last internal extended capability returns 0 in the 'Next Capability Pointer field. This indicates there are no more capabilities.
</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>EnOverlapChk</ipxact:name>
            <ipxact:description>Enable Check for LFPS Overlap During Remote Ux Exit:

If this bit is set to,
 - 1'b1: The SuperSpeed link when exiting U1/U2/U3 waits for either the remote link LFPS or TS1/TS2 training symbols before it confirms that the LFPS handshake is complete. This is done to handle the case where the LFPS glitch causes the link to start exiting from the low power state. Looking for the LFPS overlap makes sure that the link partner also sees the LFPS.
 - 1'b0: When the link exists U1/U2/U3 because of a remote exit, it does not look for an LFPS overlap.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>USBHstInAutoRetryEn</ipxact:name>
            <ipxact:description>Host IN Auto Retry (USBHstInAutoRetryEn)

When set, this field enables the Auto Retry feature. For IN transfers (non-isochronous) that encounter data packets with CRC errors or internal overrun scenarios, the auto retry feature causes the Host core to reply to the device with a non-terminating retry ACK (that is, an ACK transaction packet with Retry = 1 and NumP != 0). 

If the Auto Retry feature is disabled (default), the core will respond with a terminating retry ACK (that is, an ACK transaction packet with Retry = 1 and NumP = 0).
 - 1'b0: Auto Retry Disabled 
 - 1'b1: Auto Retry Enabled
Note: When enabling Auto Retry feature, if the system latency is large enough to cause the internal PSQ full (PSQ can be full as the result of messages not being processed because of pending fetches before flushing the TxQ due to NRDY/ERDY conditions), then the host controller can generate a transaction error.
</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ResBwHSEPS</ipxact:name>
            <ipxact:description>Reserving 85% Bandwidth for HS Periodic EPs (ResBwHSEPS)

By default, HC reserves 80% of the bandwidth for periodic EPs. If this bit is set, the bandwidth is relaxed to 85% to accommodate two high speed, high bandwidth ISOC EPs.

USB 2.0 required 80% bandwidth allocated for ISOC traffic. If two High-bandwidth ISOC devices (HD Webcams) are connected, and if each requires 1024-bytes X 3 packets per Micro-Frame, then the bandwidth required is around 82%. If this bit is set, then it is possible to connect two Webcams of 1024bytes X 3 paylod per Micro-Frame each. Otherwise, you may have to reduce the resolution of the Webcams.

This bit is valid in Host and DRD configuration and is used in host mode operation only. Ignore this bit in device mode.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SprsCtrlTransEn</ipxact:name>
            <ipxact:description>Sparse Control Transaction Enable

Some devices are slow in responding to Control transfers. Scheduling multiple transactions in one microframe/frame can cause these devices to misbehave.

If this bit is set to 1'b1, the host controller schedules transactions for a Control transfer in different microframes/frames.
</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_20_18</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NoExtrDl</ipxact:name>
            <ipxact:description>No Extra Delay Between SOF and the First Packet(NoExtrDl)

Some HS devices misbehave when the host sends a packet immediately after a SOF. However, adding an extra delay between a SOF and the first packet can reduce the USB data rate and performance. 

This bit is used to control whether the host must wait for 2 microseconds before it sends the first packet after a SOF, or not. User can set this bit to one to improve the performance if those problematic devices are not a concern in the user's host environment.
 - 1'b0: Host waits for 2 microseconds after a SOF before it sends the first USB packet.
 - 1'b1: Host doesn't wait after a SOF before it sends the first USB packet.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>REFCLKPER</ipxact:name>
            <ipxact:description>REFCLKPER

This field indicates in terms of nano seconds the period of ref_clk. The default value of this register is set to 'h8 (8ns/125 MHz). 

This field needs to be updated during power-on initialization, if GCTL.SOFITPSYNC or GFLADJ.GFLADJ_REFCLK_LPM_SEL is set to '1'. The programmable maximum value is 62ns, and the minimum value is 8ns. 

You must use a reference clock with a period that is an integer multiple, so that ITP can meet the jitter margin of 32ns. The allowable ref_clk frequencies whose period is not integer multiples are 16/17/19.2/24/39.7MHz. 

This field must not be set to '0' at any time. If you never plan to use this feature, then set this field to 'h8, the default value.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'ha</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>10</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GBUSERRADDRLO</ipxact:name>
          <ipxact:description>Gobal SoC Bus Error Address Register - Low

This is an alternate register for the GBUSERRADDR register.</ipxact:description>
          <ipxact:addressOffset>'h30</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>BUSERRADDR</ipxact:name>
            <ipxact:description>Bus Address - Low (BusAddrLo)
This register contains the lower 32 bits of the first bus address that encountered a SoC bus error. It is valid when the GSTS.BusErrAddrVld field is 1.
It can only be cleared by resetting the core.

Note: Only supported in AHB and AXI configurations.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GBUSERRADDRHI</ipxact:name>
          <ipxact:description>Gobal SoC Bus Error Address Register - High

This is an alternate register for the GBUSERRADDR register.</ipxact:description>
          <ipxact:addressOffset>'h34</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>BUSERRADDR</ipxact:name>
            <ipxact:description>Bus Address - High (BusAddrHi)
This register contains the higher 32 bits of the first bus address that encountered a SoC bus error. It is valid when the GSTS.BusErrAddrVld field is 1.
It can only be cleared by resetting the core.

Note: Only supported in AHB and AXI configurations.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GPRTBIMAPLO</ipxact:name>
          <ipxact:description>Global SS Port to Bus Instance Mapping Register - Low

This is an alternate register for the GPRTBIMAP register.

Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

For a configuration with number of USB 3.0 ports same as number of SS Bus Instances, do not remap during debug session. If you remap for some reason, then the debug host must be connected to a port which has a dedicated SS Bus Instance.

For example, if DWC_USB3_NUM_U3_ROOT_PORTS =3 and DWC_USB3_NUM_SS_USB_INSTANCES=3, and software maps the first SS port to the first SS BI and the second/third port to the second BI, then the debug host can be connected to the first port only.

Note: For reset values, refer to the corresponding values in the GPRTBIMAP register.</ipxact:description>
          <ipxact:addressOffset>'h38</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>BINUM1</ipxact:name>
            <ipxact:description>BINUM1: SS USB Instance Number for Port 1.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM2</ipxact:name>
            <ipxact:description>BINUM2: SS USB Instance Number for Port 2.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM3</ipxact:name>
            <ipxact:description>BINUM3: SS USB Instance Number for Port 3.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM4</ipxact:name>
            <ipxact:description>BINUM4: SS USB Instance Number for Port 4.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM5</ipxact:name>
            <ipxact:description>BINUM5: SS USB Instance Number for Port 5. 

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM6</ipxact:name>
            <ipxact:description>BINUM6: SS USB Instance Number for Port 6.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM7</ipxact:name>
            <ipxact:description>BINUM7: SS USB Instance Number for Port 7.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM8</ipxact:name>
            <ipxact:description>BINUM8: SS USB Instance Number for Port 8.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GPRTBIMAPHI</ipxact:name>
          <ipxact:description>Global SS Port to Bus Instance Mapping Register - High

This is an alternate register for the GPRTBIMAP register.

For a configuration with number of USB 3.0 ports same as number of SS Bus Instances, do not remap during debug session. If you remap for some reason, then the debug host must be connected to a port which has a dedicated SS Bus Instance.

For example, if DWC_USB3_NUM_U3_ROOT_PORTS =3 and DWC_USB3_NUM_SS_USB_INSTANCES=3, and software maps the first SS port to the first SS BI and the second/third port to the second BI, then the debug host can be connected to the first port only.

Note: For reset values, refer to the corresponding values in the GPRTBIMAP register.</ipxact:description>
          <ipxact:addressOffset>'h3c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>BINUM9</ipxact:name>
            <ipxact:description>BINUM9: SS USB Instance Number for Port 9.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM10</ipxact:name>
            <ipxact:description>BINUM10: SS USB Instance Number for Port 10.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM11</ipxact:name>
            <ipxact:description>BINUM11: SS USB Instance Number for Port 11.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM12</ipxact:name>
            <ipxact:description>BINUM12: SS USB Instance Number for Port 12.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM13</ipxact:name>
            <ipxact:description>BINUM13: SS USB Instance Number for Port 13.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM14</ipxact:name>
            <ipxact:description>BINUM14: SS USB Instance Number for Port 14.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM15</ipxact:name>
            <ipxact:description>BINUM15: SS USB Instance Number for Port 15.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_28</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GHWPARAMS0</ipxact:name>
          <ipxact:description>Global Hardware Parameters Register 0

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to Parameters chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting "What's This" or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &lt;workspace&gt;/src/DWC_usb3_params.v file; you must not change them.</ipxact:description>
          <ipxact:addressOffset>'h40</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ghwparams0_2_0</ipxact:name>
            <ipxact:description>`DWC_USB3_MODE</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams0_5_3</ipxact:name>
            <ipxact:description>`DWC_USB3_MBUS_TYPE</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams0_7_6</ipxact:name>
            <ipxact:description>`DWC_USB3_SBUS_TYPE</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams0_15_8</ipxact:name>
            <ipxact:description>`DWC_USB3_MDWIDTH</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h40</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams0_23_16</ipxact:name>
            <ipxact:description>`DWC_USB3_SDWIDTH</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h20</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams0_31_24</ipxact:name>
            <ipxact:description>`DWC_USB3_AWIDTH</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h40</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GHWPARAMS1</ipxact:name>
          <ipxact:description>Global Hardware Parameters Register 1

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to Parameters chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting "What's This" or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &lt;workspace&gt;/src/DWC_usb3_params.v file; you must not change them.</ipxact:description>
          <ipxact:addressOffset>'h44</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ghwparams1_2_0</ipxact:name>
            <ipxact:description>`DWC_USB3_IDWIDTH-1</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h3</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_5_3</ipxact:name>
            <ipxact:description>`DWC_USB3_BURSTWIDTH-1</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h7</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_8_6</ipxact:name>
            <ipxact:description>`DWC_USB3_DATAINFOWIDTH</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_11_9</ipxact:name>
            <ipxact:description>`DWC_USB3_REQINFOWIDTH</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_14_12</ipxact:name>
            <ipxact:description>`DWC_USB3_ASPACEWIDTH</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_20_15</ipxact:name>
            <ipxact:description>`DWC_USB3_DEVICE_NUM_INT

For details on `DWC_USB3_DEVICE_NUM_INT, refer to &lt;workspace&gt;/src/DWC_usb3_params.v file.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_22_21</ipxact:name>
            <ipxact:description>`DWC_USB3_NUM_RAMS</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h3</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_23</ipxact:name>
            <ipxact:description>`DWC_USB3_SPRAM_TYP</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_25_24</ipxact:name>
            <ipxact:description>`DWC_USB3_EN_PWROPT</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_26</ipxact:name>
            <ipxact:description>`DWC_USB3_MAC_PHY_CLKS_SYNC</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_27</ipxact:name>
            <ipxact:description>`DWC_USB3_MAC_RAM_CLKS_SYNC</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_28</ipxact:name>
            <ipxact:description>`DWC_USB3_RAM_BUS_CLKS_SYNC</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_29</ipxact:name>
            <ipxact:description>Reserved1</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_30</ipxact:name>
            <ipxact:description>`DWC_USB3_RM_OPT_FEATURES</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams1_31</ipxact:name>
            <ipxact:description>`DWC_USB3_EN_DBC</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GHWPARAMS2</ipxact:name>
          <ipxact:description>Global Hardware Parameters Register 2

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to Parameters chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting "What's This" or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &lt;workspace&gt;/src/DWC_usb3_params.v file; you must not change them.</ipxact:description>
          <ipxact:addressOffset>'h48</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ghwparams2_31_0</ipxact:name>
            <ipxact:description>`DWC_USB3_USERID</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h12345678</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GHWPARAMS3</ipxact:name>
          <ipxact:description>Global Hardware Parameters Register 3

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to Parameters chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting "What's This" or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &lt;workspace&gt;/src/DWC_usb3_params.v file; you must not change them.</ipxact:description>
          <ipxact:addressOffset>'h4c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ghwparams3_1_0</ipxact:name>
            <ipxact:description>`DWC_USB3_SSPHY_INTERFACE</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_3_2</ipxact:name>
            <ipxact:description>`DWC_USB3_HSPHY_INTERFACE</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_5_4</ipxact:name>
            <ipxact:description>`DWC_USB3_FSPHY_INTERFACE</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_7_6</ipxact:name>
            <ipxact:description>`DWC_USB3_HSPHY_DWIDTH</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_9_8</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_10</ipxact:name>
            <ipxact:description>`DWC_USB3_VENDOR_CTL_INTERFACE</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_11</ipxact:name>
            <ipxact:description>`DWC_USB3_ULPI_CARKIT</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_17_12</ipxact:name>
            <ipxact:description>`DWC_USB3_NUM_EPS</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h8</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_22_18</ipxact:name>
            <ipxact:description>`DWC_USB3_NUM_IN_EPS</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_30_23</ipxact:name>
            <ipxact:description>`DWC_USB3_CACHE_TOTAL_XFER_RESOURCES</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h8</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams3_31</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GHWPARAMS4</ipxact:name>
          <ipxact:description>Global Hardware Parameters Register 4

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to Parameters chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting "What's This" or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &lt;workspace&gt;/src/DWC_usb3_params.v file; you must not change them.</ipxact:description>
          <ipxact:addressOffset>'h50</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ghwparams4_5_0</ipxact:name>
            <ipxact:description>`DWC_USB3_CACHE_TRBS_PER_TRANSFER</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
                <ipxact:mask>'h3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_6</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_8_7</ipxact:name>
            <ipxact:description>`DWC_USB3_NUM_SSIC_NUM_LANE

This bit indicates `DWC_USB3_SSIC_NUM_LANE parameter value chosen by the user
 - 2'b00: 4 lane
 - 2'b01: 1 lane
 - 2'b10: 2 lane
 - 2'b11: Reserved
Note: When the DWC_USB3_NUM_SSIC_PORTS parameter is set to zero, this field is Reserved.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_10_9</ipxact:name>
            <ipxact:description>`DWC_USB3_SSIC_GEAR

This field indicates DWC_USB3_SSIC_GEAR parameter value chosen by the user
 - 2'b00: Reserved
 - 2'b01: HS-G1
 - 2'b10: HS-G2
 - 2'b11: HS-G3
Note: When the DWC_USB3_NUM_SSIC_PORTS parameter is set to zero, this field is Reserved.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_11</ipxact:name>
            <ipxact:description>`DWC_USB3_SSIC_NON_SNPS_MPHY

This field indicates whether Synopsys M-PHY or a third-party M-PHY is used with SSIC ports.
 - 1'b0: Synopsys M-PHY
 - 1'b1: Third-party M-PHY
Note: When the DWC_USB3_NUM_SSIC_PORTS parameter is set to zero, this bit is Reserved.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_12</ipxact:name>
            <ipxact:description>`DWC_USB3_EN_SSIC
 - 1'b0: if DWC_USB3_EN_SSIC == 0
 - 1'b1: if DWC_USB3_EN_SSIC != 0
Note: When the DWC_USB3_NUM_SSIC_PORTS parameter is set to zero, this bit is Reserved.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_16_13</ipxact:name>
            <ipxact:description>`DWC_USB3_HIBER_SCRATCHBUFS

Number of external scratchpad buffers the core requires to save its internal state in the device mode. Each buffer is assumed to be 4KB. The scratchpad buffer array must have this many buffer pointers.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_20_17</ipxact:name>
            <ipxact:description>`DWC_USB3_NUM_SS_USB_INSTANCES</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_21</ipxact:name>
            <ipxact:description>`DWC_USB3_EXT_BUFF_CONTROL</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_22</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_23</ipxact:name>
            <ipxact:description>`DWC_USB3_EN_ISOC_SUPT</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_27_24</ipxact:name>
            <ipxact:description>`DWC_USB3_BMU_PTL_DEPTH-1</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h7</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams4_31_28</ipxact:name>
            <ipxact:description>`DWC_USB3_BMU_LSP_DEPTH</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GHWPARAMS5</ipxact:name>
          <ipxact:description>Global Hardware Parameters Register 5

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to Parameters chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting "What's This" or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &lt;workspace&gt;/src/DWC_usb3_params.v file; you must not change them.</ipxact:description>
          <ipxact:addressOffset>'h54</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ghwparams5_3_0</ipxact:name>
            <ipxact:description>`DWC_USB3_BMU_BUSGM_DEPTH</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h8</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams5_9_4</ipxact:name>
            <ipxact:description>`DWC_USB3_RXQ_FIFO_DEPTH</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h10</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams5_15_10</ipxact:name>
            <ipxact:description>`DWC_USB3_TXQ_FIFO_DEPTH</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h10</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams5_21_16</ipxact:name>
            <ipxact:description>`DWC_USB3_DWQ_FIFO_DEPTH</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h20</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams5_27_22</ipxact:name>
            <ipxact:description>`DWC_USB3_DFQ_FIFO_DEPTH</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h10</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams5_31_28</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GHWPARAMS6</ipxact:name>
          <ipxact:description>Global Hardware Parameters Register 6

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to Parameters chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting "What's This" or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &lt;workspace&gt;/src/DWC_usb3_params.v file; you must not change them.</ipxact:description>
          <ipxact:addressOffset>'h58</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ghwparams6_5_0</ipxact:name>
            <ipxact:description>`DWC_USB3_PSQ_FIFO_DEPTH</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h20</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams6_6</ipxact:name>
            <ipxact:description>`DWC_USB3_EN_DBG_PORTS</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams6_7</ipxact:name>
            <ipxact:description>`DWC_USB3_EN_FPGA</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams6_9_8</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SRPSupport</ipxact:name>
            <ipxact:description>SRP Support Enabled

The application uses this bit to determine the DWC_usb3 core's SRP support.
 - 1'b0: SRP support is not enabled;
 - 1'b1: SRP support is enabled;
This bit is 1'b1 when the parameter DWC_USB3_EN_OTG is not 0.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HNPSupport</ipxact:name>
            <ipxact:description>RSP/HNP Support Enabled

The application uses this bit to determine the DWC_usb3 core's RSP/HNP support.

If DWC_USB3_EN_OTG=2,
 - 1'b0: RSP and HNP support is not enabled. The only exception for this rule is for SSPC-OTG devices where RSP support is not enabled, but HNP support is enabled. (Refer to the  OCFG.SSPC-OTG bit.)
 - 1'b1: RSP and HNP support is enabled
If DWC_USB3_EN_OTG=1,
 - 1'b0: HNP support is not enabled;
 - 1'b1: HNP support is enabled;
This bit is enabled only if HNP mode was specified for HNP Mode of Operation in coreConsultant (parameter DWC_USB3_EN_OTG is not 0, and DWC_USB3_MODE is DRD). Otherwise, it reads 0.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ADPSupport</ipxact:name>
            <ipxact:description>`DWC_USB3_EN_ADP</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>OTG_SS_Support</ipxact:name>
            <ipxact:description>OTG 3.0 Support Enabled

This bit indicates whether the parameter `DWC_USB3_EN_OTG is set to 2. In other words, it indicates that whether the DWC_usb3 core supports OTG 3.0.
 - 1'b0: No OTG 3.0 support
 - 1'b1: Supports OTG 3.0</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BCSupport</ipxact:name>
            <ipxact:description>`DWC_USB3_EN_BC</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BusFltrsSupport</ipxact:name>
            <ipxact:description>`DWC_USB3_EN_BUS_FILTERS</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams6_31_16</ipxact:name>
            <ipxact:description>`DWC_USB3_RAM0_DEPTH</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h7ca</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GHWPARAMS7</ipxact:name>
          <ipxact:description>Global Hardware Parameters Register 7

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to Parameters chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting "What's This" or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &lt;workspace&gt;/src/DWC_usb3_params.v file; you must not change them.</ipxact:description>
          <ipxact:addressOffset>'h5c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ghwparams7_15_0</ipxact:name>
            <ipxact:description>`DWC_USB3_RAM1_DEPTH</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h44d</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ghwparams7_31_16</ipxact:name>
            <ipxact:description>`DWC_USB3_RAM2_DEPTH</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h308</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GDBGFIFOSPACE</ipxact:name>
          <ipxact:description>Global Debug Queue/FIFO Space Available Register

Bit Bash test should not be done on this debug register.</ipxact:description>
          <ipxact:addressOffset>'h60</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>FIFO_QUEUE_SELECT</ipxact:name>
            <ipxact:description>FIFO/Queue Select (or) Port-Select
 - FIFO/Queue Select[8:5] indicates the FIFO/Queue Type
 - FIFO/Queue Select[4:0] indicates the FIFO/Queue Number
For example, 9'b0_0010_0001 refers to RxFIFO_1 and 9'b0_0101_1110 refers to TxReqQ_30.
 - 9'b0_0001_1111 to 9'b0_0000_0000: TxFIFO_31 to TxFIFO_0
 - 9'b0_0011_1111 to 9'b0_0010_0000: RxFIFO_31 to RxFIFO_0
 - 9'b0_0101_1111 to 9'b0_0100_0000: TxReqQ_31 to TxReqQ_0
 - 9'b0_0111_1111 to 9'b0_0110_0000: RxReqQ_31 to RxReqQ_0
 - 9'b0_1001_1111 to 9'b0_1000_0000: RxInfoQ_31 to RxInfoQ_0
 - 9'b0_1010_0000: DescFetchQ_0 (for backwards compatibility)
 - 9'b0_1010_0001: EventQ_0 (for backwards compatibility)
 - 9'b0_1010_0010: ProtocolStatusQ_0
 - 9'b0_1101_1111 to 9'b0_1110_0000: DescFetchQ_31 to DescFetchQ_0
 - 9'b0_1111_1111 to 9'b0_1110_0000: WriteBack/EventQ_31 to WriteBack/EventQ_0
 - 9'b1_0000_0111 to 9'b1_0000_0000: AuxEventQ_7 to AuxEventQ_0 (if EN_SEPARATE_DESC_QUEUES=1)
Port-Select[3:0] selects the port-number when accessing GDBGLTSSM register.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15_9</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SPACE_AVAILABLE</ipxact:name>
            <ipxact:description>SPACE_AVAILABLE</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h42</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GDBGLTSSM</ipxact:name>
          <ipxact:description>Global Debug LTSSM Register

In multi-port host configuration, the port-number is defined by Port-Select[3:0] field in the GDBGFIFOSPACE register.  

Note: 
 - GDBGLTSSM register is not applicable for USB 2.0-only mode.
 - Bit Bash test should not be done on this debug register.</ipxact:description>
          <ipxact:addressOffset>'h64</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>TXONESZEROS</ipxact:name>
            <ipxact:description>Tx Ones/Zeros (TxOnesZeros)

For field definition, refer to Table 5-3 of the PIPE3 specification.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RXTERMINATION</ipxact:name>
            <ipxact:description>Rx Termination (RxTermination)

For details on `DWC_USB3_PIPE_RXTERM_RESET_VAL, refer to &lt;workspace&gt;/src/DWC_usb3_params.v</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TXSWING</ipxact:name>
            <ipxact:description>Tx Swing (TxSwing)

For field definition, refer to Table 5-3 of the PIPE3 specification.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LTDBClkState</ipxact:name>
            <ipxact:description>LTSSM Clock State (LTDBClkState)  

In multi-port host configuration, the port number is defined by Port-Select[3:0] field in the GDBGFIFOSPACE register.  Note: GDBGLTSSM register is not applicable for USB 2.0-only mode. 
 - 000: CLK_NORM (PHY is in non-P3 state and PCLK is running)    
 - 001: CLK_TO_P3 (P3 entry request to PHY);
 - 010: CLK_WAIT1 (Wait for Phy_Status (P3 request));          
 - 011: CLK_P3 (PHY is in P3 and PCLK is not running);
 - 100: CLK_TO_P0 (P3 exit request to PHY);          
 - 101: CLK_WAIT2 (Wait for Phy_Status (P3 exit request))</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TXDEEMPHASIS</ipxact:name>
            <ipxact:description>TXDEEMPHASIS (TxDeemphasis)

For field definition, refer to Table 5-3 of the PIPE3 specification.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
                <ipxact:mask>'h2</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RXEQTRAIN</ipxact:name>
            <ipxact:description>RxEq Train

For field definition, refer to Table 5-3 of the PIPE3 specification.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>POWERDOWN</ipxact:name>
            <ipxact:description>POWERDOWN (PowerDown)

For field definition, refer to Table 5-3 of the PIPE3 specification.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LTDBPhyCmdState</ipxact:name>
            <ipxact:description>LTSSM PHY command State (LTDBPhyCmdState)
 - 000: PHY_IDLE (PHY command state is in IDLE. No PHY request pending)
 - 001: PHY_DET (Request to start Receiver detection)
 - 010: PHY_DET_3 (Wait for Phy_Status (Receiver detection))
 - 011: PHY_PWR_DLY (Delay Pipe3_PowerDown P0 -&gt; P1/P2/P3 request)
 - 100: PHY_PWR_A (Delay for internal logic)
 - 101: PHY_PWR_B (Wait for Phy_Status(Power state change request))</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TxDetRxLoopback</ipxact:name>
            <ipxact:description>Tx Detect Rx/Loopback (TxDetRxLoopback)

For field definition, refer to Table 5-3 of the PIPE3 specification.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RXPOLARITY</ipxact:name>
            <ipxact:description>Rx Polarity (RxPolarity)

For field definition, refer to Table 5-3 of the PIPE3 specification.</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TXELECLDLE</ipxact:name>
            <ipxact:description>Tx Elec Idle (TxElecIdle)

For field definition, refer to Table 5-3 of the PIPE3 specification.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
                <ipxact:mask>'h0</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ELASTICBUFFERMODE</ipxact:name>
            <ipxact:description>Elastic Buffer Mode (ElasticBufferMode)

For field definition, refer to Table 5-3 of the PIPE3 specification.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LTDBSUBSTATE</ipxact:name>
            <ipxact:description>LTDB Sub-State (LTDBSubState)</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LTDBLINKSTATE</ipxact:name>
            <ipxact:description>LTDB Link State (LTDBLinkState)</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
                <ipxact:mask>'hb</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LTDBTIMEOUT</ipxact:name>
            <ipxact:description>LTDB Timeout (LTDBTimeout)</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PRTDIRECTION</ipxact:name>
            <ipxact:description>Port Direction
 - 1'b0: Upstream
 - 1'b1: Downstream
Note: This bit is applicable only for OTG 3.0 mode of operation and is Reserved for other modes.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>X3_DS_HOST_SHUTDOWN</ipxact:name>
            <ipxact:description>a3_ds_host_shutdown/b3_ds_host_shutdown

Note: This bit is applicable only for OTG 3.0 mode of operation and is Reserved for other modes.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>X3_XS_SWAPPING</ipxact:name>
            <ipxact:description>a3_ds_swapping/a3_us_swapping/
b3_ds_swapping/b3_us_swapping

Interpret this field based on the Port direction.

Note: This bit is applicable only for OTG 3.0 mode of operation and is Reserved for other modes.</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RxElecidle</ipxact:name>
            <ipxact:description>RxElecidle

For description of RxElecIdle, see table 5-4, "Status Interface Signals" of the PIPE3 Specification.</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
                <ipxact:mask>'h0</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_31</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GDBGLNMCC</ipxact:name>
          <ipxact:description>Global Debug LNMCC Register

Bit Bash test should not be done on this debug register.</ipxact:description>
          <ipxact:addressOffset>'h68</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>LNMCC_BERC</ipxact:name>
            <ipxact:description>This field indicates the bit error rate information for the port selected in the GDBGFIFOSPACE.PortSelect field. 

This field is for debug purposes only.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>9</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_9</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>23</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GDBGBMU</ipxact:name>
          <ipxact:description>Global Debug BMU Register

Bit Bash test should not be done on this debug register.</ipxact:description>
          <ipxact:addressOffset>'h6c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>BMU_CCU</ipxact:name>
            <ipxact:description>BMU_CCU Debug information</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BMU_DCU</ipxact:name>
            <ipxact:description>BMU_DCU Debug information</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BMU_BCU</ipxact:name>
            <ipxact:description>BMU_BCU Debug information</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GDBGLSPMUX_HST</ipxact:name>
          <ipxact:description>Global Debug LSP MUX Register - Host

This register is for internal use only.

If DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT is enabled during core configuration, then the default values readout is X (Undefined).

Bit Bash test should not be done on this debug register.</ipxact:description>
          <ipxact:addressOffset>'h70</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>HOSTSELECT</ipxact:name>
            <ipxact:description>Device LSP Select

Selects the LSP debug information presented in the GDBGLSP register in host mode.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>14</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15_14</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>logic_analyzer_trace</ipxact:name>
            <ipxact:description>logic_analyzer_trace Port MUX Select

Currently only bits[21:16] are used. For details on how the mux controls the debug traces, refer to the "assign logic_analyzer_trace =" code section in the DWC_usb3.v file.

A value of 6'h3F drives 0s on the logic_analyzer_trace signal. If you plan to OR (instead using a mux) this signal with other trace signals in your system to generate a common trace signal, you can use this feature.
</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h3f</ipxact:value>
                <ipxact:mask>'hc0</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_24</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:alternateRegisters>
            <ipxact:alternateRegister>
              <ipxact:name>GDBGLSPMUX_DEV</ipxact:name>
              <ipxact:description>Global Debug LSP MUX Register - Device

This register is for internal use only.

If DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT is enabled during core configuration, then the default values readout is X (Undefined).

Bit Bash test should not be done on this debug register.
</ipxact:description>
              <ipxact:alternateGroups>
                <ipxact:alternateGroup>GDBGLSPMUX_DEV</ipxact:alternateGroup>
              </ipxact:alternateGroups>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:field>
                <ipxact:name>EPSELECT</ipxact:name>
                <ipxact:description>Device Endpoint Select

Selects the Endpoint debug information presented in the GDBGEPINFO registers in device mode.
</ipxact:description>
                <ipxact:bitOffset>0</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                    <ipxact:mask>'hf</ipxact:mask>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>4</ipxact:bitWidth>
                <ipxact:access>read-write</ipxact:access>
                <ipxact:testable>false</ipxact:testable>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>DEVSELECT</ipxact:name>
                <ipxact:description>Device LSP Select

Selects the LSP debug information presented in the GDBGLSP register in device mode.
</ipxact:description>
                <ipxact:bitOffset>4</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                    <ipxact:mask>'hf</ipxact:mask>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>4</ipxact:bitWidth>
                <ipxact:access>read-write</ipxact:access>
                <ipxact:testable>false</ipxact:testable>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>HOSTSELECT</ipxact:name>
                <ipxact:description>Device LSP Select
</ipxact:description>
                <ipxact:bitOffset>8</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                    <ipxact:mask>'h3f</ipxact:mask>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>6</ipxact:bitWidth>
                <ipxact:access>read-write</ipxact:access>
                <ipxact:testable>false</ipxact:testable>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>reserved_14</ipxact:name>
                <ipxact:description>Reserved</ipxact:description>
                <ipxact:bitOffset>14</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                    <ipxact:mask>'h1</ipxact:mask>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>1</ipxact:bitWidth>
                <ipxact:access>read-only</ipxact:access>
                <ipxact:testable>false</ipxact:testable>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>EnDbc</ipxact:name>
                <ipxact:description>Enable debugging of Debug capablity LSP in Host mode.  Use HostSelect to select DbC LSP debug information presented in the GDBGLSP register.</ipxact:description>
                <ipxact:bitOffset>15</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                    <ipxact:mask>'h1</ipxact:mask>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>1</ipxact:bitWidth>
                <ipxact:access>read-write</ipxact:access>
                <ipxact:testable>false</ipxact:testable>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>logic_analyzer_trace</ipxact:name>
                <ipxact:description>Logic Analyzer Trace Port MUX Select

Currently only bits[21:16] are used. For details on how the mux controls the debug traces, refer to "assign logic_analyzer_trace =" code section in the DWC_usb3.v file.

A value of 6'h3F drives "0"s on the logic_analyzer_trace signal. If you plan to OR (instead using a mux) this signal with other trace signals in your system to generate a common trace signal, you can use this feature.
</ipxact:description>
                <ipxact:bitOffset>16</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h3f</ipxact:value>
                    <ipxact:mask>'hc0</ipxact:mask>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>8</ipxact:bitWidth>
                <ipxact:access>read-write</ipxact:access>
                <ipxact:testable>false</ipxact:testable>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>reserved_31_24</ipxact:name>
                <ipxact:description>Reserved</ipxact:description>
                <ipxact:bitOffset>24</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                    <ipxact:mask>'hff</ipxact:mask>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>8</ipxact:bitWidth>
                <ipxact:access>read-only</ipxact:access>
                <ipxact:testable>false</ipxact:testable>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
            </ipxact:alternateRegister>
          </ipxact:alternateRegisters>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GDBGLSP</ipxact:name>
          <ipxact:description>Global Debug LSP Register

This register is for internal debug purposes only.

This register is for internal use only.

If DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT is enabled during core configuration, then the default values readout is X (Undefined).

Bit Bash test should not be done on this debug register.</ipxact:description>
          <ipxact:addressOffset>'h74</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>LSPDEBUG</ipxact:name>
            <ipxact:description>LSP Debug Information</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GDBGEPINFO0</ipxact:name>
          <ipxact:description>Global Debug Endpoint Information Register 0

This register is for internal use only.

If DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT is enabled during core configuration, then the default values readout is X (Undefined).

Bit Bash test should not be done on this debug register.</ipxact:description>
          <ipxact:addressOffset>'h78</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>EPDEBUG</ipxact:name>
            <ipxact:description>Endpoint Debug Information, bits[31:0]</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GDBGEPINFO1</ipxact:name>
          <ipxact:description>Global Debug Endpoint Information Register 1

This register is for internal use only.

If DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT is enabled during core configuration, then the default values readout is X (Undefined).

Bit Bash test should not be done on this debug register.</ipxact:description>
          <ipxact:addressOffset>'h7c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>EPDEBUG</ipxact:name>
            <ipxact:description>Endpoint Debug Information, bits[63:32]</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h800000</ipxact:value>
                <ipxact:mask>'hffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GPRTBIMAP_HSLO</ipxact:name>
          <ipxact:description>Global High-Speed Port to Bus Instance Mapping Register - Low

This is an alternate register for the GPRTBIMAP_HS register.

 - Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

Note: For reset values, refer to the corresponding values in the GPRTBIMAP_HS register.</ipxact:description>
          <ipxact:addressOffset>'h80</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>BINUM1</ipxact:name>
            <ipxact:description>BINUM1: HS USB Instance Number for Port 1. 

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM2</ipxact:name>
            <ipxact:description>BINUM2: HS USB Instance Number for Port 2.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM3</ipxact:name>
            <ipxact:description>BINUM3: HS USB Instance Number for Port 3.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM4</ipxact:name>
            <ipxact:description>BINUM4: HS USB Instance Number for Port 4.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM5</ipxact:name>
            <ipxact:description>BINUM5: HS USB Instance Number for Port 5.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM6</ipxact:name>
            <ipxact:description>BINUM6 USB Instance Number for Port 6. 
Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM7</ipxact:name>
            <ipxact:description>BINUM7: HS USB Instance Number for Port 7. 

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM8</ipxact:name>
            <ipxact:description>BINUM8: HS USB Instance Number for Port 8. 

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GPRTBIMAP_HSHI</ipxact:name>
          <ipxact:description>Global High-Speed Port to Bus Instance Mapping Register - High

This is an alternate register for the GPRTBIMAP_HS register.

 - Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

Note: For reset values, refer to the corresponding values in the GPRTBIMAP register.</ipxact:description>
          <ipxact:addressOffset>'h84</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>BINUM9</ipxact:name>
            <ipxact:description>BINUM9: HS USB Instance Number for Port 9.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM10</ipxact:name>
            <ipxact:description>BINUM10: HS USB Instance Number for Port 10.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM11</ipxact:name>
            <ipxact:description>BINUM11: HS USB Instance Number for 11.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM12</ipxact:name>
            <ipxact:description>BINUM12: HS USB Instance Number for Port 12.

SApplication-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM13</ipxact:name>
            <ipxact:description>BINUM13: HS USB Instance Number for Port 13.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM14</ipxact:name>
            <ipxact:description>BINUM14: HS USB Instance Number for Port 14.
Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM15</ipxact:name>
            <ipxact:description>BINUM15: HS USB Instance Number for Port 15.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_28</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GPRTBIMAP_FSLO</ipxact:name>
          <ipxact:description>Global Full-Speed Port to Bus Instance Mapping Register - Low

This is an alternate register for the GPRTBIMAP_FS register.

 - Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

Note: For reset values, refer to the corresponding values in the GPRTBIMAP_FS register.</ipxact:description>
          <ipxact:addressOffset>'h88</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>BINUM1</ipxact:name>
            <ipxact:description>BINUM1: FS USB Instance Number for Port 1.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM2</ipxact:name>
            <ipxact:description>BINUM2: FS USB Instance Number for Port 2.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM3</ipxact:name>
            <ipxact:description>BINUM3: FS USB Instance Number for Port 3.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM4</ipxact:name>
            <ipxact:description>BINUM4: FS USB Instance Number for Port 4.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM5</ipxact:name>
            <ipxact:description>BINUM5: FS USB Instance Number for Port 5.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM6</ipxact:name>
            <ipxact:description>BINUM6: FS USB Instance Number for Port 6.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM7</ipxact:name>
            <ipxact:description>BINUM7: FS USB Instance Number for Port 7. 

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM8</ipxact:name>
            <ipxact:description>BINUM8: FS USB Instance Number for Port 8.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GPRTBIMAP_FSHI</ipxact:name>
          <ipxact:description>Global Full-Speed Port to Bus Instance Mapping Register - High

This is an alternate register for the GPRTBIMAP_FS register.

 - Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

Note: For reset values, refer to the corresponding values in the GPRTBIMAP_FS register.</ipxact:description>
          <ipxact:addressOffset>'h8c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>BINUM9</ipxact:name>
            <ipxact:description>BINUM9: FS USB Instance Number for Port 9.

Application-programmable ID field.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM10</ipxact:name>
            <ipxact:description>BINUM10: FS USB Instance Number for Port 10. 

Application-programmable ID field</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM11</ipxact:name>
            <ipxact:description>BINUM11: FS USB Instance Number for Port 11.

Application-programmable ID field</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM12</ipxact:name>
            <ipxact:description>BINUM12: FS USB Instance Number for Port 12.

Application-programmable ID field</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM13</ipxact:name>
            <ipxact:description>BINUM13: FS USB Instance Number for Port 13.

Application-programmable ID field</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM14</ipxact:name>
            <ipxact:description>BINUM14: FS USB Instance Number for Port 14.

Application-programmable ID field</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BINUM15</ipxact:name>
            <ipxact:description>BINUM15: FS USB Instance Number for Port 15.

Application-programmable ID field</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_28</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>Reserved_94</ipxact:name>
          <ipxact:description>Future Reserved Register at offset 0x94</ipxact:description>
          <ipxact:addressOffset>'h94</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_31_0</ipxact:name>
            <ipxact:description>Future use Register field</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>Reserved_98</ipxact:name>
          <ipxact:description>Future Reserved Register at offset 0x98</ipxact:description>
          <ipxact:addressOffset>'h98</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_31_0</ipxact:name>
            <ipxact:description>Field for future use</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GUCTL2</ipxact:name>
          <ipxact:description>Global User Control Register 2:  

This register provides a few options for the software to control the core behavior in the Host and device mode. Most of the options are used to improve inter-operability with different hosts and devices.</ipxact:description>
          <ipxact:addressOffset>'h9c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>TxPingDuration</ipxact:name>
            <ipxact:description>Transmit Ping Maximum Duration 

This field is relevant to Device mode and controls the maximum duration for which the controller should instruct the PHY to transmit a Ping LFPS. The duration of the Ping LFPS is controlled by programming this value and is in terms of 8 ns granularity. Eg: A value of 13 indicates 104 ns.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'hd</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RxPingDuration</ipxact:name>
            <ipxact:description>Recieve Ping Maximum Duration 

This field is relevant to Host mode and controls the maximum duration of received LFPS to be treated as a Ping LFPS. The Max duration of the Ping LFPS is controlled by programming this value and is in terms of 8 ns granularity. Eg: A value of 32 indicates 256 ns.
</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h20</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DisableCFC</ipxact:name>
            <ipxact:description>Disable xHCI Errata Feature Contiguous Frame ID Capability

This field controls the xHCI Errata feature Contiguous FrameID capability. When set, the xHCI HCCPARAMS1 bit 11 will be set to 0 indicating that CFC is not supported. Disable this feature only if your application cannot tolerate Misssed Service Error events for Isoc transfers, and your system latencies are large to cause Missed Service errors even if the software is following the Isochronous Thresholding rules.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>EnableEpCacheEvict</ipxact:name>
            <ipxact:description>Enable Evicting Endpoint cache after Flow Control for bulk endpoints.

In 3.00a release, a performance enhancement was done to keep the non-stream capable bulk IN endpoint in cache after flow control. Setting this bit will disable this enhancement. This should be set only for debug purpose.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_13</ipxact:name>
            <ipxact:description>Reserved for future use</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>Rst_actbitlater</ipxact:name>
            <ipxact:description>Enable clearing of the command active bit for the ENDXFER command after the command execution is completed.

 This bit is valid in device mode only.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NOLOWPWRDUR</ipxact:name>
            <ipxact:description>No Low Power Duration (NOLOWPWRDUR)

This bit is applicable for device mode only and is ignored in host mode.

After starting a transfer on an ESS ISOC endpoint, the application must program these bits.

Each count represents the duration in terms of milli seconds. For example, a value of 3 represents 3 ms.
</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>EN_HP_PM_TIMER</ipxact:name>
            <ipxact:description>This register field is used to set new HP and PM timers.
 - To enable PM timer, set GUCTL2[19] bit as 1.
 - To enable HP timer, set GUCTL2[20] bit as 1. Default value is 4us, when new HP timer is enabled default value is 11us.
Use GUCTL2[25:21] to specify HP timer value in microseconds.</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_26</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GHWPARAMS8</ipxact:name>
          <ipxact:description>Global Hardware Parameters Register 8

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to Parameters chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting "What's This" or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &lt;workspace&gt;/src/DWC_usb3_params.v file; you must not change them.</ipxact:description>
          <ipxact:addressOffset>'h500</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>ghwparams8_32_0</ipxact:name>
            <ipxact:description>`DWC_USB3_DCACHE_DEPTH_INFO</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h7ca</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GTXFIFOPRIDEV</ipxact:name>
          <ipxact:description>Global Device TX FIFO DMA Priority Register

This register specifies the relative DMA priority level among the Device TXFIFOs (one per IN endpoint). Each register bit[n] controls the priority (1: high, 0: low) of each TXFIFO[n]. When multiple TXFIFOs compete for DMA service at a given time (that is, multiple TXQs contain TX DMA requests and their corresponding TXFIFOs have space available), the TX DMA arbiter grants access on a packet-basis in the following manner:
 - 1. High-priority TXFIFOs are granted access using round-robin arbitration
 - 2. Low-priority TXFIFOs are granted access using round-robin arbitration only after the high-priority TXFIFOs have no further processing to do (that is, either the TXQs are empty or the corresponding TXFIFOs are full).
For scatter-gather packets, the arbiter grants successive DMA requests to the same FIFO until the entire packet is completed.

When configuring periodic IN endpoints, software must set register bit[n]=1, where n is the TXFIFO assignment. This ensures that the DMA for isochronous or interrupt IN endpoints are prioritized over bulk or control IN endpoints.

This register is present only when the core is configured to operate in the device mode (includes DRD and OTG modes). The register size corresponds to the number of Device IN endpoints.

Note
 - Since the device mode uses only one RXFIFO, there is no Device RXFIFO DMA Priority Register.</ipxact:description>
          <ipxact:addressOffset>'h510</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>gtxfifopridev</ipxact:name>
            <ipxact:description>Device TxFIFO priority</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_n</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GTXFIFOPRIHST</ipxact:name>
          <ipxact:description>Global Host TX FIFO DMA Priority Register

This register specifies the relative DMA priority level among the Host TXFIFOs (one per USB bus instance) within the associated speed group (SS or HS/FSLS). Each register bit[n] controls the priority (1: high, 0: low) of TXFIFO[n] within a speed group. When multiple TXFIFOs compete for DMA service at a given time (i.e., multiple TXQs contain TX DMA requests and their corresponding TXFIFOs have space available), the TX DMA arbiter grants access on a packet-basis in the following manner:
 - 1. Among the FIFOs in the same speed group (SS or HS/FSLS): 
 a. High-priority TXFIFOs are granted access using round-robin arbitration 
 b. Low-priority TXFIFOs are granted access using round-robin arbitration only after the high-priority TXFIFOs have no further processing to do (that is, either the TXQs are empty or the corresponding TXFIFOs are full).
 - 2. The TX DMA arbiter prioritizes the SS speed group or HS/FSLS speed group according to the ratio programmed in the GDMAHLRATIO register.
For scatter-gather packets, the arbiter grants successive DMA requests to the same FIFO until the entire packet is completed.

This register is present only when the core is configured to operate in the host mode (includes DRD and OTG modes). The register size corresponds to the number of configured USB bus instances; for example, in the default configuration, there are 3 USB bus instances (1 SS, 1 HS, and 1 FSLS).</ipxact:description>
          <ipxact:addressOffset>'h518</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>gtxfifoprihst</ipxact:name>
            <ipxact:description>Host TxFIFO priority</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_16</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GRXFIFOPRIHST</ipxact:name>
          <ipxact:description>Global Host RX FIFO DMA Priority Register

This register specifies the relative DMA priority level among the Host RXFIFOs (one per USB bus instance) within the associated speed group (SS or HS/FSLS). Each register bit[n] controls the priority (1: high, 0: low) of RXFIFO[n] within a speed group. When multiple RXFIFOs compete for DMA service at a given time (i.e., multiple RXQs contain RX DMA requests and their corresponding RXFIFOs have data available), the RX DMA arbiter grants access on a packet-basis in the following manner:
 - 1. Among the FIFOs in the same speed group (SS or HS/FSLS): 
 a. High-priority RXFIFOs are granted access using round-robin arbitration 
 b. Low-priority RXFIFOs are granted access using round-robin arbitration only after high-priority RXFIFOs have no further processing to do (that is, either the RXQs are empty or the corresponding RXFIFOs do not have the required data).
 - 2. The RX DMA arbiter prioritizes the SS speed group or HS/FSLS speed group according to the ratio programmed in the GDMAHLRATIO register.
For scatter-gather packets, the arbiter grants successive DMA requests to the same FIFO until the entire packet is completed.

This register is present only when the core is configured to operate in the host mode (includes DRD and OTG modes). The register size corresponds to the number of configured USB bus instances; for example, in the default configuration, there are 3 USB bus instances (1 SS, 1 HS, and 1 FSLS).</ipxact:description>
          <ipxact:addressOffset>'h51c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>grxfifoprihst</ipxact:name>
            <ipxact:description>Host RxFIFO priority</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_16</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>29</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GFIFOPRIDBC</ipxact:name>
          <ipxact:description>Global Host Debug Capability DMA Priority Register

 This register specifies the relative priority of the RXFIFOs and TXFIFOs associated with the DbC mode. It overrides the priority assigned in the corresponding indexes of the Host RXFIFO and TXFIFO DMA priority registers, when the DbC mode is enabled.

Priority settings are specified in relation to the low-priority SS speed group:
 - 1. Normal priority indicates that the DbC FIFOs are considered identical to the Host SS low-priority FIFOs.
 - 2. Low priority indicates that the DbC FIFOs are considered to have lower priority than all Host SS FIFOs.
 - 3. High priority indicates that the DbC FIFOs are considered higher priority than the Host SS low-priority FIFOs but lower priority than the Host SS high-priority FIFOs.
This register is present only when the core is configured to operate in Host Debug Capability (DbC) mode.</ipxact:description>
          <ipxact:addressOffset>'h520</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>gfifopridbc</ipxact:name>
            <ipxact:description>Host DbC DMA priority</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3fffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>30</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GDMAHLRATIO</ipxact:name>
          <ipxact:description>Global Host FIFO DMA High-Low Priority Ratio Register

This register specifies the relative priority of the SS FIFOs with respect to the HS/FSLS FIFOs. The DMA arbiter prioritizes the HS/FSLS round-robin arbiter group every DMA High-Low Priority Ratio grants as indicated in the register separately for TX and RX.

To illustrate, consider that all FIFOs are requesting access simultaneously, and the ratio is 4. SS gets priority for 4 packets, HS/FSLS gets priority for 1 packet, SS gets priority for 4 packets, HS/FSLS gets priority for 1 packet, and so on.

If FIFOs from both speed groups are not requesting access simultaneously then,
 - if SS got grants 4 out of the last 4 times, then HS/FSLS get the priority on any future request.
 - if HS/FSLS got the grant last time, SS gets the priority on the next request.
 - if there is a valid request on either SS or HS/FSLS, a grant is always awarded; there is no idle.
This register is present if the core is configured to operate in host mode (includes DRD and OTG).</ipxact:description>
          <ipxact:addressOffset>'h524</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>hsttxfifo</ipxact:name>
            <ipxact:description>Host TXFIFO DMA High-Low Priority</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h8</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_7_5</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>hstrxfifo</ipxact:name>
            <ipxact:description>Host RXFIFO DMA High-Low Priority</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h8</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_13</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7ffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>19</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>GFLADJ</ipxact:name>
          <ipxact:description>Global Frame Length Adjustment Register

This register provides options for the software to control the core behavior with respect to SOF (Start of Frame) and ITP (Isochronous Timestamp Packet) timers and frame timer functionality. It provides an option to override the fladj_30mhz_reg sideband signal. In addition, it enables running SOF or ITP frame timer counters completely from the ref_clk. This facilitates hardware LPM in host mode with the SOF or ITP counters being run from the ref_clk signal.</ipxact:description>
          <ipxact:addressOffset>'h530</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>GFLADJ_30MHZ</ipxact:name>
            <ipxact:description>GFLADJ_30MHZ

This field indicates the value that is used for frame length adjustment instead of considering from the sideband input signal fladj_30mhz_reg. 

This enables post-silicon frame length adjustment in case the input signal fladj_30mhz_reg is connected to a wrong value or is not valid. 

For details on how to set this value, refer to section 5.2.4, "Frame Length Adjustment Register (FLADJ)," of the  xHCI Specification.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_6</ipxact:name>
            <ipxact:description>Reserved for future use</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>GFLADJ_30MHZ_SDBND_SEL</ipxact:name>
            <ipxact:description>GFLADJ_30MHZ_SDBND_SEL

This field selects whether to use the input signal fladj_30mhz_reg or the GFLADJ.GFLADJ_30MHZ to adjust the frame length for the SOF/ITP.
When this bit is set to,
 - 1, the controller uses the register field GFLADJ.GFLADJ_30MHZ value
 - 0, the controller uses the input signal fladj_30mhz_reg value</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>GFLADJ_REFCLK_FLADJ</ipxact:name>
            <ipxact:description>This field indicates the frame length adjustment to be applied when SOF/ITP counter is running on the ref_clk. 

This register value is used to adjust the ITP interval when GCTL[SOFITPSYNC] is set to '1'; SOF and ITP interval when GLADJ.GFLADJ_REFCLK_LPM_SEL is set to '1'.

This field must be programmed to a non-zero value only if GFLADJ_REFCLK_LPM_SEL is set to '1' or GCTL.SOFITPSYNC is set to '1'.

The value is derived as follows:

FLADJ_REF_CLK_FLADJ=((125000/ref_clk_period_integer)-(125000/ref_clk_period)) * ref_clk_period
where
 - the ref_clk_period_integer is the integer value of the ref_clk period got by truncating the decimal (fractional) value that is programmed in the GUCTL.REF_CLK_PERIOD field.
 - the ref_clk_period is the ref_clk period including the fractional value.
Examples:
If the ref_clk is 24 MHz then
 - GUCTL.REF_CLK_PERIOD = 41
 - GFLADJ.GLADJ_REFCLK_FLADJ = ((125000/41)-(125000/41.6666))*41.6666 = 2032 (ignoring the fractional value)
If the ref_clk is 48 MHz then
 - GUCTL.REF_CLK_PERIOD = 20
 - GFLADJ.GLADJ_REFCLK_FLADJ = ((125000/20)-(125000/20.8333))*20.8333 = 5208 (ignoring the fractional value)</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>14</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_22</ipxact:name>
            <ipxact:description>Reserved for future use</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>GFLADJ_REFCLK_LPM_SEL</ipxact:name>
            <ipxact:description>This bit enables the functionality of running SOF/ITP counters on the ref_clk. 

This bit must not be set to '1' if GCTL.SOFITPSYNC bit is set to '1'. 

Similarly, if GFLADJ_REFCLK_LPM_SEL set to '1', GCTL.SOFITPSYNC must not be set to '1'. 

When GFLADJ_REFCLK_LPM_SEL is set to '1' the overloading of the suspend control of the USB 2.0 first port PHY (UTMI/ULPI) with USB 3.0 port states is removed.

For example, for Synopsys PHY, the COMMONONN signal can be tied to '1'. 

Note that the ref_clk frequencies supported in this mode are 16/17/19.2/20/24/39.7/40 MHz. The utmi_clk[0] signal of the core must be connected to the FREECLK of the PHY.

Note: If you set this bit to '1', the GUSB2PHYCFG.U2_FREECLK_EXISTS bit must be set to '0'.
</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>GFLADJ_REFCLK_240MHZ_DECR</ipxact:name>
            <ipxact:description>This field indicates the decrement value that the controller applies for each ref_clk in order to derive a frame timer in terms of a 240-MHz clock. 

This field must be programmed to a non-zero value only if GFLADJ_REFCLK_LPM_SEL is set to '1'.

The value is derived as follows:

GFLADJ_REFCLK_240MHZ_DECR = 240/ref_clk_frequency

Examples:
If the ref_clk is 24 MHz then
 - GUCTL.REF_CLK_PERIOD = 41
 - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = 240/24 = 10
If the ref_clk is 48 MHz then
 - GUCTL.REF_CLK_PERIOD = 20
 - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = 240/48 = 5
If the ref_clk is 17 MHz then
 - GUCTL.REF_CLK_PERIOD = 58
 - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = 240/17 = 14</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>GFLADJ_REFCLK_240MHZDECR_PLS1</ipxact:name>
            <ipxact:description>GFLADJ_REFCLK_240MHZDECR_PLS1

This field indicates that the decrement value that the controller applies for each ref_clk  must be GFLADJ_REFCLK_240MHZ_DECR and GFLADJ_REFCLK_240MHZ_DECR +1 alternatively on each ref_clk.

Set this bit to a '1' only if GFLADJ_REFCLK_LPM_SEL is set to '1' and the fractional component of 240/ref_frequency is greater than or equal to 0.5. 

Examples:

If the ref_clk is 19.2 MHz then
 - GUCTL.REF_CLK_PERIOD = 52
 - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = (240/19.2) = 12.5
 - GFLADJ.GFLADJ_REFCLK_240MHZDECR_PLS1 = 1
If the ref_clk is 24 MHz then
 - GUCTL.REF_CLK_PERIOD = 41
 - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = (240/24) = 10
 - GFLADJ.GFLADJ_REFCLK_240MHZDECR_PLS1 = 0</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:registerFile>
          <ipxact:name>GUSB2PHYCFG_REGS</ipxact:name>
          <ipxact:description>Global USB2 PHYCFG register array</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h100</ipxact:addressOffset>
          <ipxact:range>0x4</ipxact:range>
          <ipxact:register>
            <ipxact:name>GUSB2PHYCFG</ipxact:name>
            <ipxact:description>Global USB2 PHY Configuration Register

The application must program this register before starting any transactions on either the SoC bus or the USB.

In Device-only configurations, only one register is needed.
In Host mode, per-port registers are implemented.</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>TOutCal</ipxact:name>
              <ipxact:description>HS/FS Timeout Calibration (TOutCal)

The number of PHY clocks, as indicated by the application in this field, is multiplied by a bit-time factor; this factor is added to the high-speed/full-speed interpacket timeout duration in the core to account for additional delays introduced by the PHY. This may be required, since the delay introduced by the PHY in generating the linestate condition may vary among PHYs.

The USB standard timeout value for high-speed operation is 736 to 816 (inclusive) bit times. The USB standard timeout value for full-speed operation is 16 to 18 (inclusive) bit times. The application must program this field based on the speed of connection. The number of bit times added per PHY clock are:

High-speed operation:
 - One 30-MHz PHY clock = 16 bit times
 - One 60-MHz PHY clock = 8 bit times
Full-speed operation:
 - One 30-MHz PHY clock = 0.4 bit times
 - One 60-MHz PHY clock = 0.2 bit times
 - One 48-MHz PHY clock = 0.25 bit times</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>3</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PHYIF</ipxact:name>
              <ipxact:description>PHY Interface (PHYIf)

If UTMI+ is selected, the application uses this bit to configure the core to support a UTMI+ PHY with an 8- or 16-bit interface.
 - 1'b0: 8 bits
 - 1'b1: 16 bits
ULPI Mode: 1'b0

Note:
 - All the enabled 2.0 ports must have the same clock frequency as Port0 clock frequency (utmi_clk[0]).
 - The UTMI 8-bit and 16-bit modes cannot be used together for different ports at the same time (that is, all the ports must be in 8-bit mode, or all of them must be in 16-bit mode, at a time).
 - If any of the USB 2.0 ports is selected as ULPI port for operation, then all the USB 2.0 ports must be operating at 60 MHz.</ipxact:description>
              <ipxact:bitOffset>3</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>ULPI_UTMI_Sel</ipxact:name>
              <ipxact:description>ULPI or UTMI+ Select (ULPI_UTMI_Sel)

The application uses this bit to select a UTMI+ or ULPI Interface.
 - 1'b0: UTMI+ Interface
 - 1'b1: ULPI Interface
This bit is writable only if UTMI+ and ULPI is specified for High-Speed PHY Interface(s) in coreConsultant configuration (DWC_USB3_HSPHY_INTERFACE = 3). 
Otherwise, this bit is read-only and the value depends on the interface selected through DWC_USB3_HSPHY_INTERFACE.
</ipxact:description>
              <ipxact:bitOffset>4</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>FSINTF</ipxact:name>
              <ipxact:description>Full-Speed Serial Interface Select (FSIntf)

The application uses this bit to select a unidirectional or bidirectional USB 1.1 full-speed serial transceiver interface.
 - 1'b0: 6-pin unidirectional full-speed serial interface. This bit is set to 0 with Read Only access.
 - 1'b1: 3-pin bidirectional full-speed serial interface. This bit is set to 0 with Read Only access.
Note: USB 1.1 full-speed serial interface is not supported. This bit always reads as 1'b0.</ipxact:description>
              <ipxact:bitOffset>5</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>SUSPENDUSB20</ipxact:name>
              <ipxact:description>Suspend USB2.0 HS/FS/LS PHY (SusPHY)

When set, USB2.0 PHY enters Suspend mode if Suspend conditions are valid.

For DRD/OTG configurations, it is recommended that this bit is set to 0 during coreConsultant configuration. If it is set to 1, then the application must  clear this bit after power-on reset. Application needs to set it to 1 after the core initialization completes.

For all other configurations, this bit can be set to 1 during core configuration.

Note: 
 - In host mode, on reset, this bit is set to 1. Software can override this bit after reset.
 - In device mode, before issuing any device endpoint command when operating in 2.0 speeds, disable this bit and enable it after the command completes. If you issue a command without disabling this bit when the device is in L2 state and if mac2_clk (utmi_clk/ulpi_clk) is gated off, the command will not get completed.</ipxact:description>
              <ipxact:bitOffset>6</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PHYSEL</ipxact:name>
              <ipxact:description>USB 2.0 High-Speed PHY or USB 1.1 Full-Speed Serial Transceiver Select 

The application uses this bit to select a high-speed PHY or a full-speed transceiver.
 - 1'b0: USB 2.0 high-speed UTMI+ or ULPI PHY. This bit is always 0, with Write Only access.
 - 1'b1: USB 1.1 full-speed serial transceiver. This bit is always 1, with Write Only access.
If both interface types are selected in coreConsultant (that is, parameters' values are not zero), the application uses this bit to select the active interface is active, with Read-Write bit access.

Note: USB 1.1 full-serial transceiver is not supported. This bit always reads as 1'b0.</ipxact:description>
              <ipxact:bitOffset>7</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>write-only</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>ENBLSLPM</ipxact:name>
              <ipxact:description>Enable utmi_sleep_n and utmi_l1_suspend_n (EnblSlpM)

The application uses this bit to control utmi_sleep_n and utmi_l1_suspend_n assertion to the PHY in the L1 state.
 - 1'b0: utmi_sleep_n and utmi_l1_suspend_n assertion from the core is not transferred to the external PHY.
 - 1'b1: utmi_sleep_n and utmi_l1_suspend_n assertion from the core is transferred to the external PHY.
Note: This bit must be set high for Port0 if Synopsys PHY is used.

Note: In Device mode - Before issuing any device endpoint command when operating in 2.0 speeds, disable this bit and enable it after the command completes. Without disabling this bit, if a command is issued when the device is in L1 state and if mac2_clk (utmi_clk/ulpi_clk) is gated off, the command will not get completed.</ipxact:description>
              <ipxact:bitOffset>8</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>XCVRDLY</ipxact:name>
              <ipxact:description>Transceiver Delay:  

Enables a delay between the assertion of the UTMI/ULPI Transceiver Select signal (for HS) and the assertion of the TxValid signal during a HS Chirp.

When this bit is set to 1, a delay (of approximately 2.5 us) is introduced from the time when the Transceiver Select is set to 2'b00 (HS) to the time the TxValid is driven to 0 for sending the chirp-K. This delay is required for some UTMI/ULPI PHYs.

Note: 
 - If you enable the hibernation feature when the device core comes out of power-off, you must re-initialize this bit with the appropriate value because the core does not save and restore this bit value during hibernation. 
 - This bit is valid only in device mode.</ipxact:description>
              <ipxact:bitOffset>9</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>USBTRDTIM</ipxact:name>
              <ipxact:description>USB 2.0 Turnaround Time (USBTrdTim)

Sets the turnaround time in PHY clocks.

Specifies the response time for a MAC request to the Packet FIFO Controller (PFC) to fetch data from the DFIFO (SPRAM).

The following are the required values for the minimum SoC bus frequency of 60 MHz. USB turnaround time is a critical certification criteria when using long cables and five hub levels.

The required values for this field:
 - 4'h5: When the MAC interface is 16-bit UTMI+.
 - 4'h9: When the MAC interface is 8-bit UTMI+/ULPI.
If SoC bus clock is less than 60 MHz, and USB turnaround time is not critical, this field can be set to a larger value.

Note: This field is valid only in device mode.</ipxact:description>
              <ipxact:bitOffset>10</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h9</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_14</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>14</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>ULPIAUTORES</ipxact:name>
              <ipxact:description>ULPI Auto Resume (ULPIAutoRes)

Sets the AutoResume bit in Interface Control register on the ULPI PHY.
 - 1'b0: PHY does not use the AutoResume feature.
 - 1'b1: PHY uses the AutoResume feature.
Valid only when RTL parameter DWC_USB3_HSPHY_INTERFACE = 2 or 3</ipxact:description>
              <ipxact:bitOffset>15</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_16</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>ULPIEXTVBUSDRV</ipxact:name>
              <ipxact:description>ULPI External VBUS Drive (ULPIExtVbusDrv)

Selects supply source to drive 5V on VBUS, in the ULPI PHY.
 - 1'b0: PHY drives VBUS with internal charge pump (default).
 - 1'b1: PHY drives VBUS with an external supply.
(Only when RTL parameter DWC_USB3_HSPHY_INTERFACE = 2 or 3)</ipxact:description>
              <ipxact:bitOffset>17</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>ULPIEXTVBUSINDIACTOR</ipxact:name>
              <ipxact:description>ULPI External VBUS Indicator (ULPIExtVbusIndicator)

Indicates the ULPI PHY VBUS over-current indicator.
 - 1'b0: PHY uses an internal VBUS valid comparator.
 - 1'b1: PHY uses an external VBUS valid comparator.
Valid only when RTL parameter DWC_USB3_HSPHY_INTERFACE = 2 or 3</ipxact:description>
              <ipxact:bitOffset>18</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>LSIPD</ipxact:name>
              <ipxact:description>LS Inter-Packet Time (LSIPD)

This field indicates the value of Tx-to-Tx packet gap for LS devices. The encoding is as follows: 
 - 0: 2 bit times
 - 1: 2.5 bit times
 - 2: 3 bit times
 - 3: 3.5 bit times
 - 4: 4 bit times
 - 5: 4.5 bit times
 - 6: 5 bit times
 - 7: 5.5 bit times
Note:
 - This field is applicable only in Host mode.
 - For normal operation (to work with most LS devices), set the default value of this field to 3'h2 (3 bit times).
 - The programmable LS device inter-packet gap and turnaround delays are provided to support some legacy LS devices that might require different delays than the default/fixed ones. For instance, the AOpen LS mouse requires 3 bit times of inter-packet gap to work correctly.
 - Include your PHY delays when programming the LSIPD/LSTRDTIM values. For example, if your PHY's TxEndDelay in LS mode is 30 UTMI/ULPI CLKs, then subtract this delay (~1 LS bit time) from the device's delay requirement.</ipxact:description>
              <ipxact:bitOffset>19</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h2</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>3</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>LSTRD</ipxact:name>
              <ipxact:description>LS Turnaround Time (LSTRDTIM)

This field indicates the value of the Rx-to-Tx packet gap for LS devices. The encoding is as follows:
 - 0: 2 bit times
 - 1: 2.5 bit times
 - 2: 3 bit times
 - 3: 3.5 bit times
 - 4: 4 bit times
 - 5: 4.5 bit times
 - 6: 5 bit times
 - 7: 5.5 bit times
Note: 
 - This field is applicable only in Host mode.
 - For normal operation (to work with most LS devices), set the default value of this field to 3'h0 (2 bit times).
 - The programmable LS device inter-packet gap and turnaround delays are provided to support some legacy LS devices that might require different delays than the default/fixed ones. For instance, the Open LS mouse requires 3 bit times of inter-packet gap to work correctly.
 - Include your PHY delays when programming the LSIPD/LSTRDTIM values. For example, if your PHY's TxEndDelay in LS mode is 30 UTMI/ULPI CLKs, then subtract this delay (~1 LS bit time) from the device's delay requirement.</ipxact:description>
              <ipxact:bitOffset>22</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>3</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_25</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>25</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>INV_SEL_HSIC</ipxact:name>
              <ipxact:description>INV_SEL_HSIC

The application driver uses this bit to control the HSIC enable/disable function. When set to '1', this bit overrides and functionally inverts the "if_select_hsic" input signal.
If {INV_SEL_HSIC, if_select_hsic} is: 
 - 00: HSIC Capability is disabled.
 - 01: HSIC Capability is enabled.
 - 10: HSIC Capability is enabled.
 - 11: HSIC Capability is disabled.
If the controller operates as non-HSIC-capable, it can only connect to non-HSIC-capable PHYs. If it operates as HSIC-capable, it can connect to HSIC-capable PHYs.

This bit is reserved if the DWC_USB3_ENABLE_HSIC parameter is set to '0'. When selecting the HSIC feature, set the host side to HSIC mode first, then set the device mode side. If the device side is set to HSIC mode first and if the host does not see a connection in HSIC mode, then you must de-select the device HSIC mode and select it again using the if_select_hsic setting or register bit GUSB2PHYCFGn[26] to ensure that the device can connect to the host.</ipxact:description>
              <ipxact:bitOffset>26</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>HSIC_CON_WIDTH_ADJ</ipxact:name>
              <ipxact:description>HSIC_CON_WIDTH_ADJ

This bit is used in the HSIC device mode of operation. By default, the connect duration for the HSIC device controller is thrice the strobe period. You can change this duration to 4, 5, or 6 times the strobe period by setting the value of this field to 1, 2, or 3. This value is added to the default connect duration.</ipxact:description>
              <ipxact:bitOffset>27</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>2</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>ULPI_LPM_WITH_OPMODE_CHK</ipxact:name>
              <ipxact:description>ULPI_LPM_WITH_OPMODE_CHK

Support the LPM over ULPI without NOPID token to the ULPI PHY. 

If this bit is set, the ULPI PHY is expected to qualify the EXT PID with OPMODE=2'b00 for LPM and not treat it as a NOPID. Check with your PHY vendor about your PHY behavior. This bit is valid only when the DWC_USB3_HSPHY_INTERFACE parameter is 2 or 3.
 - 1'b0: A NOPID is sent before sending an EXTPID for LPM; 
 - 1'b1: An EXTPID is sent without previously sending a NOPID; 
Note: This bit is valid only in host mode. This bit should be '0' for Synopsys PHY.
</ipxact:description>
              <ipxact:bitOffset>29</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>U2_FREECLK_EXISTS</ipxact:name>
              <ipxact:description>U2_FREECLK_EXISTS

Specifies whether your USB 2.0 PHY provides a free-running PHY clock, which is active when the clock control input is active.

If your USB 2.0 PHY provides a free-running PHY clock, it must be connected to the utmi_clk[0] input. The remaining utmi_clk[n] must be connected to the respective port clocks. The core uses the Port-0 clock for generating the internal mac2 clock.
 - 1'b0: USB 2.0 free clock does not exist
 - 1'b1: USB 2.0 free clock exists
Note: When the core is configured as device-only (DWC_USB3_MODE = 0), do not set this bit to 1.</ipxact:description>
              <ipxact:bitOffset>30</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h1</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PHYSOFTRST</ipxact:name>
              <ipxact:description>UTMI PHY Soft Reset (PHYSoftRst)

Causes the usb2phy_reset signal to be asserted to reset a UTMI PHY. Not applicable to ULPI because ULPI PHYs are reset via their FunctionControl.Reset register, and the core automatically writes to this register when the core is reset (vcc_reset_n, USBCMD.HCRST, DCTL.SoftReset, or GCTL.SoftReset)</ipxact:description>
              <ipxact:bitOffset>31</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
        <ipxact:registerFile>
          <ipxact:name>GUSB2I2CCTL_REGS</ipxact:name>
          <ipxact:description>Global USB2 IC2CCTL register array</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h140</ipxact:addressOffset>
          <ipxact:range>0x4</ipxact:range>
          <ipxact:register>
            <ipxact:name>GUSB2I2CCTL</ipxact:name>
            <ipxact:description>Reserved Register

The application uses this register to access OTG devices connected to the OTG core through the I2C interface. It is implemented only if Enable I2C Interface was selected during coreConsultant configuration (parameter DWC_USB3_I2C_INTERFACE = 1).

The I2C interface on the OTG core can read and write the register space in the attached I2C device. The following table describes the register fields.

In Device-only configurations, only one register is needed. In Host mode, per-port registers are implemented.</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:field>
              <ipxact:name>reserved_31_0</ipxact:name>
              <ipxact:description>Reserved for future use</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
        <ipxact:registerFile>
          <ipxact:name>GUSB2PHYACC_REGS</ipxact:name>
          <ipxact:description>Global USB2 PHY Acc register array</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h180</ipxact:addressOffset>
          <ipxact:range>0x4</ipxact:range>
          <ipxact:register>
            <ipxact:name>GUSB2PHYACC_ULPI</ipxact:name>
            <ipxact:description>Global USB 2.0 ULPI PHY Vendor Control Register

The application uses this register to access the PHY registers. This register is always implemented when the ULPI PHY Interface is enabled during coreConsultant configuration (parameter DWC_USB3_HSPHY_INTERFACE == 2 or DWC_USB3_HSPHY_INTERFACE == 3).

For an ULPI PHY, the core uses the ULPI interface for PHY register access.

The application sets the Vendor Control register for PHY register access and times the PHY register access. The application polls the VStatus Done bit in this register for the completion of the PHY register access.

In Device-only configurations, only one register is needed. In Host mode, per-port registers are implemented</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>REGDATA</ipxact:name>
              <ipxact:description>REGDATA</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>8</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>EXTREGADDR</ipxact:name>
              <ipxact:description>EXTREGADDR</ipxact:description>
              <ipxact:bitOffset>8</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>8</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>REGADDR</ipxact:name>
              <ipxact:description>Register Address 

The 6-bit PHY register address for immediate PHY Register Set access.

Set to 6'h2F for Extended PHY Register Set access.

Note: These bits are applicable for ULPI only.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>6</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>REGWR</ipxact:name>
              <ipxact:description>Register Write 

The application sets this bit for register writes and clears it for register reads.

Note: This bit is applicable for ULPI register read/write access only.</ipxact:description>
              <ipxact:bitOffset>22</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>VSTSBSY</ipxact:name>
              <ipxact:description>VSTSBSY</ipxact:description>
              <ipxact:bitOffset>23</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>VSTSDONE</ipxact:name>
              <ipxact:description>VSTSDONE</ipxact:description>
              <ipxact:bitOffset>24</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>NEWREGREQ</ipxact:name>
              <ipxact:description>New Register Request 

The application sets this bit for a new vendor control access.

Setting this bit to 1 asserts the utmi_vcontrolload_n (1'b0) on the UTMI interface.</ipxact:description>
              <ipxact:bitOffset>25</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DISUIPIDRVR</ipxact:name>
              <ipxact:description>DISUIPIDRVR</ipxact:description>
              <ipxact:bitOffset>26</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_31_27</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>27</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1f</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>5</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:alternateRegisters>
              <ipxact:alternateRegister>
                <ipxact:name>GUSB2PHYACC_UTMI</ipxact:name>
                <ipxact:description>Global USB 2.0 UTMI PHY Vendor Control Register

The application uses this register to access PHY registers. It is implemented only if the PHY Vendor Control Interface or an ULPI PHY Interface was selected during coreConsultant configuration (parameter DWC_USB3_VENDOR_CTL_INTERFACE == 1 or DWC_USB3_HSPHY_INTERFACE == 2 or DWC_USB3_HSPHY_INTERFACE == 3). 

In UTMI mode of operation, the functionality of this register can be used only if UTMI Vendor Control Interface is enabled.

For an UTMI+ PHY, the controller uses the UTMI+ Vendor Control interface for PHY register access. There is no read/write differentiation for UTMI+. It is just a vendor control access.
The application sets the Vendor Control register for PHY register access and times the PHY register access. The application polls the VStatus Done bit in this register for the completion of the PHY register access.

In Device-only configurations, only one register is needed. In Host mode, per-port registers are implemented</ipxact:description>
                <ipxact:alternateGroups>
                  <ipxact:alternateGroup>GUSB2PHYACC_UTMI</ipxact:alternateGroup>
                </ipxact:alternateGroups>
                <ipxact:access>read-write</ipxact:access>
                <ipxact:field>
                  <ipxact:name>REGDATA</ipxact:name>
                  <ipxact:description>REGDATA</ipxact:description>
                  <ipxact:bitOffset>0</ipxact:bitOffset>
                  <ipxact:resets>
                    <ipxact:reset>
                      <ipxact:value>'h0</ipxact:value>
                    </ipxact:reset>
                  </ipxact:resets>
                  <ipxact:bitWidth>8</ipxact:bitWidth>
                  <ipxact:access>read-only</ipxact:access>
                  <ipxact:writeValueConstraint>
                    <ipxact:writeAsRead>true</ipxact:writeAsRead>
                  </ipxact:writeValueConstraint>
                  <ipxact:testable>false</ipxact:testable>
                  <ipxact:reserved>0</ipxact:reserved>
                </ipxact:field>
                <ipxact:field>
                  <ipxact:name>VCTRL</ipxact:name>
                  <ipxact:description>VCTRL

This field contains the 4-bit register address, and the vendor-defined 4-bit parallel output bus. Bits [11:8] of this field are also placed on bits [3:0] of the utmi_vcontrol output signal.
</ipxact:description>
                  <ipxact:bitOffset>8</ipxact:bitOffset>
                  <ipxact:resets>
                    <ipxact:reset>
                      <ipxact:value>'h0</ipxact:value>
                    </ipxact:reset>
                  </ipxact:resets>
                  <ipxact:bitWidth>8</ipxact:bitWidth>
                  <ipxact:access>read-only</ipxact:access>
                  <ipxact:writeValueConstraint>
                    <ipxact:writeAsRead>true</ipxact:writeAsRead>
                  </ipxact:writeValueConstraint>
                  <ipxact:testable>false</ipxact:testable>
                  <ipxact:reserved>0</ipxact:reserved>
                </ipxact:field>
                <ipxact:field>
                  <ipxact:name>REGADDR</ipxact:name>
                  <ipxact:description>REGADDR</ipxact:description>
                  <ipxact:bitOffset>16</ipxact:bitOffset>
                  <ipxact:resets>
                    <ipxact:reset>
                      <ipxact:value>'h0</ipxact:value>
                    </ipxact:reset>
                  </ipxact:resets>
                  <ipxact:bitWidth>6</ipxact:bitWidth>
                  <ipxact:access>read-only</ipxact:access>
                  <ipxact:writeValueConstraint>
                    <ipxact:writeAsRead>true</ipxact:writeAsRead>
                  </ipxact:writeValueConstraint>
                  <ipxact:testable>false</ipxact:testable>
                  <ipxact:reserved>0</ipxact:reserved>
                </ipxact:field>
                <ipxact:field>
                  <ipxact:name>REGWR</ipxact:name>
                  <ipxact:description>REGWR</ipxact:description>
                  <ipxact:bitOffset>22</ipxact:bitOffset>
                  <ipxact:resets>
                    <ipxact:reset>
                      <ipxact:value>'h0</ipxact:value>
                    </ipxact:reset>
                  </ipxact:resets>
                  <ipxact:bitWidth>1</ipxact:bitWidth>
                  <ipxact:access>read-only</ipxact:access>
                  <ipxact:writeValueConstraint>
                    <ipxact:writeAsRead>true</ipxact:writeAsRead>
                  </ipxact:writeValueConstraint>
                  <ipxact:testable>false</ipxact:testable>
                  <ipxact:reserved>0</ipxact:reserved>
                </ipxact:field>
                <ipxact:field>
                  <ipxact:name>VSTSBSY</ipxact:name>
                  <ipxact:description>VSTSBSY</ipxact:description>
                  <ipxact:bitOffset>23</ipxact:bitOffset>
                  <ipxact:resets>
                    <ipxact:reset>
                      <ipxact:value>'h0</ipxact:value>
                    </ipxact:reset>
                  </ipxact:resets>
                  <ipxact:bitWidth>1</ipxact:bitWidth>
                  <ipxact:access>read-only</ipxact:access>
                  <ipxact:writeValueConstraint>
                    <ipxact:writeAsRead>true</ipxact:writeAsRead>
                  </ipxact:writeValueConstraint>
                  <ipxact:testable>false</ipxact:testable>
                  <ipxact:reserved>0</ipxact:reserved>
                </ipxact:field>
                <ipxact:field>
                  <ipxact:name>VSTSDONE</ipxact:name>
                  <ipxact:description>VSTSDONE:</ipxact:description>
                  <ipxact:bitOffset>24</ipxact:bitOffset>
                  <ipxact:resets>
                    <ipxact:reset>
                      <ipxact:value>'h0</ipxact:value>
                    </ipxact:reset>
                  </ipxact:resets>
                  <ipxact:bitWidth>1</ipxact:bitWidth>
                  <ipxact:volatile>true</ipxact:volatile>
                  <ipxact:access>read-only</ipxact:access>
                  <ipxact:testable>false</ipxact:testable>
                  <ipxact:reserved>0</ipxact:reserved>
                </ipxact:field>
                <ipxact:field>
                  <ipxact:name>NEWREGREQ</ipxact:name>
                  <ipxact:description>NEWREGREQ</ipxact:description>
                  <ipxact:bitOffset>25</ipxact:bitOffset>
                  <ipxact:resets>
                    <ipxact:reset>
                      <ipxact:value>'h0</ipxact:value>
                    </ipxact:reset>
                  </ipxact:resets>
                  <ipxact:bitWidth>1</ipxact:bitWidth>
                  <ipxact:access>read-only</ipxact:access>
                  <ipxact:writeValueConstraint>
                    <ipxact:writeAsRead>true</ipxact:writeAsRead>
                  </ipxact:writeValueConstraint>
                  <ipxact:testable>false</ipxact:testable>
                  <ipxact:reserved>0</ipxact:reserved>
                </ipxact:field>
                <ipxact:field>
                  <ipxact:name>DISUIPIDRVR</ipxact:name>
                  <ipxact:description>DISUIPIDRVR</ipxact:description>
                  <ipxact:bitOffset>26</ipxact:bitOffset>
                  <ipxact:resets>
                    <ipxact:reset>
                      <ipxact:value>'h0</ipxact:value>
                    </ipxact:reset>
                  </ipxact:resets>
                  <ipxact:bitWidth>1</ipxact:bitWidth>
                  <ipxact:access>read-only</ipxact:access>
                  <ipxact:writeValueConstraint>
                    <ipxact:writeAsRead>true</ipxact:writeAsRead>
                  </ipxact:writeValueConstraint>
                  <ipxact:testable>false</ipxact:testable>
                  <ipxact:reserved>0</ipxact:reserved>
                </ipxact:field>
                <ipxact:field>
                  <ipxact:name>reserved_31_27</ipxact:name>
                  <ipxact:description>Reserved</ipxact:description>
                  <ipxact:bitOffset>27</ipxact:bitOffset>
                  <ipxact:resets>
                    <ipxact:reset>
                      <ipxact:value>'h0</ipxact:value>
                      <ipxact:mask>'h1f</ipxact:mask>
                    </ipxact:reset>
                  </ipxact:resets>
                  <ipxact:bitWidth>5</ipxact:bitWidth>
                  <ipxact:access>read-only</ipxact:access>
                  <ipxact:writeValueConstraint>
                    <ipxact:writeAsRead>true</ipxact:writeAsRead>
                  </ipxact:writeValueConstraint>
                  <ipxact:testable>false</ipxact:testable>
                  <ipxact:reserved>0</ipxact:reserved>
                </ipxact:field>
              </ipxact:alternateRegister>
            </ipxact:alternateRegisters>
          </ipxact:register>
        </ipxact:registerFile>
        <ipxact:registerFile>
          <ipxact:name>GUSB3PIPECTL_REGS</ipxact:name>
          <ipxact:description>Global USB3 PIPECTL register array</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h1c0</ipxact:addressOffset>
          <ipxact:range>0x4</ipxact:range>
          <ipxact:register>
            <ipxact:name>GUSB3PIPECTL</ipxact:name>
            <ipxact:description>Global USB 3.0 PIPE Control Register

The application uses this register to configure the USB3 PHY and PIPE interface.

Device-only configuration requires only one register. In Host mode, registers are implemented for each port.

For more details on GUSB3PIPECTL(#n) bits, refer to section "GUSB3PIPECTL(#n) Register" in the DWC SuperSpeed USB 3.0 Controller User Guide.

Note:
 - GUSB3PIPECTLn registers are not applicable for USB 2.0-only mode.</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>ELASTIC_BUFFER_MODE</ipxact:name>
              <ipxact:description>Elastic Buffer Mode (ElasticBufferMode)

(Refer to Table 5-3 of the PIPE3 specification.)</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>SS_TX_DE_EMPHASIS</ipxact:name>
              <ipxact:description>Tx Deemphasis (TxDeemphasis)

The value driven to the PHY is controlled by the LTSSM during USB3 Compliance mode.

(Refer to Table 5-3 of the PIPE3 specification.)</ipxact:description>
              <ipxact:bitOffset>1</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h1</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>2</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>TX_MARGIN</ipxact:name>
              <ipxact:description>Tx Margin[2:0] (TxMargin)

Refer to Table 5-3 of the PIPE3 Specification.</ipxact:description>
              <ipxact:bitOffset>3</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>3</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>TX_SWING</ipxact:name>
              <ipxact:description>Tx Swing (TxSwing)

Refer to the PIPE3 specification.</ipxact:description>
              <ipxact:bitOffset>6</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>SSICEn</ipxact:name>
              <ipxact:description>USB3 SSIC Enable (SSICEn)

This bit is valid only when coreConsultant parameter DWC_USB3_EN_SSIC=1 else this bit needs to be set to 1'b0.
 - 1'b0: Pipe interface is active. The RMMI interface on the corresponding port is reset by the core.
 - 1'b1: RMMI interface on the corresponding port connected to M-PHY is active, and pipe interface is inactive. This bit needs to be set before accessing the corresponding GUSB3RMMICTLn register.
Note: When the DWC_USB3_NUM_SSIC_PORTS parameter is set to zero, the access type of this register bit is R_W, but the register bit is not functional.</ipxact:description>
              <ipxact:bitOffset>7</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>RX_DETECT_to_Polling_LFPS_Control</ipxact:name>
              <ipxact:description>RX_DETECT to Polling.LFPS Control
 - 1'b0 (Default): Enables a 400us delay to start Polling LFPS after RX_DETECT. This allows VCM offset to settle to a proper level.
 - 1'b1: Disables the 400us delay to start Polling LFPS after RX_DETECT.
During controller certification with third party PHY it is observed that the PHY is not able to meet the Tx AC common mode voltage active (VTX-CM-ACPP_ACTIVE &lt;100mv) if the link starts polling within 80us from the time rx.detect is performed.

To meet this VTX-CM-ACPP_ACTIVE specification, the polling must be delayed further. If the PHY does not have issue then they can set this bit to 1 which allows polling to start within 80us.</ipxact:description>
              <ipxact:bitOffset>8</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>LFPSFILTER</ipxact:name>
              <ipxact:description>LFPS Filter (LFPSFilt)

When set, filter LFPS reception with pipe3_RxValid in PHY power state P0, that is, ignore LFPS reception from the PHY unless both pipe3_Rxelecidle and pipe3_RxValid are deasserted.</ipxact:description>
              <ipxact:bitOffset>9</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>P3ExSigP2</ipxact:name>
              <ipxact:description>P3 Exit Signal in P2 (P3ExSigP2)

When this bit is set, the core always changes the PHY power state to P2, before attempting a U3 exit handshake. This bit is used only for some non-Synopsys PHYs that cannot do LFPS in P3.

Note: This bit is used by third-party SS PHY. It must be set to '0' for Synopsys PHY.</ipxact:description>
              <ipxact:bitOffset>10</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>P3P2TranOK</ipxact:name>
              <ipxact:description>P3 P2 Transitions OK (P3P2TranOK)

When set, the core transitions directly from Phy power state P2 to P3 or from state P3 to P2.
When not set, P0 is always entered as an intermediate state during transitions between P2 and P3, as defined in the PIPE3 Specification.

According to the PIPE3 Specification, any direct transition between P3 and P2 is illegal.

Note: This bit is used by third-party SS PHY. It must be set to '0' for Synopsys PHY.</ipxact:description>
              <ipxact:bitOffset>11</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>LFPSP0Algn</ipxact:name>
              <ipxact:description>LFPS P0 Align:
When set, 
 - The core deasserts LFPS transmission on the clock edge that it requests Phy power state 0 when exiting U1, U2, or U3 low power states. Otherwise, LFPS transmission is asserted one clock earlier.
 - The core requests symbol transmission two pipe3_rx_pclks periods after the PHY asserts PhyStatus as a result of the PHY switching from P1 or P2 state to P0 state.
Currently, this bit is only used in USB 3.0 HUB with Synopsys PHY. For other USB 3.0 Host, Device, and DRD cores, this bit is not required.
</ipxact:description>
              <ipxact:bitOffset>12</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>SkipRxDet</ipxact:name>
              <ipxact:description>Skip Rx Detect:

When set, the core skips Rx Detection if pipe3_RxElecIdle is low. 

Skip is defined as waiting for the appropriate timeout, then repeating the operation.
</ipxact:description>
              <ipxact:bitOffset>13</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>AbortRxDetInU2</ipxact:name>
              <ipxact:description>Abort Rx Detect in U2 (AbortRxDetInU2)

When set, and the link state is U2, then the core will abort receiver detection if it receives U2 exit LFPS from the remote link partner. This bit is for the downstream port only.

Note: This bit is used by third-party SS PHY. It must be set to '0' for Synopsys PHY. 
</ipxact:description>
              <ipxact:bitOffset>14</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DATWIDTH</ipxact:name>
              <ipxact:description>PIPE Data Width (DatWidth)
 - 2'b00: 32 bits
 - 2'b01: 16 bits
 - 2'b10: 8 bits
One clock after reset, these bits receive the value seen on the pipe3_DataBusWidth. The simulation testbench uses the coreConsultant parameter to configure the VIP. These bits in the coreConsultant parameter must match your PHY data width and the pipe3_DataBusWidth port.</ipxact:description>
              <ipxact:bitOffset>15</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>2</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>SUSPENDENABLE</ipxact:name>
              <ipxact:description>Suspend USB3.0 SS PHY (Suspend_en)

When set, and if Suspend conditions are valid, the USB 3.0 PHY enters Suspend mode.

For DRD/OTG configurations, it is recommended that this bit is set to '0' during coreConsultant configuration. If it is set to '1', then the application must clear this bit after power-on reset. Application needs to set it to '1' after the core initialization is completed.

For all other configurations, this bit can be set to '1' during core configuration.</ipxact:description>
              <ipxact:bitOffset>17</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DELAYP1TRANS</ipxact:name>
              <ipxact:description>Delay PHY power change from P0 to P1/P2/P3 when link state changing from U0 to U1/U2/U3 respectively.
 - 1'b1: When entering U1/U2/U3, delay the transition to P1/P2/P3 until the pipe3 signals, Pipe3_RxElecIdle is 1 and pipe3_RxValid is 0
 - 1'b0: When entering U1/U2/U3, transition to P1/P2/P3 without checking for Pipe3_RxElecIdle and pipe3_RxValid.
Note:
 - If you are using Synopsys PHY, contact Synopsys Customer Support for recommendation on setting this bit because it is node dependent.
 - If you are using a third-party SS PHY, check with your PHY vendor for recommendation on setting this bit.</ipxact:description>
              <ipxact:bitOffset>18</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h1</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DelayP1P2P3</ipxact:name>
              <ipxact:description>Delay P1P2P3

Delay P0 to P1/P2/P3 request when entering U1/U2/U3 until (DWC_USB3_GUSB3PIPECTL_INIT[21:19]*8) 8B10B error occurs, or Pipe3_RxValid drops to 0.

DWC_USB3_GUSB3PIPECTL_INIT[18] must be 1 to enable this functionality.</ipxact:description>
              <ipxact:bitOffset>19</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h1</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>3</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DisRxDetU3RxDet</ipxact:name>
              <ipxact:description>Disable Receiver Detection in U3/Rx.Det

When set, the core does not handle receiver detection in either U3 or Rx.Detect states. DWC_USB3_GUSB3PIPECTL_INIT[23] must be used to start receiver detection manually. This bit can only be used for the downstream port. This bit must be set to "0" for Upstream ports. This feature must not be enabled for normal operation. If you have to use this feature, contact Synopsys.</ipxact:description>
              <ipxact:bitOffset>22</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>StartRxDetU3RxDet</ipxact:name>
              <ipxact:description>Start Receiver Detection in U3/Rx.Detect (StartRxdetU3RxDet)

If DWC_USB3_GUSB3PIPECTL_INIT[22] is set, and the link is in either U3 or Rx.Detect state, the core starts receiver detection on the rising edge of this bit. This can only be used for Downstream ports. This bit must be set to '0' for Upstream ports. This feature must not be enabled for normal operation. If have to use this feature, contact Synopsys.</ipxact:description>
              <ipxact:bitOffset>23</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>write-only</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>request_p1p2p3</ipxact:name>
              <ipxact:description>Always Request P1/P2/P3 for U1/U2/U3 (request_p1p2p3)

When set, the core always requests PHY power change from P0 to P1/P2/P3 during U0 to U1/U2/U3 transition.

If this bit is 0, and immediate Ux exit (remotely initiated, or locally initiated) happens, the core does not request P1/P2/P3 power state change.

Note: This bit must be set to '1' for Synopsys PHY. For third-party SS PHY, check with your PHY vendor.</ipxact:description>
              <ipxact:bitOffset>24</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h1</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>u1u2exitfail_to_recov</ipxact:name>
              <ipxact:description>U1U2exitfail to Recovery (u1u2exitfail_to_recov)

When set, and U1/U2 LFPS handshake fails, the LTSSM transitions from U1/U2 to Recovery instead of SS Inactive. If Recovery fails, then the LTSSM can enter SS.Inactive. This is an enhancement only. It prevents interoperability issue if the remote link does not do proper handshake.</ipxact:description>
              <ipxact:bitOffset>25</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>ping_enhancement_en</ipxact:name>
              <ipxact:description>Ping Enhancement Enable (ping_enhancement_en)

When set, the Downstream port U1 ping receive timeout becomes 500 ms instead of 300 ms. Minimum Ping.LFPS receive duration is 8 ns (one mac3_clk). This field is valid for the downstream port only. 

Note: This bit is used by third-party SS PHY. It must be set to '0' for Synopsys PHY. 
</ipxact:description>
              <ipxact:bitOffset>26</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>Ux_exit_in_Px</ipxact:name>
              <ipxact:description>Ux Exit in Px (Ux_exit_in_Px)
 - 0: The core does U1/U2/U3 exit in PHY power state P0 (default behavior).
 - 1: The core does U1/U2/U3 exit in PHY power state P1/P2/P3 respectively.  
Note: This bit is used by third-party SS PHY. It must be set to '0' for Synopsys PHY.</ipxact:description>
              <ipxact:bitOffset>27</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DisRxDetP3</ipxact:name>
              <ipxact:description>Disabled receiver detection in P3 (DisRxDetP3)
 - 0: If PHY is in P3 and Core needs to perform receiver detection, The core performs receiver detection in P3. (Default)
 - 1: If PHY is in P3 and Core needs to perform receiver detection, The core changes the PHY power state to P2 and then performs receiver detection. After receiver detection, the cores changes PHY power state to P3.</ipxact:description>
              <ipxact:bitOffset>28</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>U2P3ok</ipxact:name>
              <ipxact:description>P3 OK for U2 (u2P3ok) 
 - 0: During link state U2/SS.Inactive, put PHY in P2 (Default)
 - 1: During link state U2/SS.Inactive, put PHY in P3.
Note: For a port, if GUSB3PIPECTL[7]=1 and  GUSB3PIPECTL[29]=1, set GUSB3PIPECTL[11] to 1.</ipxact:description>
              <ipxact:bitOffset>29</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>HstPrtCmpl</ipxact:name>
              <ipxact:description>HstPrtCmpl

This feature tests the PIPE PHY compliance patterns without having to have a test fixture on the USB 3.0 cable. 

This bit enables placing the SS port link into a compliance state. By default, this bit must be set to 1'b0.

In compliance lab testing, the SS port link enters compliance after failing the first polling sequence after power on. Set this bit to 0, when you run compliance tests.

The sequence for using this functionality is as follows:
 - 1. Disconnect any plugged in devices.
 - 2. Perform USBCMD.HCRST or power-on-chip reset.
 - 3. Set PORTSC.PLS=0xA.
 - 4. Set PORTSC.PP=0.
 - 5. Set GUSB3PIPECTL. HstPrtCmpl=1. This places the link into compliance state.
To advance the compliance pattern, follow this sequence (toggle the set GUSB3PIPECTL. HstPrtCmpl):
 - 1. Set GUSB3PIPECTL.HstPrtCmpl=0.
 - 2. Set GUSB3PIPECTL.HstPrtCmpl=1. This advances the link to the next compliance pattern.
To exit from the compliance state perform USBCMD.HCRST or power-on-chip reset.
</ipxact:description>
              <ipxact:bitOffset>30</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PHYSoftRst</ipxact:name>
              <ipxact:description>USB3 PHY Soft Reset 

After setting this bit to '1', the software needs to clear this bit. For more information, refer to Figure "Software Resets and PHY Clock Sequencing and Requirements" in the DesignWare Cores SuperSpeed USB 3.0 Controller Databook.  
</ipxact:description>
              <ipxact:bitOffset>31</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
        <ipxact:registerFile>
          <ipxact:name>GTXFIFOSIZ_REGS</ipxact:name>
          <ipxact:description>Global Tx FIFO Size Lower register array</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h200</ipxact:addressOffset>
          <ipxact:range>0x40</ipxact:range>
          <ipxact:register>
            <ipxact:name>GTXFIFOSIZ0</ipxact:name>
            <ipxact:description>Global Transmit FIFO Size Register

This register specifies the RAM start address and depth (both in MDWIDTH-bit words) for each implemented TxFIFO. The number of TxFIFOs depends on the configuration parameters including the number of Device IN Endpoints, number of Host Bus Instances, and presence of Debug Capability.

The register default values for each mode are assigned in coreConsultant based on the maximum packet size, number of packets to be buffered, speed of host bus instance, bus latency, and mode of operation (host, device, or, DBC). Upon reset and mode transitions, hardware automatically programs these registers to the default values. Consequently, there is typically no need for the software to modify the pre-defined default values.

For the debug capability mode, the currently mapped EP0 IN and EP1 IN TxFIFO numbers can be read from the GFIFOPRIDBC register. 
For OTG mode of operation, when the core is transitioning to host mode, program GTXFIFOSIZ register to the correct value only after OCTL.PeriMode is programmed to 1'b0.

For more details on the usage of the GTXFIFOSIZn and GRXFIFOSIZn registers for different modes of operation, refer to "Architecture Details" chapter in the Databook.</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>TXFDEP_N</ipxact:name>
              <ipxact:description>TxFIFO Depth 

This field contains the depth of TxFIFOn in MDWIDTH-bit words.
 - Minimum value: 32
 - Maximum value: 32,768
For more information, see "Integrating the Core" chapter in the DWC SuperSpeed USB 3.0 Controller User Guide.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h42</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>TXFSTADDR_N</ipxact:name>
              <ipxact:description>Transmit FIFOn RAM Start Address 

This field contains the memory start address for TxFIFOn in MDWIDTH-bit words.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>GTXFIFOSIZ1</ipxact:name>
            <ipxact:description>Register GTXFIFOSIZ 1</ipxact:description>
            <ipxact:addressOffset>'h4</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>TXFDEP_N</ipxact:name>
              <ipxact:description>TXFDEP_N</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h184</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>TXFSTADDR_N</ipxact:name>
              <ipxact:description>Transmit FIFOn RAM Start Address 

This field contains the memory start address for TxFIFOn in MDWIDTH-bit words.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h42</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>GTXFIFOSIZ2</ipxact:name>
            <ipxact:description>Transmit FIFOn RAM Start Address 

This field contains the memory start address for TxFIFOn in MDWIDTH-bit words.</ipxact:description>
            <ipxact:addressOffset>'h8</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>TXFDEP_N</ipxact:name>
              <ipxact:description>TxFIFO Depth 

This field contains the depth of TxFIFOn in MDWIDTH-bit words.
 - Minimum value: 32
 - Maximum value: 32,768
For more information, see "Integrating the Core" chapter in the DWC SuperSpeed USB 3.0 Controller User Guide.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h184</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>TXFSTADDR_N</ipxact:name>
              <ipxact:description>Transmit FIFOn RAM Start Address 

This field contains the memory start address for TxFIFOn in MDWIDTH-bit words.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h1c6</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>GTXFIFOSIZ3</ipxact:name>
            <ipxact:description>Register GTXFIFOSIZ 3</ipxact:description>
            <ipxact:addressOffset>'hc</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>TXFDEP_N</ipxact:name>
              <ipxact:description>TXFDEP_N:  TxFIFO Depth (TxFDep_n)

This field contains the depth of TxFIFOn in MDWIDTH-bit words.
 - Minimum value: 32
 - Maximum value: 32,768
For more information, see "Integrating the Core" chapter in the DWC SuperSpeed USB 3.0 Controller User Guide.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h103</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>TXFSTADDR_N</ipxact:name>
              <ipxact:description>Transmit FIFOn RAM Start Address

This field contains the memory start address for TxFIFOn in MDWIDTH-bit words.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h34a</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
        <ipxact:registerFile>
          <ipxact:name>GRXFIFOSIZ_REGS</ipxact:name>
          <ipxact:description>Global Rx FIFO Size Lower register array</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h280</ipxact:addressOffset>
          <ipxact:range>0x40</ipxact:range>
          <ipxact:register>
            <ipxact:name>GRXFIFOSIZ0</ipxact:name>
            <ipxact:description>Global Receive FIFO Size Register

This register specifies the RAM start address and depth (both in MDWIDTH-bit words) for each implemented RxFIFO. The number of RxFIFOs depends on the configuration parameters including the number of Host Bus Instances and presence of Debug Capability; device mode requires only one RxFIFO.

The register default values for each mode are assigned in coreConsultant based on the maximum packet size, number of packets to be buffered, speed of the host bus instance, bus latency, and mode of operation (host, device, or DBC). Upon reset and mode transitions, hardware automatically programs these registers to the default values. Consequently, there is typically no need for the software to modify the pre-defined default values.

For the debug capability mode, the currently mapped RxFIFO number can be read from the GFIFOPRIDBC register.

For more details on the usage of the GTXFIFOSIZn and GRXFIFOSIZn registers for different modes of operation, refer to "Architecture Details" chapter in the Databook.</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>RXFDEP_N</ipxact:name>
              <ipxact:description>RxFIFO Depth (RxFDep_n)

This field contains the depth of RxFIFOn in MDWIDTH-bit words.
 - Minimum value: 32
 - Maximum value: 16,384</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h185</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>RXFSTADDR_N</ipxact:name>
              <ipxact:description>RxFIFOn RAM Start Address (RxFStAddr_n)

This field contains the memory start address for RxFIFOn in MDWIDTH-bit words.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>GRXFIFOSIZ1</ipxact:name>
            <ipxact:description>Register</ipxact:description>
            <ipxact:addressOffset>'h4</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>RXFDEP_N</ipxact:name>
              <ipxact:description>RxFIFO Depth 

This field contains the depth of RxFIFOn in MDWIDTH-bit words.
 - Minimum value: 32 
 - Maximum value: 16,384</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>RXFSTADDR_N</ipxact:name>
              <ipxact:description>RXFSTADDR_N</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h185</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>GRXFIFOSIZ2</ipxact:name>
            <ipxact:description>Register</ipxact:description>
            <ipxact:addressOffset>'h8</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>RXFDEP_N</ipxact:name>
              <ipxact:description>RxFIFO Depth 

This field contains the depth of RxFIFOn in MDWIDTH-bit words.
 - Minimum value: 32
 - Maximum value: 16,384</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>RXFSTADDR_N</ipxact:name>
              <ipxact:description>RAM Start Address 

This field contains the memory start address for RxFIFOn in MDWIDTH-bit words.
</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h185</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
        <ipxact:registerFile>
          <ipxact:name>GEVNTADRLO_REGS</ipxact:name>
          <ipxact:description>Global Event Address Lower register array set</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h300</ipxact:addressOffset>
          <ipxact:range>0x10</ipxact:range>
          <ipxact:register>
            <ipxact:name>GEVNTADRLO</ipxact:name>
            <ipxact:description>Global Event Buffer Address (Low) Register

This is an alternate register for the GEVNTADRn register.</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>EVNTADRLO</ipxact:name>
              <ipxact:description>Event Buffer Address (EvntAdrLo)

Holds the lower 32 bits of start address of the external memory for the Event Buffer. During operation, hardware does not update this address.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>GEVNTADRHI</ipxact:name>
            <ipxact:description>Global Event Buffer Address (High) Register

This is an alternate register for the GEVNTADRn register.</ipxact:description>
            <ipxact:addressOffset>'h4</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>EVNTADRHI</ipxact:name>
              <ipxact:description>Event Buffer Address (EvntAdrHi)

Holds the higher 32 bits of start address of the external memory for the Event Buffer. During operation, hardware does not update this address.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>GEVNTSIZ</ipxact:name>
            <ipxact:description>Global Event Buffer Size Register

This register holds the Event Buffer Size and the Event Interrupt Mask bit. During power-on initialization, software must initialize the size with the number of bytes allocated for the Event Buffer. The Event Interrupt Mask will mask the interrupt, but events are still queued. After configuration, software must preserve the Event Buffer Size value when changing the Event Interrupt Mask.</ipxact:description>
            <ipxact:addressOffset>'h8</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>EVENTSIZ</ipxact:name>
              <ipxact:description>Event Buffer Size in bytes (EVNTSiz)

Holds the size of the Event Buffer in bytes; must be a multiple of four. This is programmed by software once during initialization.
The minimum size of the event buffer is 32 bytes.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_30_16</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h7fff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>15</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>EVNTINTRPTMASK</ipxact:name>
              <ipxact:description>Event Interrupt Mask (EvntIntMask).

When set to '1', this prevents the interrupt from being generated. However, even when the mask is set, the events are queued.</ipxact:description>
              <ipxact:bitOffset>31</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>GEVNTCOUNT</ipxact:name>
            <ipxact:description>Global Event Buffer Count Register

This register holds the number of valid bytes in the Event Buffer. During initialization, software must initialize the count by writing 0 to the Event Count field. Each time the hardware writes a new event to the Event Buffer, it increments this count. Most events are four bytes, but some events may span over multiple four byte entries. Whenever the count is greater than zero and if enabled, conditions for interrupt moderation are satisfied, the hardware raises the corresponding interrupt line (depending on the EvntIntMask bit in the GEVNTSIZn register). On an interrupt, software processes one or more events out of the Event Buffer. Afterwards, software must write the Event Count field with the number of bytes it processed. If Interrupt Moderation is enabled, then software needs to clear EVNT_HANDLER_BUSY bit. 

Clock crossing delays may result in the continuous assertion of the interrupt after software acknowledges the last event. Therefore, when the interrupt line is asserted, software must read the GEVNTCOUNT register and only process events if the GEVNTCOUNT is greater than 0.</ipxact:description>
            <ipxact:addressOffset>'hc</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>EVNTCOUNT</ipxact:name>
              <ipxact:description>Event Count (EVNTCount)

When read, returns the number of valid events in the Event Buffer (in bytes).

When written, hardware decrements the count by the value written.

When Interrupt moderation is enabled (that is, DEVICE_IMODI!= 0), the interrupt line gets de-asserted when the first write happens on this register to decrement the count. When Interrupt moderation is disabled (that is, DEVICE_IMODI = 0), the Interrupt line continues to get asserted until the event count becomes zero (no-moderation behavior).</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_30_16</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h7fff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>15</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>EVNT_HANDLER_BUSY</ipxact:name>
              <ipxact:description>Event Handler Busy

Device software event handler busy indication. The controller sets this bit when the interrupt line is asserted due to pending events. Software clears this bit (with 1'b1) when it has finished processing the events (along with updating the EVNTCOUNT in this register). The controller does not raise the interrupt line for a new event unless this bit is cleared.

Note: When Interrupt moderation is disabled (that is, DEVICE_IMODI = 0), this bit is ignored.</ipxact:description>
              <ipxact:bitOffset>31</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_dev</ipxact:name>
        <ipxact:description>USB3 Device Register Block</ipxact:description>
        <ipxact:baseAddress>'hc700</ipxact:baseAddress>
        <ipxact:range>'h400</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:usage>register</ipxact:usage>
        <ipxact:register>
          <ipxact:name>DCFG</ipxact:name>
          <ipxact:description>Device Configuration Register. 

This register configures the core in Device mode after power-on or after certain control commands or enumeration. Do not make changes to this register after initial programming.</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DEVSPD</ipxact:name>
            <ipxact:description>Device Speed. 

Indicates the speed at which the application requires the core to connect, or the maximum speed the application can support. 

However, the actual bus speed is determined only after the chirp sequence is completed, and is based on the speed of the USB host to which the core is connected.
 - 3'b100: SuperSpeed (USB 3.0 PHY clock is 125 MHz or 250 MHz)
 - 3'b000: High-speed (USB 2.0 PHY clock is 30 MHz or 60 MHz)
 - 3'b001: Full-speed (USB 2.0 PHY clock is 30 MHz or 60 MHz)</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>FullSpeed</ipxact:name>
                <ipxact:displayName>Full-speed (USB 2.0 PHY clock is 30 MHz or 60 MHz)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>HighSpeed</ipxact:name>
                <ipxact:displayName>High-speed (USB 2.0 PHY clock is 30 MHz or 60 MHz)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>SuperSpeed</ipxact:name>
                <ipxact:displayName>SuperSpeed (USB 3.0 PHY clock is 125 MHz or 250 MHz)</ipxact:displayName>
                <ipxact:value>0x4</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:testable testConstraint="unconstrained">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEVADDR</ipxact:name>
            <ipxact:description>Device Address.

The application must perform the following:
 - Program this field after every SetAddress request.
 - Reset this field to zero after USB reset.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_10_11</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INTRNUM</ipxact:name>
            <ipxact:description>Interrupt number 

Indicates interrupt/EventQ number on which non-endpoint-specific device-related interrupts (see DEVT) are generated.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NUMP</ipxact:name>
            <ipxact:description>Number of Receive Buffers. 

This bit indicates the number of receive buffers to be reported in the ACK TP.

The DWC_usb3 controller uses this field for non-control endpoints if GRXTHRCFG.UsbRxPktCntSel is set to '0'. The application can program this value based on RxFIFO size, buffer sizes programmed in descriptors, and system latency.

For an OUT endpoint, this field controls the number of receive buffers reported in the NumP field of the ACK TP transmitted by the core.

Note: This bit is used in host mode when Debug Capability is enabled.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LPMCAP</ipxact:name>
            <ipxact:description>LPM Capable 

The application uses this bit to control the DWC_usb3 core LPM capabilities. If the core operates as a non-LPM-capable device, it cannot respond to LPM transactions.
 - 1'b0: LPM capability is not enabled.
 - 1'b1: LPM capability is enabled.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>IgnStrmPP</ipxact:name>
            <ipxact:description>IgnoreStreamPP
This bit only affects stream-capable bulk endpoints.

When this bit is set to '0' and the controller receives a Data Packet with the Packet Pending (PP) bit set to 0 for OUT endpoints, or it receives an ACK with the NumP field set to 0 and PP set to 0 for IN endpoints, the core attempts to search for another stream (CStream) to initiate to the host. However, there are two situations where this behavior is not optimal:
 - When the host is setting PP=0 even though it has not finished the stream, or
 - When the endpoint on the device is configured with one transfer resource and therefore does not have any other streams to initiate to the host.
When this bit is set to '1', the core ignores the Packet Pending bit for the purposes of stream selection and does not search for another stream when it receives DP(PP=0) or ACK(NumP=0, PP=0). This can enhance the performance when the device system bus bandwidth is low or the host responds to the core's ERDY transmission very quickly.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_24</ipxact:name>
            <ipxact:description>reserved</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_25</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCTL</ipxact:name>
          <ipxact:description>Device Control Register

Note:

When Hibernation is not enabled using GCTL.GblHibernationEn field,
 - you can write any value to CSS, CRS, L1HibernationEn, and KeepConnect fields
 - L1HibernationEn, and KeepConnect fields always return 0 when read in this hibernation-disabled state</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TSTCTL</ipxact:name>
            <ipxact:description>Test Control 
 - 4'b000: Test mode disabled
 - 4'b001: Test_J mode
 - 4'b010: Test_K mode
 - 4'b011: Test_SE0_NAK mode
 - 4'b100: Test_Packet mode
 - 4'b101: Test_Force_Enable
 - Others: Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ULSTCHNGREQ</ipxact:name>
            <ipxact:description>ULSTCHNGREQ

Software writes this field to issue a USB/Link state change request. A change in this field indicates a new request to the core. 

If software wants to issue the same request back-to-back, it must write a 0 to this field between the two requests. The result of the state change request is reflected in the USB/Link State in DSTS. These bits are self-cleared on the MAC Layer exiting suspended state.

If software is updating other fields of the DCTL register and not intending to force any link state change, then it must write a 0 to this field.

SS Compliance mode is normally entered and controlled by the remote link partner. Refer to the USB 3.0 specification. 

Alternatively, you can force the local link directly into compliance mode, by resetting the SS link with the RUN/STOP bit set to zero. 

If you then write '10' to the USB/Link State Change field and '1' to RUN/STOP, the link goes to compliance mode. 

Once you are in compliance, you may alternately write zero and '10' to this field to advance the compliance pattern.

In SS mode:
 - Value Requested Link State Transition/Action 
 - 0  No Action
 - 4  SS.Disabled
 - 5  Rx.Detect
 - 6  SS.Inactive
 - 8  Recovery
 - 10  Compliance
 - Others:  Reserved
In HS/FS/LS mode:
 - ValueRequested USB state transition
 - 8  Remote wakeup request
 - Others: Reserved
The Remote wakeup request must be issued 2us after the device goes into suspend state (DSTS[21:18] is 3 - refer to Table "Fields for Register: DSTS" in the Databook).

Note: After coming out of hibernation, software must write 8 (Recovery) into this field to confirm exit from the suspended state.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>write-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ACCEPTU1ENA</ipxact:name>
            <ipxact:description>Accept U1 Enable
 - 1'b0: Core rejects U1 except when Force_LinkPM_Accept bit is set (default)
 - 1'b1: Core accepts transition to U1 state if nothing is pending on the application side.

On USB reset, hardware clears this bit to 0. Software sets this bit after receiving a SetConfiguration command.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INITU1ENA</ipxact:name>
            <ipxact:description>Initiate U1 Enable 
 - 1'b0: May not initiate U1 (default); 
 - 1'b1: May initiate U1.

On USB reset, hardware clears this bit to 0. Software sets this bit after receiving SetFeature(U1_ENABLE), and clears this bit when ClearFeature(U1_ENABLE) is received. 

If DCTL[9] (AcceptU1Ena) is 0, the link immediately exits U1 state.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ACCEPTU2ENA</ipxact:name>
            <ipxact:description>Accept U2 Enable 
 - 1'b0: Reject U2 except when Force_LinkPM_Accept bit is set (default)
 - 1'b1: Core accepts transition to U2 state if nothing is pending on the application side.

On USB reset, hardware clears this bit to 0. Software sets this bit after receiving a SetConfiguration command.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INITU2ENA</ipxact:name>
            <ipxact:description>Initiate U2 Enable
 - 1'b0: May not initiate U2 (default)
 - 1'b1: May initiate U2

On USB reset, hardware clears this bit to 0. Software sets this bit after receiving SetFeature(U2_ENABLE), and clears this bit when ClearFeature(U2_ENABLE) is received.

If DCTL[11] (AcceptU2Ena) is 0, the link immediately exits U2 state.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15_13</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CSS</ipxact:name>
            <ipxact:description>Controller Save State (CSS)

This command is similar to the USBCMD.CSS bit in host mode and initiates the save process. When software sets this bit to '1', the controller immediately sets DSTS.SSS to '1'. When the controller has finished the save process, it sets DSTS.SSS to '0'.

Note: When read, this field always returns '0'.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CRS</ipxact:name>
            <ipxact:description>Controller Restore State (CRS)

This command is similar to the USBCMD.CRS bit in host mode and initiates the restore process. When software sets this bit to '1', the controller immediately sets DSTS.RSS to '1'. When the controller has finished the restore process, it sets DSTS.RSS to '0'.

Note: When read, this field always returns '0'.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>L1HibernationEn</ipxact:name>
            <ipxact:description>L1HibernationEn 

When this bit is set along with KeepConnect, the device core generates a Hibernation Request Event if L1 is enabled and the HIRD value in the LPM token is larger than the threshold programmed in DCTL.HIRD_Thres. 

The core does not exit the LPM L1 state until software writes Recovery into the DCTL.ULStChngReq field. 

This prevents corner cases where the device is entering hibernation at the same time the host is attempting to exit L1.

Note: If Hibernation is disabled, that is, GCTL[1].GblHibernationEn = 0, this bit is tied to zero.
</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>KeepConnect</ipxact:name>
            <ipxact:description>Keep Connect 

When '1', this bit enables the save and restore programming model by preventing the core from disconnecting from the host when DCTL.RunStop is set to '0'. 

It also enables the Hibernation Request Event to be generated when the link goes to U3 or L2.

The device core disconnects from the host when DCTL.RunStop is set to '0'. 

This bit indicates whether to preserve this behavior ('0'), or if the core must not disconnect when RunStop is set to 0 ('1').

This bit also prevents the LTSSM from automatically going to U0/L0 when the host requests resume from U3/L2.

Note: If Hibernation is disabled, that is, GCTL[1].GblHibernationEn = 0, this bit is tied to zero.
</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LPM_NYET_thres</ipxact:name>
            <ipxact:description>LPM NYET Threshold

When LPM Errata is enabled:

Bits [23:20]: LPM NYET Response Threshold (LPM_NYET_thres)

Handshake response to LPM token specified by device application. Response depends on DCFG.LPMCap.
 - DCFG.LPMCap is 1'b0 - The core always responds with Timeout (that is, no response).
 - DCFG.LPMCap is 1'b1 - The core responds with an ACK on successful LPM transaction, which requires that all of the following are satisfied:
 - There are no PID or CRC5 errors in both the EXT token and the LPM token (if not true, inactivity results in a timeout ERROR). 
 - No data is pending in the TxFIFO and RxFIFO is empty (else NYET).
 - The BESL value in the LPM token is less than or equal to LPM_NYET_thres[3:0]</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'hf</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HIRDTHRES</ipxact:name>
            <ipxact:description>HIRD Threshold (HIRD_Thres)

The core asserts output signals utmi_l1_suspend_n and utmi_sleep_n (see "LPM Interface Signals" table in the Databook) on the basis of this signal:

The core asserts utmi_l1_suspend_n to put the PHY into Deep Low-Power mode in L1 when both of the following are true:
 - HIRD value is greater than or equal to the value in DCTL.HIRD_Thres[3:0]
 - HIRD_Thres[4] is set to 1'b1.
The core asserts utmi_sleep_n on L1 when one of the following is true:
 - If the HIRD value is less than HIRD_Thres[3:0] or
 - HIRD_Thres[4] is set to 1'b0.
Note: This field must be set to '0' during SuperSpeed mode of operation.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_29</ipxact:name>
            <ipxact:description>Reserved1</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CSFTRST</ipxact:name>
            <ipxact:description>Core Soft Reset

Resets the all clock domains as follows:
 - This bit clears the interrupts and all the CSRs except GSTS, GSNPSID, GGPIO, GUID, GUSB2PHYCFGn registers, GUSB3PIPECTLn registers, DCFG, DCTL, DEVTEN, and DSTS registers.
 - All module state machines (except the SoC Bus Slave Unit) are reset to the IDLE state, and all the TxFIFOs and the RxFIFO are flushed.
 - Any transactions on the SoC bus Master are terminated as soon as possible, after gracefully completing the last data phase of a SoC bus transfer. Any transactions on the USB are terminated immediately.
The application can write this bit at any time to reset the core. This is a self-clearing bit; the core clears this bit after all necessary logic is reset in the core, which may take several clocks depending on the core's current state. Once this bit is cleared, the software must wait at least 3 PHY clocks before accessing the PHY domain (synchronization delay). Typically, software reset is used during software development and also when you dynamically change the PHY selection bits in the USB configuration registers listed above. When you change the PHY, the corresponding clock for the PHY is selected and used in the PHY domain. Once a new clock is selected, the PHY domain must be reset for proper operation.

Note: Programming this field with random data causes side effect . Bit Bash register testing is not recommended.</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RUN_STOP</ipxact:name>
            <ipxact:description>Run/Stop

The software writes 1 to this bit to start the device controller operation.

To stop the device controller operation, the software must remove any active transfers and write 0 to this bit. When the controller is stopped, it sets the DSTS.DevCtrlHlt bit when the core is idle and the lower layer finishes the disconnect process.

The Run/Stop bit must be used in following cases as specified:
 - After power-on reset and CSR initialization, the software must write 1 to this bit to start the device controller. The controller does not signal connect to the host until this bit is set.
 - The software uses this bit to control the device controller to perform a soft disconnect. When the software writes 0 to this bit, the host does not see that the device is connected. The device controller stays in the disconnected state until the software writes 1 to this bit. The minimum duration of keeping this bit cleared is specified in the Note below. If the software attempts a connect after the soft disconnect or detects a disconnect event, it must set DCTL[8:5] to 5 before reasserting the Run/Stop bit.
 - When the USB or Link is in a lower power state and the Two Power Rails configuration is selected, software writes 0 to this bit to indicate that it is going to turn off the Core Power Rail. After the software turns on the Core Power Rail again and re-initializes the device controller, it must set this bit to start the device controller. For more details, see "Low Power Operation" section of the Databook.
Note: The following is the minimum duration under various conditions for which the soft disconnect (SftDiscon) bit must be set for the USB host to detect a device disconnect:

30ms:
 - For SuperSpeed, when the device state is Suspended, Idle, Transmit, or Receive. 
10ms:
 - For high-speed, when the device state is Suspended, Idle, or not Idle/Suspended (performing transactions)
 - For full-speed/low-speed, when the device state is Suspended, Idle, or not Idle/Supended (performing transactions)
To accommodate clock jitter, it is recommended that the application add extra delay to the specified minimum duration.
</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DEVTEN</ipxact:name>
          <ipxact:description>Device Event Enable Register

This register controls the generation of device-specific events (see "Event Buffer Content for Device-Specific Events (DEVT)" section in the Databook). If an enable bit is set to 0, the event will not be generated.</ipxact:description>
          <ipxact:addressOffset>'h8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DISSCONNEVTEN</ipxact:name>
            <ipxact:description>Disconnect Detected Event Enable</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>USBRSTEVTEN</ipxact:name>
            <ipxact:description>USB Reset Enable</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CONNECTDONEEVTEN</ipxact:name>
            <ipxact:description>Connection Done Enable</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ULSTCNGEN</ipxact:name>
            <ipxact:description>USB/Link State Change Event Enable</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>WKUPEVTEN</ipxact:name>
            <ipxact:description>U3/L2 or U3/L2L1 Resume Detected Event Enable.

Note:
 - If GUCTL1[DEV_DECOUPLE_L1L2_EVT] is enabled, then this bit is for U3/L2 Resume Detected Event Enable.
 - If GUCTL1[DEV_DECOUPLE_L1L2_EVT] is not enabled, then this bit is for U3/L2L1 Resume Detected Event Enable.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HibernationReqEvtEn</ipxact:name>
            <ipxact:description>This bit enables/disables the generation of the Hibernation Request Event.
</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>U3L2L1SuspEn</ipxact:name>
            <ipxact:description>U3/L2 or U3/L2L1 Suspend Event Enable. 

Note:
 - If GUCTL1[DEV_DECOUPLE_L1L2_EVT] is enabled, then this bit is for U3/L2 Suspend Event Enable.
 - If GUCTL1[DEV_DECOUPLE_L1L2_EVT] is not enabled, then this bit is for U3/L2L1 Suspend Event Enable.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SOFTEVTEN</ipxact:name>
            <ipxact:description>Start of (u)frame</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>L1SUSPEN</ipxact:name>
            <ipxact:description>L1 Suspend Event Enable

Note: Only if GUCTL1[DEV_DECOUPLE_L1L2_EVT] is enabled, this bit is for L1 Suspend Event Enable.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ERRTICERREVTEN</ipxact:name>
            <ipxact:description>Erratic Error Event Enable</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_10</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_11</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>VENDEVTSTRCVDEN</ipxact:name>
            <ipxact:description>Vendor Device Test LMP Received Event (VndrDevTstRcvedEn)</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>L1WKUPEVTEN</ipxact:name>
            <ipxact:description>L1 Resume Detected Event Enable.

Note: If GUCTL1[DEV_DECOUPLE_L1L2_EVT] is enabled, then this bit is for L1 Resume Detected Event Enable.</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ECCERREN</ipxact:name>
            <ipxact:description>ECC Error Enable.

If this bit is set to 1, the controller reports an ECC error to the software when an uncorrectable ECC occurs internally.</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_17</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>15</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DSTS</ipxact:name>
          <ipxact:description>Device Status Register

This register indicates the status of the device controller with respect to USB-related events.

Note:

When Hibernation is not enabled, RSS and SSS fields always return 0 when read.</ipxact:description>
          <ipxact:addressOffset>'hc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>CONNECTSPD</ipxact:name>
            <ipxact:description>Connected Speed (ConnectSpd)

Indicates the speed at which the DWC_usb3 core has come up after speed detection through a chirp sequence.
 - 3'b100: SuperSpeed (PHY clock is running at 125 or 250 MHz)
 - 3'b000: High-speed (PHY clock is running at 30 or 60 MHz)
 - 3'b001: Full-speed (PHY clock is running at 30 or 60 MHz)
Low-speed is not supported for devices using a UTMI+ PHY.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>FullSpeed</ipxact:name>
                <ipxact:displayName>Full-speed (PHY clock is running at 30 or 60 MHz)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>HighSpeed</ipxact:name>
                <ipxact:displayName>High-speed (PHY clock is running at 30 or 60 MHz)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>SuperSpeed</ipxact:name>
                <ipxact:displayName>SuperSpeed (PHY clock is running at 125 or 250 MHz)</ipxact:displayName>
                <ipxact:value>0x4</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SOFFN</ipxact:name>
            <ipxact:description>Frame/Microframe Number of the Received SOF. 

When the core is operating at SuperSpeed, 
 - [16:3] indicates the uframe/ITP number
When the core is operating at high-speed, 
 - [16:6] indicates the frame number
 - [5:3] indicates the microframe number
When the core is operating at full-speed, 
 - [16:14] is not used. Software can ignore these 3 bits
 - [13:3] indicates the frame number</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>14</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RXFIFOEMPTY</ipxact:name>
            <ipxact:description>RxFIFO Empty.</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>USBLNKST</ipxact:name>
            <ipxact:description>USBLNKST.

USB/Link State

In SS mode: LTSSM State
 - 4'h0: U0
 - 4'h1: U1
 - 4'h2: U2
 - 4'h3: U3
 - 4'h4: SS_DIS
 - 4'h5: RX_DET
 - 4'h6: SS_INACT
 - 4'h7: POLL
 - 4'h8: RECOV
 - 4'h9: HRESET
 - 4'ha: CMPLY
 - 4'hb: LPBK
 - 4'hf: Resume/Reset
In HS/FS/LS mode:
 - 4'h0: On state
 - 4'h2: Sleep (L1) state
 - 4'h3: Suspend (L2) state
 - 4'h4: Disconnected state (Default state)
 - 4'h5: Early Suspend state (valid only when Hibernation is disabled, GCTL[1].GblHibernationEn = 0)
 - 4'he: Reset (valid only when Hibernation is enabled, GCTL[1].GblHibernationEn = 1)
 - 4'hf: Resume (valid only when Hibernation is enabled, GCTL[1].GblHibernationEn = 1)
The link state Resume/Reset indicates that the core received a resume or USB reset request from the host while the link was in hibernation. Software must write '8' (Recovery) to the DCTL.ULStChngReq field to acknowledge the resume/reset request. 

When Hibernation is enabled, GCTL[1].GblHibernationEn = 1, this field USBLnkSt is valid only when DCTL[31].Run/Stop set to '1' and DSTS[29].DCNRD = 0.

Note: If SSIC is enabled, while exiting a low power state, the USBLnkSt field indicates Resume/Reset even for a disconnect condition because a resume precedes the disconnect.</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEVCTRLHLT</ipxact:name>
            <ipxact:description>Device Controller Halted 

This bit is set to 0 when the Run/Stop bit in the DCTL register is set to 1.

The core sets this bit to 1 when, after SW sets Run/Stop to 0, the core is idle and the lower layer finishes the disconnect process.

When Halted=1, the core does not generate Device events. 

Note: 
 - The core does not set this bit to 1 if GEVNTCOUNTn has some valid value. Software needs to acknowledge the events that are generated (by writing to GEVNTCOUNTn) while it is waiting for this bit to be set to 1.
 - When Interrupt Moderation is enabled, there could be delay in raising the interrupt line when the event count is non-zero. Software should read the GEVNTCOUNT register directly and acknowledge them.</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>COREIDLE</ipxact:name>
            <ipxact:description>Core Idle   

The bit indicates that the core finished transferring all RxFIFO data to system memory, writing out all completed descriptors, and all Event Counts are zero.

Note: While testing for Reset values, mask out the read value. This bit represents the changing state of the core and does not hold a static value.</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SSS</ipxact:name>
            <ipxact:description>SSS Save State Status  

This bit is similar to the USBSTS.SSS in host mode.

When the controller has finished the save process, it completes the command by setting DSTS.SSS to '0'.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSS</ipxact:name>
            <ipxact:description>RSS Restore State Status   

This bit is similar to the USBSTS.RSS in host mode.

When the controller finishes the restore process, it completes the command by setting DSTS.RSS to '0'.</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_27_26</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SRE</ipxact:name>
            <ipxact:description>Save Restore Error. Currently not supported.</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DCNRD</ipxact:name>
            <ipxact:description>Device Controller Not Ready 

The bit indicates that the core is in the process of completing the state transitions after exiting from hibernation. 

To complete the state transitions, it takes 256 bus clock cycles from the time DCTL[31].Run/Stop is set. During hibernation, if the UTMI/ULPI PHY is in suspended state, then the 256-bus clock cycle delay starts after the PHY exited suspended state. Software must set DCTL[31].Run/Stop to '1' and wait for this bit to be de-asserted to zero before processing DSTS.USBLnkSt. 

This bit is valid only when DWC_USB3_EN_PWROPT is set to 2 and GCTL[1].GblHibernationEn =1.
</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_30</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DGCMDPAR</ipxact:name>
          <ipxact:description>Device Generic Command Parameter Register

This register indicates the device command parameter. This must be programmed before or along with the device command. The available device commands are listed in DGCMD register.</ipxact:description>
          <ipxact:addressOffset>'h10</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>PARAMETER</ipxact:name>
            <ipxact:description>PARAMETER</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DGCMD</ipxact:name>
          <ipxact:description>Device Generic Command Register

This register enables software to program the core using a single generic command interface to send link management packets and notifications. This register contains command, control, and status fields relevant to the current generic command, while the DGCMDPAR register provides the command parameter.
</ipxact:description>
          <ipxact:addressOffset>'h14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>CMDTYP</ipxact:name>
            <ipxact:description>CMDTYP  

Generic Command Type 

Specifies the type of generic command the software driver is requesting the controller to perform.
 - 02h: Set Periodic Parameters
 - 04h: Set Scratchpad Buffer Array Address Lo
 - 05h: Set Scratchpad Buffer Array Address Hi
 - 07h: Transmit Device Notification
 - 09h: Selected FIFO Flush
 - 0Ah: All FIFO Flush
 - 0Ch: Set Endpoint NRDY
 - 10h: Run SoC Bus LoopBack Test
 - 11h: Restart After Disconnect
All other values are reserved.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CMDIOC</ipxact:name>
            <ipxact:description>Command Interrupt on Complete

When this bit is set, the device controller issues a Generic Command Completion event after executing the command. 

Note that this interrupt is mapped to DCFG.IntrNum.

Note: This field must not set to '1' if the DCTL.RunStop field is '0'.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_9</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CMDACT</ipxact:name>
            <ipxact:description>Command Active

The software sets this bit to 1 to enable the device controller to execute the generic command.

The device controller sets this bit to 0 after executing the command.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_11</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CMDSTATUS</ipxact:name>
            <ipxact:description>Command Status 
 - 1: CmdErr:  Indicates that the device controller encountered an error while processing the command.
 - 0: Indicates command success</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_16</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DALEPENA</ipxact:name>
          <ipxact:description>Device Active USB Endpoint Enable Register. 

This register indicates whether a USB endpoint is active in a given configuration or interface.</ipxact:description>
          <ipxact:addressOffset>'h20</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>USBACTEP</ipxact:name>
            <ipxact:description>USBACTEP   

USB Active Endpoints (USBActEP)

This field indicates if a USB endpoint is active in the current configuration and interface. It applies to USB IN endpoints 0.15 and OUT endpoints 0.15, with one bit for each of the 32 possible endpoints. Even numbers are for USB OUT endpoints, and odd numbers are for USB IN endpoints, as follows:
 - Bit[0]: USB EP0-OUT
 - Bit[1]: USB EP0-IN
 - Bit[2]: USB EP1-OUT
 - Bit[3]: USB EP1-IN
The entity programming this register must set bits 0 and 1 because they enable control endpoints that map to physical endpoints (resources) after USBReset.

Hardware clears these bits for all endpoints (other than EP0-OUT and EP0-IN) after detecting a USB reset event. After receiving SetConfiguration and SetInterface requests, the application must program endpoint registers accordingly and set these bits.

For more information, see "Flexible Endpoint Mapping" section in the DesignWare Cores SuperSpeed USB 3.0 Controller Databook.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:registerFile>
          <ipxact:name>Rsvd_REGS</ipxact:name>
          <ipxact:description>Dev Reserved register array</ipxact:description>
          <ipxact:dim>32</ipxact:dim>
          <ipxact:addressOffset>'h24</ipxact:addressOffset>
          <ipxact:range>0x4</ipxact:range>
          <ipxact:register>
            <ipxact:name>Rsvd</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:field>
              <ipxact:name>reserved_31_0</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
        <ipxact:registerFile>
          <ipxact:name>DEPCMDPAR2_REGS</ipxact:name>
          <ipxact:description>Dep Command par2 register array</ipxact:description>
          <ipxact:dim>8</ipxact:dim>
          <ipxact:addressOffset>'h100</ipxact:addressOffset>
          <ipxact:range>0x10</ipxact:range>
          <ipxact:register>
            <ipxact:name>DEPCMDPAR2</ipxact:name>
            <ipxact:description>Device Physical Endpoint-n Command Parameter 2 Register (DEPCMDPAR2n)

This register indicates the physical endpoint command Parameter 2. It must be programmed before issuing the command.
</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>PARAMETER</ipxact:name>
              <ipxact:description>PARAMETER</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>DEPCMDPAR1</ipxact:name>
            <ipxact:description>Device Physical Endpoint-n Command Parameter 1 Register (DEPCMDPAR1n)</ipxact:description>
            <ipxact:addressOffset>'h4</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>PARAMETER</ipxact:name>
              <ipxact:description>PARAMETER</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>DEPCMDPAR0</ipxact:name>
            <ipxact:description>Device Physical Endpoint-n Command Parameter 0 Register (DEPCMDPAR0n)</ipxact:description>
            <ipxact:addressOffset>'h8</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>PARAMETER</ipxact:name>
              <ipxact:description>PARAMETER</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>DEPCMD</ipxact:name>
            <ipxact:description>Device Physical Endpoint-n Command Register

This register enables software to issue physical endpoint-specific commands. This register contains command, control, and status fields relevant to the current generic command, while the DEPCMDPAR[2:0]n registers provide command parameters and return status information.

Several fields (including Command Type) are write-only, so their read values are undefined. After power-on, prior to issuing the first endpoint command, the read value of this register is undefined. In particular, the CmdAct bit may be set after power-on. In this case, it is safe to issue an endpoint command.</ipxact:description>
            <ipxact:addressOffset>'hc</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>CMDTYP</ipxact:name>
              <ipxact:description>Command Type

Specifies the type of command the software driver is requesting the core to perform.
 - 00h: Reserved
 - 01h: Set Endpoint Configuration - -64 or 96-bit Parameter
 - 02h: Set Endpoint Transfer Resource Configuration - 32-bit Parameter
 - 03h: Get Endpoint State - No Parameter Needed
 - 04h: Set Stall - No Parameter Needed
 - 05h: Clear Stall (see Set Stall) - No Parameter Needed
 - 06h: Start Transfer - 64-bit Parameter
 - 07h: Update Transfer - No Parameter Needed
 - 08h: End Transfer - No Parameter Needed
 - 09h: Start New Configuration - No Parameter Needed</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hf</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_7_4</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>4</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hf</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>CMDIOC</ipxact:name>
              <ipxact:description>CMDIOC

Command Interrupt on Complete (CmdIOC)

When this bit is set, the device controller issues a generic Endpoint Command Complete event after executing the command. 

Note that this interrupt is mapped to DEPCFG.IntrNum. 
When the DEPCFG command is executed, the command interrupt on completion goes to the interrupt pointed by the DEPCFG.IntrNum in the current command.

Note: This field must not set to 1 if the DCTL.RunStop field is 0.
</ipxact:description>
              <ipxact:bitOffset>8</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_9</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>9</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>CMDACT</ipxact:name>
              <ipxact:description>Command Active (CmdAct)

Software sets this bit to 1 to enable the device endpoint controller to execute the generic command.

The device controller sets this bit to 0 when the CmdStatus field is valid and the endpoint is ready to accept another command. This does not imply that all the effects of the previously-issued command have taken place.</ipxact:description>
              <ipxact:bitOffset>10</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>HIPRI_FORCERM</ipxact:name>
              <ipxact:description>HighPriority/ForceRM (HiPri_ForceRM) 
 - HighPriority: Only valid for Start Transfer command
 - ForceRM: Only valid for End Transfer command
 - ClearPendIN: Only valid for Clear Stall command . Software sets this bit to clear any pending IN transaction (on that endpoint) stuck at the lower layers when a Clear Stall command is issued.</ipxact:description>
              <ipxact:bitOffset>11</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>CMDSTATUS</ipxact:name>
              <ipxact:description>Command Completion Status (CmdStatus)

Additional information about the completion of this command is available in this field. The information is in the same format as bits 15:12 of the Endpoint Command Complete event, see "Device Endpoint-n Events: DEPEVT" table in the Databook.</ipxact:description>
              <ipxact:bitOffset>12</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hf</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>COMMANDPARAM</ipxact:name>
              <ipxact:description>Command Parameters or Event Parameters

Command Parameters (CommandParam), when this register is written:

For Start Transfer command:
 -  [31:16]: StreamID. The USB StreamID assigned to this transfer
For Start Transfer command applied to an isochronous endpoint
 - [31:16]: StartMicroFramNum: Indicates the (micro)frame number to which the first TRB applies. 
For Update Transfer, End Transfer, and Start New Configuration commands
 - [22:16]: Transfer Resource Index (XferRscIdx). The hardware-assigned transfer resource index for the transfer, which was returned in response to the Start Transfer command. The application software-assigned transfer resource index for a Start New Configuration command.
Event Parameters (EventParam), when this register is read. Refer to bits [31:16] in Table "Device Endpoint-n Events: DEPEVT" of the Databook.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
        <ipxact:registerFile>
          <ipxact:name>DEV_IMOD_REGS</ipxact:name>
          <ipxact:description>Dev IMOD register array</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h300</ipxact:addressOffset>
          <ipxact:range>0x4</ipxact:range>
          <ipxact:register>
            <ipxact:name>DEV_IMOD</ipxact:name>
            <ipxact:description>Device Interrupt Moderation Register (DEV_IMOD)

This register controls the Interrupt Moderation feature that allows the device software to throttle the interrupt rate.

Key Functions:
 - Interrupt Moderation is enabled only when the IMOD Interval is programmed to a non-zero value.
 - Interrupt is asserted whenever the IMOD (down) counter is 0, EVNT_HANDLER_BUSY is 0, and there are pending events (that is, event count is non-zero)
 - GEVNTCOUNT[EVNT_HANDLER_BUSY] is set by hardware when interrupt is asserted, and cleared by software when interrupt processing is completed.
 - The Interrupt line is de-asserted after the first write to the event count.
 - IMOD counter is loaded with IMOD interval whenever the Interrupt line is de-asserted.
</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>DEVICE_IMODI</ipxact:name>
              <ipxact:description>Moderation Interval (DEVICE_IMODI)

This field holds the minimum inter-interrupt interval between events. The interval is specified in terms of 250ns increments. 

A value of 0 disables the interrupt throttling logic and interrupts are generated immediately if event count becomes non-zero.

In scaledown simulation mode, 4 ram clocks are used to time 250ns.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DEVICE_IMODC</ipxact:name>
              <ipxact:description>Interrupt Moderation Down Counter

Loaded with the DEVICE_IMODI value, whenever the hardware interrupt(n) line is de-asserted from the asserted state, counts down to 0, and stops. 

The interrupt(n) is signaled whenever this counter is 0, EVNT_HANDLER_BUSY is 0, and there are pending events (that is, event count is non-zero). 

This counter may be directly written by software at any time to alter the interrupt rate.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_eXtensible_Host_Cntrl_Cap_Regs</ipxact:name>
        <ipxact:description>USB3 eXtensible Host Controller Capability Register Block</ipxact:description>
        <ipxact:baseAddress>'h0</ipxact:baseAddress>
        <ipxact:range>'h20</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:register>
          <ipxact:name>CAPLENGTH</ipxact:name>
          <ipxact:description>Capability Registers Length

Host Controller Operational Registers = Base address + CAPLENGTH

where CAPLENGTH is `DWC_USB3_HOST_CAP_REG_LEN whose default value is 20h.</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CAPLENGTH</ipxact:name>
            <ipxact:description>Capability Registers Length (CAPLENGTH)</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h20</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15_8</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HCIVERSION</ipxact:name>
            <ipxact:description>HC Interface Version Number (HCIVERSION)</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h110</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HCSPARAMS1</ipxact:name>
          <ipxact:description>Structural Parameters 1 Register

For register definitions, refer to the xHCI specification.</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>MAXSLOTS</ipxact:name>
            <ipxact:description>Number of device slots (MaxSlots)

Defined by configurable parameter `DWC_USB3_NUM_DEVICE_SUPT</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h40</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MAXINTRS</ipxact:name>
            <ipxact:description>Number of Interrupters (MaxIntrs)

Defined by the configurable parameter `DWC_USB3_HOST_NUM_INTERRUPTER_SUPT</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_23_19</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MAXPORTS</ipxact:name>
            <ipxact:description>Number of Ports (MaxPorts)
 - Number of ports implemented is defined by the parameter (`DWC_USB3_HOST_NUM_U2_ROOT_PORTS + `DWC_USB3_HOST_NUM_U3_ROOT_PORTS)
 - Number of ports enabled is controlled by the core input signals host_num_u2_port[3:0]+host_num_u3_port[3:0]
Note:

In USB 2.0-only mode, the host_num_u3_port signal is zero.</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HCSPARAMS2</ipxact:name>
          <ipxact:description>Structural Parameters 2 Register

For register definitions, refer to the xHCI specification.</ipxact:description>
          <ipxact:addressOffset>'h8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>IST</ipxact:name>
            <ipxact:description>Isochronous Scheduling Threshold (IST)</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ERSTMAX</ipxact:name>
            <ipxact:description>Event Ring Segment Table Max (ERST Max)</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'hf</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_20_8</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1fff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>13</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MAXSCRATCHPADBUFS_HI</ipxact:name>
            <ipxact:description>Max Scratchpad Bufs HI

The core automatically updates this field.</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SPR</ipxact:name>
            <ipxact:description>Scratchpad Restore (SPR)</ipxact:description>
            <ipxact:bitOffset>26</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MAXSCRATCHPADBUFS</ipxact:name>
            <ipxact:description>Max Scratchpad Bufs Lo
The value is calculated based on chosen configuration parameter values. Possible values are 1-4.</ipxact:description>
            <ipxact:bitOffset>27</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HCSPARAMS3</ipxact:name>
          <ipxact:description>Structural Parameters 3 Register

For register definitions, refer to the xHCI specification.</ipxact:description>
          <ipxact:addressOffset>'hc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>U1_DEVICE_EXIT_LAT</ipxact:name>
            <ipxact:description>U1 Device Exit Latency</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'ha</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15_8</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>U2_DEVICE_EXIT_LAT</ipxact:name>
            <ipxact:description>U2 Device Exit Latency</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h7ff</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HCCPARAMS1</ipxact:name>
          <ipxact:description>Capability Parameters 1 Register

For register definitions, refer to the xHCI specification.</ipxact:description>
          <ipxact:addressOffset>'h10</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>AC64</ipxact:name>
            <ipxact:description>64-bit Addressing Capability (AC64)

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BNC</ipxact:name>
            <ipxact:description>BW Negotiation Capability (BNC)

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CSZ</ipxact:name>
            <ipxact:description>Context Size (CSZ)

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PPC</ipxact:name>
            <ipxact:description>Port Power Control

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PIND</ipxact:name>
            <ipxact:description>Port Indicators (PIND)

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LHRC</ipxact:name>
            <ipxact:description>Light HC Reset Capability

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LTC</ipxact:name>
            <ipxact:description>Latency Tolerance Messaging Capability (LTC)

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NSS</ipxact:name>
            <ipxact:description>No Secondary SID Support (NSS)

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PAE</ipxact:name>
            <ipxact:description>Parse All Event Data (PAE)

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SPC</ipxact:name>
            <ipxact:description>Short Packet Capability (SPC) 

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SEC</ipxact:name>
            <ipxact:description>Stopped EDLTA Capability (SEC) 

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CFC</ipxact:name>
            <ipxact:description>Contiguous Frame ID Capability (CFC)</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MAXPSASIZE</ipxact:name>
            <ipxact:description>Maximum Primary Stream Array Size (MaxPSASize)

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'hf</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>XECP</ipxact:name>
            <ipxact:description>xHCI Extended Capabilities Pointer (xECP)

Based on configuration, core automatically updates it.  

Refer to &lt;workspace&gt;/src/DWC_usb3_params.v for details on DWC_USB3_HC_XECP.
</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h220</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DBOFF</ipxact:name>
          <ipxact:description>Doorbell Offset Register

For register definitions, refer to the xHCI specification.</ipxact:description>
          <ipxact:addressOffset>'h14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_1_0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DOORBELL_ARRAY_OFFSET</ipxact:name>
            <ipxact:description>Doorbell Array Offset - RO

Based on configuration, core automatically updates it.

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h120</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>30</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>RTSOFF</ipxact:name>
          <ipxact:description>Runtime Register Space Offset Register</ipxact:description>
          <ipxact:addressOffset>'h18</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_4_0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RUNTIME_REG_SPACE_OFFSET</ipxact:name>
            <ipxact:description>Runtime Register Space Offset

Based on configuration, core automatically updates it.

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h22</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>27</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HCCPARAMS2</ipxact:name>
          <ipxact:description>Host Controller Capability Parameters 2

For register definitions, refer to the xHCI specification.</ipxact:description>
          <ipxact:addressOffset>'h1c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>U3C</ipxact:name>
            <ipxact:description>U3 Entry Capability (U3C)

For a description of this standard USB register field, see the eXtensible Host Controller I
nterface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CMC</ipxact:name>
            <ipxact:description>Configure Endpoint Command Max Exit Latency Too Large Capability (CMC)

For a description of this standard USB register field, see the eXtensible Host Controller I
nterface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>FSC</ipxact:name>
            <ipxact:description>Force Save Context Capability (FSC)

For a description of this standard USB register field, see the eXtensible Host Controller I
nterface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CTC</ipxact:name>
            <ipxact:description>Compliance Transition Capability (CTC)

For a description of this standard USB register field, see the eXtensible Host Controller I
nterface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LEC</ipxact:name>
            <ipxact:description>Large ESIT Payload Capability (LEC)

For a description of this standard USB register field, see the eXtensible Host Controller I
nterface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CIC</ipxact:name>
            <ipxact:description>Configuration Information Capability (CIC)

For a description of this standard USB register field, see the eXtensible Host Controller I
nterface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_6</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>26</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_Host_Cntrl_Oper_Regs</ipxact:name>
        <ipxact:description>USB3 Host Cntrl Oper Regs Block</ipxact:description>
        <ipxact:baseAddress>'h20</ipxact:baseAddress>
        <ipxact:range>'h400</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:register>
          <ipxact:name>USBCMD</ipxact:name>
          <ipxact:description>USB Command Register

For a description of this standard USB register field see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>R_S</ipxact:name>
            <ipxact:description>R_S

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.

Due to side-effects this reguster field is not recommended for Bit-Bash testing.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HCRST</ipxact:name>
            <ipxact:description>HCRST

The following bits reset the internal logic of the host controller. Under soft reset, some CSR accesses may fail (Timeout).
 - HCRST
 - LHCRST

Bit Bash register testing is not recommended.
</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>INTE</ipxact:name>
            <ipxact:description>INTE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HSEE</ipxact:name>
            <ipxact:description>HSEE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_6_4</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LHCRST</ipxact:name>
            <ipxact:description>Light Host Controller Reset

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.

The following bits reset the internal logic of the host controller. Under soft reset, some CSR accesses may fail (Timeout).
 - HCRST
 - LHCRST

Bit Bash register testing is not recommended.
</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CSS</ipxact:name>
            <ipxact:description>Controller Save State

This command is similar to the USBCMD.CSS bit in host mode and initiates the save process. When software sets this bit to '1', the controller immediately sets DSTS.SSS to '1'. 
When the controller has finished the save process, it sets DSTS.SSS to '0'.

Note: When read, this field always returns '0'.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CRS</ipxact:name>
            <ipxact:description>Controller Restore State

This command is similar to the USBCMD.CRS bit in host mode and initiates the restore process. When software sets this bit to '1', the controller immediately sets DSTS.RSS to '1'. When the controller has finished the restore process, it sets DSTS.RSS to '0'.

Note: When read, this field always returns '0'.
</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>EWE</ipxact:name>
            <ipxact:description>EWE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>EU3S</ipxact:name>
            <ipxact:description>EU3S

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_12</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CME</ipxact:name>
            <ipxact:description>CEM Enable

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_14</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3ffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>18</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>USBSTS</ipxact:name>
          <ipxact:description>USB Status Register Bit Definitions

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>HCH</ipxact:name>
            <ipxact:description>HCH

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HSE</ipxact:name>
            <ipxact:description>HSE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0..</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>EINT</ipxact:name>
            <ipxact:description>Reset Value for EINT</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PCD</ipxact:name>
            <ipxact:description>Reset Value for PCD</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_7_5</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SSS</ipxact:name>
            <ipxact:description>Save State Status

This bit is similar to the USBSTS.SSS in host mode.

When the controller has finished the save process, it completes the command by setting DSTS.SSS to '0'.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSS</ipxact:name>
            <ipxact:description>Restore State Status 

This bit is similar to the USBSTS.RSS in host mode.

When the controller has finished the restore process, it completes the command by setting DSTS.RSS to '0'.
</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SRE</ipxact:name>
            <ipxact:description>Save/Restore Error

This bit is currently not supported. 
</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CNR</ipxact:name>
            <ipxact:description>Controller Not Ready (CNR) - RO 

Default = '1'. 

'0' = Ready and 

'1' = Not Ready. 

Software must not write to thes Doorbell or Operational register of the xHC, other than the USBSTS register, until CNR = '0'. This flag is set by the xHC after a Chip Hardware Reset and cleared when the xHC is ready to begin accepting register writes. This flag remains cleared ('0') until the next Chip Hardware Reset.  
</ipxact:description>
            <ipxact:bitOffset>11</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HCE</ipxact:name>
            <ipxact:description>Host Controller Error (HCE) - RO  

Default = 0. 

'0' = No internal xHC error conditions exist and '1' = Internal xHC error condition. This flag must be set to indicate that an internal error condition has been detected which requires software to reset and reinitialize the xHC. Refer to section 4.24.1 of the DesignWare Cores SuperSpeed USB 3.0 Controller Databookfor more information.</ipxact:description>
            <ipxact:bitOffset>12</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_13</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7ffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>19</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>PAGESIZE</ipxact:name>
          <ipxact:description>Page Size Register Bit Definitions

Use this register to enable or disable the reporting of specific USB Device Notification Transaction Packets being received.

A Notification Enable (Nx, where x = 0 to 15) flag is defined for each of the 16 possible device notification types. If a flag is set for a specific notification type, a Device Notification Event is generated when the respective notification packet is received. After reset, all notifications are disabled. Refer to section 6.4.2.7 of the DesignWare Cores SuperSpeed USB 3.0 Controller Databookfor more information.

This register is written as a Dword. Byte writes produce undefined results. 
</ipxact:description>
          <ipxact:addressOffset>'h8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>PAGE_SIZE</ipxact:name>
            <ipxact:description>PAGE_SIZE</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_16</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DNCTRL</ipxact:name>
          <ipxact:description>Device Notification Register Bit Definitions

For a description of this standard USB register field see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
          <ipxact:addressOffset>'h14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>N0_N15</ipxact:name>
            <ipxact:description>N0_N15

For a description of this standard USB register field see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_16</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>CRCR_LO</ipxact:name>
          <ipxact:description>CRCR_LO

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
          <ipxact:addressOffset>'h18</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>RCS</ipxact:name>
            <ipxact:description>RCS

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CS</ipxact:name>
            <ipxact:description>CS

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CA</ipxact:name>
            <ipxact:description>CA

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CRR</ipxact:name>
            <ipxact:description>CRR

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_5_4</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CMD_RING_PNTR</ipxact:name>
            <ipxact:description>CMD_RING_PNTR

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>26</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>CRCR_HI</ipxact:name>
          <ipxact:description>CRCR_HI</ipxact:description>
          <ipxact:addressOffset>'h1c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>CMD_RING_PNTR</ipxact:name>
            <ipxact:description>COMMAND_RING_POINTER

 Reading this field always returns '0'.

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCBAAP_LO</ipxact:name>
          <ipxact:description>DCBAAP_LO</ipxact:description>
          <ipxact:addressOffset>'h30</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_5_0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>6</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEVICE_CONTEXT_BAAP</ipxact:name>
            <ipxact:description>DEVICE_CONTEXT_BAAP

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3ffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>26</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCBAAP_HI</ipxact:name>
          <ipxact:description>DCBAAP_HI

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
          <ipxact:addressOffset>'h34</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DEVICE_CONTEXT_BAAP</ipxact:name>
            <ipxact:description>DEVICE_CONTEXT_BAAP</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>CONFIG</ipxact:name>
          <ipxact:description>Configure Register Bit Definitions

 This register is in the Aux Power well. It is only reset by platform hardware during a cold reset or in response to a Host Controller Reset (HCRST). The initial conditions of a port are described in section 4.19 of the DWC Cores SuperSpeed USB 3.0 Controller Databook.
</ipxact:description>
          <ipxact:addressOffset>'h38</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>MAXSLOTSEN</ipxact:name>
            <ipxact:description>MAXSLOTSEN

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>U3E</ipxact:name>
            <ipxact:description>U3 Entry Enable

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CIE</ipxact:name>
            <ipxact:description>Configuration Information Enable

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_10</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>22</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_Host_Cntrl_Port_Reg_Set</ipxact:name>
        <ipxact:description>USB3 Host Cntrl Port Reg Set Block</ipxact:description>
        <ipxact:baseAddress>'h420</ipxact:baseAddress>
        <ipxact:range>'h20</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:registerFile>
          <ipxact:name>PORTSC_20_REGS</ipxact:name>
          <ipxact:description>Host Controller Port register array set</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:range>0x10</ipxact:range>
          <ipxact:register>
            <ipxact:name>PORTSC_20</ipxact:name>
            <ipxact:description>Port Status and Control Register Bit Definitions

The PORTSC Register Access fails (Timeout) if the UTMI/ULPI clock is not running or one of the following bits is asserted.
 - PR
 - ORC</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>CCS</ipxact:name>
              <ipxact:description>CCS

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PED</ipxact:name>
              <ipxact:description>PED

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>1</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_2</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>2</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>OCA</ipxact:name>
              <ipxact:description>OCA

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>3</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PR</ipxact:name>
              <ipxact:description>PR
set_register_field_attribute DWC_usb3_map/DWC_usb3_block_Host_Cntrl_Port_Reg_Set/PORTSC_20_REGS/PORTSC_20/PR VolatileMemory 1

 Programming this field with random data will cause side effect. Bit Bash register testing is not recommended.</ipxact:description>
              <ipxact:bitOffset>4</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PLS</ipxact:name>
              <ipxact:description>PLS

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>5</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h5</ipxact:value>
                  <ipxact:mask>'hf</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PP</ipxact:name>
              <ipxact:description>PP

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>9</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h1</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PORTSPEED</ipxact:name>
              <ipxact:description>PORTSPEED

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>10</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PIC</ipxact:name>
              <ipxact:description>PIC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>14</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>2</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>LWS</ipxact:name>
              <ipxact:description>LWS

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>CSC</ipxact:name>
              <ipxact:description>CSC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>17</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PEC</ipxact:name>
              <ipxact:description>PEC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>18</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_19</ipxact:name>
              <ipxact:description>WRC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>19</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>OCC</ipxact:name>
              <ipxact:description>OCC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>20</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PRC</ipxact:name>
              <ipxact:description>PRC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.

Programming this field with random data will cause side effect. Bit Bash register testing is not recommended.</ipxact:description>
              <ipxact:bitOffset>21</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PLC</ipxact:name>
              <ipxact:description>PLC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>22</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_23</ipxact:name>
              <ipxact:description>Reserved

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>23</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>CAS</ipxact:name>
              <ipxact:description>Cold Attach Status

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>24</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>WCE</ipxact:name>
              <ipxact:description>WCE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>25</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>WDE</ipxact:name>
              <ipxact:description>WDE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>26</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>WOE</ipxact:name>
              <ipxact:description>WOE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>27</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_29_28</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>28</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h3</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>2</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DR</ipxact:name>
              <ipxact:description>Reset Value

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>30</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_31</ipxact:name>
              <ipxact:description>Reserved

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0. 

Programming this field with random data will cause side effect i.e. Register Access will fail (Timeout) if the pipe clock is not running or reset is asserted . Bit Bash register testing is not recommended.</ipxact:description>
              <ipxact:bitOffset>31</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>PORTPMSC_20</ipxact:name>
            <ipxact:description>USB3 Port Power Management Status and Control Register Bit Definitions

This register is in the Aux Power well. It is only reset by platform hardware during a cold reset or in response to a Host Controller Reset (HCRST). 

Programming this field with random data will cause side effect i.e. Register Access will fail (Timeout) if the pipe clock is not running or reset is asserted . Bit Bash register testing is not recommended.
</ipxact:description>
            <ipxact:addressOffset>'h4</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>L1S</ipxact:name>
              <ipxact:description>L1 Status (L1S) - RO. Default = 0. 

This field is used by software to determine whether an L1-based suspend request (LMP transaction) was successful, specifically: 

Value Meaning 0 Invalid - This field is ignored by software. 
 - 1 Success - Port successfully transitioned to L1 (ACK) 
 - 2 Not Yet - Device is unable to enter L1 at this time (NYET) 
 - 3 Not Supported -Device does not support L1 transitions (STALL) 
 - 4 Timeout/Error -Device failed to respond to the LPM Transaction or an error occurred 
 - 5-7 Reserved The value of this field is only valid when the port resides in the L0 or L1 state (PLS = '0' or '2'). 

Refer to section 4.23.5.1.1 for more information.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>3</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>RWE</ipxact:name>
              <ipxact:description>RWE Port Test Control

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>3</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>HIRD</ipxact:name>
              <ipxact:description>Host Initiated Resume Duration (HIRD) - RW. 

Default = '0'. System software sets this field to indicate to the recipient device how long the xHC will drive resume if it (the xHC) initiates an exit from L1. 

The HIRD value is encoded as follows: Value Description 0h 50us. (default) 1h 125us. 2h 200us.  Fh 1.175 ms. The value of 0000b is interpreted as 50us. Each incrementing value up adds 75us. to the previous value. 

For example, 0001b is 125us, 0010b is 200us and so on. Based on this rule, the maximum value resume drive time is at encoding value 1111b which represents 1.2ms. 

Note that the HIRD field is used by both software and hardware controlled LPM. 

Refer to section 4.23.5.1.1 for more information on HIRD use. Refer to Section 4.1 of the USB2 LPM spec for more information on the use of the HIRD field.  
</ipxact:description>
              <ipxact:bitOffset>4</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>L1DSLOT</ipxact:name>
              <ipxact:description>L1DSLOT

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>8</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>8</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>HLE</ipxact:name>
              <ipxact:description>Port Test Control

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_27_17</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>17</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h7ff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>11</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PRTTSTCTRL</ipxact:name>
              <ipxact:description>Port Test Control

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>28</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>PORTLI_20</ipxact:name>
            <ipxact:description>Port Link Info Register

Programming this field with random data will cause side effect i.e. Register Access will fail (Timeout) if the pipe clock is not running or reset is asserted . Bit Bash register testing is not recommended.</ipxact:description>
            <ipxact:addressOffset>'h8</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:field>
              <ipxact:name>reserved_31_0</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>PORTHLPMC_20</ipxact:name>
            <ipxact:description>USB2 Port Hardware LPM Control Register Bit Definitions

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:addressOffset>'hc</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>HIRDM</ipxact:name>
              <ipxact:description>Host Initiated Resume Duration Mode (HIRDM) 

- RWS. Default = 0h. 

Indicates which HIRD value must be used. 

The following are permissible values: 

          Value Description 

            0   Initiate L1 using HIRD only on timeout. 

(default)   1   Initiate L1 using HIRDD on timeout. 

                If rejected by device, initiate L1 using HIRD. 

           3-2  Reserved.  
</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>2</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>L1_TIMEOUT</ipxact:name>
              <ipxact:description>PORTHLPMC_20 L1_TIMEOUT.

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>2</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>8</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>HIRDD</ipxact:name>
              <ipxact:description>PORTHLPMC_20 HIRDD</ipxact:description>
              <ipxact:bitOffset>10</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_31_14</ipxact:name>
              <ipxact:description>Reserved

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>14</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h3ffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>18</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
        <ipxact:registerFile>
          <ipxact:name>PORTSC_30_REGS</ipxact:name>
          <ipxact:description>Host Controller Port 3.0 register array set</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h10</ipxact:addressOffset>
          <ipxact:range>0x10</ipxact:range>
          <ipxact:register>
            <ipxact:name>PORTSC_30</ipxact:name>
            <ipxact:description>Port Status and Control Register Bit Definitions

The PORTSC Register Access fails (Timeout) if the UTMI/ULPI clock is not running or one of the following bits is asserted.
 - PR
 - ORC
 - WPR</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>CCS</ipxact:name>
              <ipxact:description>CCS

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PED</ipxact:name>
              <ipxact:description>PED

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>1</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_2</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>2</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>OCA</ipxact:name>
              <ipxact:description>OCA

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>3</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PR</ipxact:name>
              <ipxact:description>PR
set_register_field_attribute DWC_usb3_map/DWC_usb3_block_Host_Cntrl_Port_Reg_Set/PORTSC_30_REGS/PORTSC_30/PR VolatileMemory 1

 Programming this field with random data will cause side effect. Bit Bash register testing is not recommended.</ipxact:description>
              <ipxact:bitOffset>4</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PLS</ipxact:name>
              <ipxact:description>PLS

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>5</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h5</ipxact:value>
                  <ipxact:mask>'hf</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PP</ipxact:name>
              <ipxact:description>PP

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>9</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h1</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable>false</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PORTSPEED</ipxact:name>
              <ipxact:description>PORTSPEED

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>10</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>4</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PIC</ipxact:name>
              <ipxact:description>PIC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>14</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>2</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>LWS</ipxact:name>
              <ipxact:description>LWS

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>CSC</ipxact:name>
              <ipxact:description>CSC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>17</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PEC</ipxact:name>
              <ipxact:description>PEC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>18</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>WRC</ipxact:name>
              <ipxact:description>WRC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>19</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>OCC</ipxact:name>
              <ipxact:description>OCC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>20</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PRC</ipxact:name>
              <ipxact:description>PRC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.

Programming this field with random data will cause side effect. Bit Bash register testing is not recommended.</ipxact:description>
              <ipxact:bitOffset>21</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>PLC</ipxact:name>
              <ipxact:description>PLC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>22</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>CEC</ipxact:name>
              <ipxact:description>CEC

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>23</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>CAS</ipxact:name>
              <ipxact:description>Cold Attach Status

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>24</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>WCE</ipxact:name>
              <ipxact:description>WCE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>25</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>WDE</ipxact:name>
              <ipxact:description>WDE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>26</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>WOE</ipxact:name>
              <ipxact:description>WOE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>27</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_29_28</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>28</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h3</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>2</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DR</ipxact:name>
              <ipxact:description>Reset Value

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>30</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>WPR</ipxact:name>
              <ipxact:description>Reset Value

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0. 

Programming this field with random data will cause side effect i.e. Register Access will fail (Timeout) if the pipe clock is not running or reset is asserted . Bit Bash register testing is not recommended.</ipxact:description>
              <ipxact:bitOffset>31</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>PORTPMSC_30</ipxact:name>
            <ipxact:description>USB3 Port Power Management Status and Control Register Bit Definitions

This register is in the Aux Power well. It is only reset by platform hardware during a cold reset or in response to a Host Controller Reset (HCRST). 

Programming this field with random data will cause side effect i.e. Register Access will fail (Timeout) if the pipe clock is not running or reset is asserted . Bit Bash register testing is not recommended.
</ipxact:description>
            <ipxact:addressOffset>'h4</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>U1_TIMEOUT</ipxact:name>
              <ipxact:description>U1_TIMEOUT

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>8</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>U2_TIMEOUT</ipxact:name>
              <ipxact:description>U2_TIMEOUT

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>8</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>8</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>FLA</ipxact:name>
              <ipxact:description>FLA

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_31_17</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>17</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h7fff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>15</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>PORTLI_30</ipxact:name>
            <ipxact:description>Port Link Info Register

Programming this field with random data will cause side effect i.e. Register Access will fail (Timeout) if the pipe clock is not running or reset is asserted . Bit Bash register testing is not recommended.</ipxact:description>
            <ipxact:addressOffset>'h8</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:field>
              <ipxact:name>LINK_ERROR_COUNT</ipxact:name>
              <ipxact:description>LINK_ERROR_COUNT

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_31_16</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>PORTHLPMC_30</ipxact:name>
            <ipxact:description>USB2 Port Hardware LPM Control Register Bit Definitions

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:addressOffset>'hc</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>reserved_31_0</ipxact:name>
              <ipxact:description>Reserved

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_Host_Cntrl_Runtime_Regs</ipxact:name>
        <ipxact:description>USB3 Host Cntrl Runtime Regs Block</ipxact:description>
        <ipxact:baseAddress>'h440</ipxact:baseAddress>
        <ipxact:range>'h1c</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:register>
          <ipxact:name>MFINDEX</ipxact:name>
          <ipxact:description>Microframe Index Register Bit Definitions

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>MICROFRAME_INDEX</ipxact:name>
            <ipxact:description>MICROFRAME_INDEX

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>14</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_14</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3ffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>18</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>RsvdZ</ipxact:name>
          <ipxact:description>RsvdZ

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_31_0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_Interrupter_Regs</ipxact:name>
        <ipxact:description>USB3 Interrupter Regs Block</ipxact:description>
        <ipxact:baseAddress>'h460</ipxact:baseAddress>
        <ipxact:range>'h20</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:registerFile>
          <ipxact:name>IMAN_REGS</ipxact:name>
          <ipxact:description>No description available.</ipxact:description>
          <ipxact:dim>1</ipxact:dim>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:range>0x20</ipxact:range>
          <ipxact:register>
            <ipxact:name>IMAN</ipxact:name>
            <ipxact:description>Interrupter Management Register Bit Definitions

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>IP</ipxact:name>
              <ipxact:description>IP Interrupt Pending

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>IE</ipxact:name>
              <ipxact:description>IE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>1</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_31_2</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>2</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h3fffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>30</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>IMOD</ipxact:name>
            <ipxact:description>Interrupter Moderation Register

The software may use this register to pace (or even out) the delivery of interrupts to the host CPU. 

This register provides a guaranteed inter-interrupt delay between interrupts asserted by the xHC, regardless of USB traffic conditions. 

To independently validate configuration settings, software may use the following algorithm to convert the inter-interrupt Interval value to the common 'interrupts/sec' performance metric.  
</ipxact:description>
            <ipxact:addressOffset>'h4</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>IMODI</ipxact:name>
              <ipxact:description>Interrupt Moderation Interval (IMODI) - RW. 

Default = '4000' (~1ms). Minimum inter-interrupt interval. The interval is specified in 250ns increments. 

A value of '0' disables interrupt throttling logic and interrupts is generated immediately if IP = '0', EHB = '0', and the Event Ring is not empty.  
</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'hfa0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>IMODC</ipxact:name>
              <ipxact:description>Interrupt Moderation Counter (IMODC) 

- RW. 

Default = undefined. Down counter. 

Loaded with the IMODI value whenever IP is cleared to '0', counts down to '0', and stops. The associated interrupt is signaled whenever this counter is '0', the Event Ring is not empty, the IE and IP flags = '1', and EHB = '0'. This counter may be directly written by software at any time to alter the interrupt rate.  
</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>ERSTSZ</ipxact:name>
            <ipxact:description>Event Ring Segment Table Size Register Bit Definitions

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:addressOffset>'h8</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>ERS_TABLE_SIZE</ipxact:name>
              <ipxact:description>ERS_TABLE_SIZE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_31_16</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>RsvdP</ipxact:name>
            <ipxact:description>RsvdP</ipxact:description>
            <ipxact:addressOffset>'hc</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:field>
              <ipxact:name>reserved_31_0</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>ERSTBA_LO</ipxact:name>
            <ipxact:description>ERSTBA_LO</ipxact:description>
            <ipxact:addressOffset>'h10</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>reserved_5_0</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h3f</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>6</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>ERS_TABLE_BAR</ipxact:name>
              <ipxact:description>ERS_TABLE_BAR</ipxact:description>
              <ipxact:bitOffset>6</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h3ffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>26</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>ERSTBA_HI</ipxact:name>
            <ipxact:description>ERSTBA_HI</ipxact:description>
            <ipxact:addressOffset>'h14</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>ERS_TABLE_BAR</ipxact:name>
              <ipxact:description>ERS_TABLE_BAR

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>ERDP_LO</ipxact:name>
            <ipxact:description>ERDP_LO

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:addressOffset>'h18</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>DESI</ipxact:name>
              <ipxact:description>DESI
 - For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h7</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>3</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>EHB</ipxact:name>
              <ipxact:description>HC OS Owned SemaphoreERS_TABLE_SIZEHC BIOS Owned Semaphore
 USB SMI Enable
 SMI on Host System Error Enable 
 - SMI on OS Ownership Enable
 - SMI on PCI Command Enable
 - SMI on BAR Enable
 - SMI on Event Interrupt
 - SMI on Host System Error
 - SMI on OS Ownership Change 
 - SMI on PCI Command
 - SMI on BAR 
 - Compatible Port Count
 - HC OS Owned Semaphore
 - HC BIOS Owned Semaphore
 - USB SMI Enable
 - SMI on Host System Error Enable 
 - SMI on OS Ownership Enable
 - SMI on PCI Command Enable
 - SMI on BAR Enable
 - SMI on Event Interrupt
 - SMI on Host System Error
 - SMI on OS Ownership Change 
 - SMI on PCI Command
 - SMI on BAR 
 - Compatible Port Count
</ipxact:description>
              <ipxact:bitOffset>3</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'h1</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>1</ipxact:bitWidth>
              <ipxact:volatile>true</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>ERD_PNTR</ipxact:name>
              <ipxact:description>ERD_PNTR

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>4</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hfffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>28</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
          <ipxact:register>
            <ipxact:name>ERDP_HI</ipxact:name>
            <ipxact:description>ERDP_HI</ipxact:description>
            <ipxact:addressOffset>'h1c</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>ERD_PNTR</ipxact:name>
              <ipxact:description>ERD_PNTR

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hffffffff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>32</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_Doorbell_Register</ipxact:name>
        <ipxact:description>USB3 Doorbell Reg Block</ipxact:description>
        <ipxact:baseAddress>'h480</ipxact:baseAddress>
        <ipxact:range>'h104</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:registerFile>
          <ipxact:name>DB_REGS</ipxact:name>
          <ipxact:description>No description available.</ipxact:description>
          <ipxact:dim>65</ipxact:dim>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:range>0x4</ipxact:range>
          <ipxact:register>
            <ipxact:name>DB</ipxact:name>
            <ipxact:description>Doorbell Register Bit Field Definitions

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.

Programming this field with random data will cause side effect i.e. Register Access will fail (Timeout) if the pipe clock is not running or reset is asserted . Bit Bash register testing is not recommended.
</ipxact:description>
            <ipxact:addressOffset>'h0</ipxact:addressOffset>
            <ipxact:size>32</ipxact:size>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:field>
              <ipxact:name>DB_TARGET</ipxact:name>
              <ipxact:description>DB_TARGET

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>0</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>8</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>reserved_15_8</ipxact:name>
              <ipxact:description>Reserved</ipxact:description>
              <ipxact:bitOffset>8</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                  <ipxact:mask>'hff</ipxact:mask>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>8</ipxact:bitWidth>
              <ipxact:access>read-only</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
            <ipxact:field>
              <ipxact:name>DB_STREAM_ID</ipxact:name>
              <ipxact:description>DB_STREAM_ID

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
              <ipxact:bitOffset>16</ipxact:bitOffset>
              <ipxact:resets>
                <ipxact:reset>
                  <ipxact:value>'h0</ipxact:value>
                </ipxact:reset>
              </ipxact:resets>
              <ipxact:bitWidth>16</ipxact:bitWidth>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:writeValueConstraint>
                <ipxact:writeAsRead>true</ipxact:writeAsRead>
              </ipxact:writeValueConstraint>
              <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
              <ipxact:reserved>0</ipxact:reserved>
            </ipxact:field>
          </ipxact:register>
        </ipxact:registerFile>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_int_RAM0</ipxact:name>
        <ipxact:description>USB3 internal RAM0 Register Block

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
        <ipxact:baseAddress>'h40000</ipxact:baseAddress>
        <ipxact:range>'h7ca</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:usage>memory</ipxact:usage>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_int_RAM1</ipxact:name>
        <ipxact:description>USB3 internal RAM1 Register Block

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
        <ipxact:baseAddress>'h80000</ipxact:baseAddress>
        <ipxact:range>'h44d</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:usage>memory</ipxact:usage>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_int_RAM2</ipxact:name>
        <ipxact:description>USB3 internal RAM2 Register Block</ipxact:description>
        <ipxact:baseAddress>'hc0000</ipxact:baseAddress>
        <ipxact:range>'h1183</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:usage>memory</ipxact:usage>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_HC_Extended_Capability_Register</ipxact:name>
        <ipxact:description>USB3 HC Extended Capability Register Block</ipxact:description>
        <ipxact:baseAddress>'h880</ipxact:baseAddress>
        <ipxact:range>'h10</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:register>
          <ipxact:name>USBLEGSUP</ipxact:name>
          <ipxact:description>USBLEGSUP</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>CAPABILITY_ID</ipxact:name>
            <ipxact:description>CAPABILITY_ID
set_register_field_attribute DWC_usb3_map/DWC_usb3_block_HC_Extended_Capability_Register/USBLEGSUP/CAPABILITY_ID RegisterResetValue 0x1

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NEXT_CAPABILITY_POINTER</ipxact:name>
            <ipxact:description>NEXT_CAPABILITY_POINTER

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HC_BIOS_OWNED</ipxact:name>
            <ipxact:description>HC_BIOS_OWNED SEMAPHORE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_23_17</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HC_OS_OWNED</ipxact:name>
            <ipxact:description>HC_OS_OWNED SEMAPHORE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_25</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3f</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>USBLEGCTLSTS</ipxact:name>
          <ipxact:description>USBLEGCTLSTS</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>USB_SMI_ENABLE</ipxact:name>
            <ipxact:description>USB_SMI_ENABLE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_3_1</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SMI_ON_HOST_E</ipxact:name>
            <ipxact:description>SMI_ON_HOST SYSTEM ERROR ENABLE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_12_5</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SMI_ON_OS_E</ipxact:name>
            <ipxact:description>SMI_ON_OS OWNERSHIP ENABLE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>13</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SMI_ON_PCI_E</ipxact:name>
            <ipxact:description>SMI_ON_PCI COMMAND ENABLE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SMI_ON_BAR_E</ipxact:name>
            <ipxact:description>SMI_ON_BAR ENABLE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>15</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SMI_ON_EVENT</ipxact:name>
            <ipxact:description>SMI_ON_EVENT INTERRUPT

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_19_17</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SMI_ON_HOST</ipxact:name>
            <ipxact:description>SMI_ON_HOST SYSTEM ERROR

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_28_21</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SMI_ON_OS</ipxact:name>
            <ipxact:description>SMI_ON_OS OWNERSHIP CHANGE

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>29</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SMI_ON_PCI</ipxact:name>
            <ipxact:description>SMI_ON_PCI COMMAND

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>30</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SMI_ON_BAR</ipxact:name>
            <ipxact:description>SMI_ON_BAR

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_xHCI_Supt_USB20_Prt_Cap</ipxact:name>
        <ipxact:description>USB3 xHCI Supported Protocol Capability (USB 2.0) Block</ipxact:description>
        <ipxact:baseAddress>'h890</ipxact:baseAddress>
        <ipxact:range>'h10</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:register>
          <ipxact:name>SUPTPRT2_DW0</ipxact:name>
          <ipxact:description>SUPTPRT2_DW0</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CAPABILITY_ID</ipxact:name>
            <ipxact:description>CAPABILITY_ID

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NEXT_CAPABILITY_POINTER</ipxact:name>
            <ipxact:description>NEXT_CAPABILITY_POINTER</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MINOR_REVISION</ipxact:name>
            <ipxact:description>MINOR_REVISION</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MAJOR_REVISION</ipxact:name>
            <ipxact:description>MAJOR_REVISION</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>SUPTPRT2_DW1</ipxact:name>
          <ipxact:description>Register SUPTPRT2_DW1</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>NAME_STRING</ipxact:name>
            <ipxact:description>NAME_STRING

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h20425355</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>SUPTPRT2_DW2</ipxact:name>
          <ipxact:description>xHCI Supported Protocol Capability_ Data Word 2

For a description of other register fields, see section 7.2 of the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
          <ipxact:addressOffset>'h8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>COMPATIBLE_PORT_OFFSET</ipxact:name>
            <ipxact:description>COMPATIBLE_PORT_OFFSET

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>COMPATIBLE_PORT_COUNT</ipxact:name>
            <ipxact:description>COMPATIBLE_PORT_COUNT

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HSO</ipxact:name>
            <ipxact:description>HSO</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>IHI</ipxact:name>
            <ipxact:description>IHI</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HLC</ipxact:name>
            <ipxact:description>Compatible Port Offset.  

Compatible Port Count

Refer to Table 7-3 in the DWC Cores SuperSpeed USB 3.0 Controller Databook.
</ipxact:description>
            <ipxact:bitOffset>19</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BLC</ipxact:name>
            <ipxact:description>BESL LPM Capability.  
When this bit is set to:  
 - 1: The ports described by this xHCI Supported Protocol Capability applies BESL timing to the BESL and BESLD fields of the PORTPMSC and PORTHLPMC registers. 
 - 0: The ports described by this xHCI Supported Protocol Capability applies HIRD timing to the BESL and BESLD fields of the PORTPMSC and PORTHLPMC registers.
</ipxact:description>
            <ipxact:bitOffset>20</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_24_21</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MHD</ipxact:name>
            <ipxact:description>Hub Depth

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PSIC</ipxact:name>
            <ipxact:description>PSIC</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>SUPTPRT2_DW3</ipxact:name>
          <ipxact:description>Register SUPTPRT2_DW3</ipxact:description>
          <ipxact:addressOffset>'hc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>PROTCL_SLT_TY</ipxact:name>
            <ipxact:description>Protocol Slot Type</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_5</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7ffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>27</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_xHCI_Supt_USB30_Prt_Cap</ipxact:name>
        <ipxact:description>USB3 xHCI Supported Protocol Capability (USB 3.0) Block</ipxact:description>
        <ipxact:baseAddress>'h8a0</ipxact:baseAddress>
        <ipxact:range>'h10</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:register>
          <ipxact:name>SUPTPRT3_DW0</ipxact:name>
          <ipxact:description>Register SUPTPRT3_DW0</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>CAPABILITY_ID</ipxact:name>
            <ipxact:description>CAPABILITY_ID

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NEXT_CAPABILITY_POINTER</ipxact:name>
            <ipxact:description>NEXT_CAPABILITY_POINTER

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h4</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MINOR_REVISION</ipxact:name>
            <ipxact:description>MINOR_REVISION

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MAJOR_REVISION</ipxact:name>
            <ipxact:description>MAJOR_REVISION

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h3</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>SUPTPRT3_DW1</ipxact:name>
          <ipxact:description>Register SUPTPRT3_DW1</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>NAME_STRING</ipxact:name>
            <ipxact:description>NAME_STRING

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h20425355</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>SUPTPRT3_DW2</ipxact:name>
          <ipxact:description>SUPTPRT3_DW2

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
          <ipxact:addressOffset>'h8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>COMPATIBLE_PORT_OFFSET</ipxact:name>
            <ipxact:description>COMPATIBLE_PORT_OFFSET

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h2</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>COMPATIBLE_PORT_COUNT</ipxact:name>
            <ipxact:description>COMPATIBLE_PORT_COUNT

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable>false</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>MHD</ipxact:name>
            <ipxact:description>Hub Depth

For a description of this standard USB register field, see the eXtensible Host Controller Interface for Universal Serial Bus (USB) Specification 3.0.
</ipxact:description>
            <ipxact:bitOffset>25</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PSIC</ipxact:name>
            <ipxact:description>PSIC</ipxact:description>
            <ipxact:bitOffset>28</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>SUPTPRT3_DW3</ipxact:name>
          <ipxact:description>SUPTPRT3_DW3</ipxact:description>
          <ipxact:addressOffset>'hc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>PROTCL_SLT_TY</ipxact:name>
            <ipxact:description>Protocol Slot Type</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_5</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7ffffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>27</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressBlock>
        <ipxact:name>DWC_usb3_block_Debug_Capability_Structure</ipxact:name>
        <ipxact:description>USB3 Debug Capability Structure Block</ipxact:description>
        <ipxact:baseAddress>'h8b0</ipxact:baseAddress>
        <ipxact:range>'h40</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:register>
          <ipxact:name>DCID</ipxact:name>
          <ipxact:description>DCID</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>CAPABILITY_ID</ipxact:name>
            <ipxact:description>CAPABILITY_ID</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'ha</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>NEXT_CAPABILITY_POINTER</ipxact:name>
            <ipxact:description>NEXT_CAPABILITY_POINTER</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DCERSTMAX</ipxact:name>
            <ipxact:description>DCERSTMAX</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'hf</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>5</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_21</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCDB</ipxact:name>
          <ipxact:description>Register DCDB</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_7_0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DBTARGET</ipxact:name>
            <ipxact:description>DBTARGET</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_16</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCERSTSZ</ipxact:name>
          <ipxact:description>DCERSTSZ</ipxact:description>
          <ipxact:addressOffset>'h8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ERS_TABLE_SIZE</ipxact:name>
            <ipxact:description>ERS_TABLE_SIZE</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_16</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCERSTBA_LO</ipxact:name>
          <ipxact:description>DCERSTBA_LO</ipxact:description>
          <ipxact:addressOffset>'h10</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_3_0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ERS_TABLE_BAR</ipxact:name>
            <ipxact:description>ERS_TABLE_BAR</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCERSTBA_HI</ipxact:name>
          <ipxact:description>Register DCERSTBA_HI</ipxact:description>
          <ipxact:addressOffset>'h14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ERS_TABLE_BAR</ipxact:name>
            <ipxact:description>ERS_TABLE_BAR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCERDP_LO</ipxact:name>
          <ipxact:description>DCERDP_LO</ipxact:description>
          <ipxact:addressOffset>'h18</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DESI</ipxact:name>
            <ipxact:description>DESI</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_3</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEQUEUE_POINTER</ipxact:name>
            <ipxact:description>DEQUEUE_POINTER</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCERDP_HI</ipxact:name>
          <ipxact:description>DCERDP_HI</ipxact:description>
          <ipxact:addressOffset>'h1c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DEQUEUE_POINTER</ipxact:name>
            <ipxact:description>DEQUEUE_POINTER</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCCTRL</ipxact:name>
          <ipxact:description>DCCTRL</ipxact:description>
          <ipxact:addressOffset>'h20</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DCR</ipxact:name>
            <ipxact:description>DCR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LSE</ipxact:name>
            <ipxact:description>LSE</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HOT</ipxact:name>
            <ipxact:description>HOT</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>HIT</ipxact:name>
            <ipxact:description>HIT</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToSet</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DRC</ipxact:name>
            <ipxact:description>DRC</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15_5</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7ff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>11</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEBUG_MAX_BURST_SIZE</ipxact:name>
            <ipxact:description>DEBUG_PROTOCOL</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'hf</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEVICE_ADDRESS</ipxact:name>
            <ipxact:description>DEVICE_ADDRESS</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>7</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DCE</ipxact:name>
            <ipxact:description>DCE</ipxact:description>
            <ipxact:bitOffset>31</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCST</ipxact:name>
          <ipxact:description>DCST</ipxact:description>
          <ipxact:addressOffset>'h24</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ER</ipxact:name>
            <ipxact:description>ER</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SBR</ipxact:name>
            <ipxact:description>SBR</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_23_2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3fffff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>22</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEBUG_PORT_NUMBER</ipxact:name>
            <ipxact:description>DEBUG_PORT_NUMBER</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCPORTSC</ipxact:name>
          <ipxact:description>Register DCPORTSC</ipxact:description>
          <ipxact:addressOffset>'h28</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>CCS</ipxact:name>
            <ipxact:description>CCS</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PED</ipxact:name>
            <ipxact:description>PED</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_3_2</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h3</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PR</ipxact:name>
            <ipxact:description>PR</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PLS</ipxact:name>
            <ipxact:description>PLS</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_9</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h1</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PORTSPEED</ipxact:name>
            <ipxact:description>PORTSPEED</ipxact:description>
            <ipxact:bitOffset>10</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_16_14</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>14</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CSC</ipxact:name>
            <ipxact:description>CSC</ipxact:description>
            <ipxact:bitOffset>17</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_20_18</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>18</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'h7</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>3</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PRC</ipxact:name>
            <ipxact:description>PRC</ipxact:description>
            <ipxact:bitOffset>21</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PLC</ipxact:name>
            <ipxact:description>PLC</ipxact:description>
            <ipxact:bitOffset>22</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CEC</ipxact:name>
            <ipxact:description>CEC</ipxact:description>
            <ipxact:bitOffset>23</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:volatile>true</ipxact:volatile>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:modifiedWriteValue>oneToClear</ipxact:modifiedWriteValue>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_31_24</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>24</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCCP_LO</ipxact:name>
          <ipxact:description>DCCP_LO</ipxact:description>
          <ipxact:addressOffset>'h30</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>reserved_3_0</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hf</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DCCPR</ipxact:name>
            <ipxact:description>DCCPR</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>28</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCCP_HI</ipxact:name>
          <ipxact:description>Register DCCP_HI</ipxact:description>
          <ipxact:addressOffset>'h34</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DCCPR</ipxact:name>
            <ipxact:description>DCCPR</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>32</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCDDI1</ipxact:name>
          <ipxact:description>Register DCDDI1</ipxact:description>
          <ipxact:addressOffset>'h38</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DBCPROTOCOL</ipxact:name>
            <ipxact:description>DBCPROTOCOL</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>reserved_15_8</ipxact:name>
            <ipxact:description>Reserved</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
                <ipxact:mask>'hff</ipxact:mask>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:writeValueConstraint>
              <ipxact:writeAsRead>true</ipxact:writeAsRead>
            </ipxact:writeValueConstraint>
            <ipxact:testable testConstraint="writeAsRead">true</ipxact:testable>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>VENDORID</ipxact:name>
            <ipxact:description>VENDORID</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DCDDI2</ipxact:name>
          <ipxact:description>Register DCDDI2</ipxact:description>
          <ipxact:addressOffset>'h3c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>PRODUCTID</ipxact:name>
            <ipxact:description>PRODUCTID</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DEVICEREV</ipxact:name>
            <ipxact:description>DEVICEREV</ipxact:description>
            <ipxact:bitOffset>16</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>16</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressUnitBits>8</ipxact:addressUnitBits>
    </ipxact:memoryMap>
  </ipxact:memoryMaps>
  <ipxact:model>
    <ipxact:views>
      <ipxact:view>
        <ipxact:name>RTL</ipxact:name>
        <ipxact:envIdentifier>:*Synthesis:</ipxact:envIdentifier>
        <ipxact:componentInstantiationRef>RTL</ipxact:componentInstantiationRef>
      </ipxact:view>
    </ipxact:views>
    <ipxact:instantiations>
      <ipxact:componentInstantiation>
        <ipxact:name>RTL</ipxact:name>
        <ipxact:description>Ulta Wideband Platform</ipxact:description>
        <ipxact:language strict="true">systemverilog</ipxact:language>
        <ipxact:moduleName>DWC_usb3</ipxact:moduleName>
        <ipxact:fileSetRef>
          <ipxact:localName>Hdl</ipxact:localName>
        </ipxact:fileSetRef>
      </ipxact:componentInstantiation>
    </ipxact:instantiations>
    <ipxact:ports>
      <ipxact:port>
        <ipxact:name>xm_arready</ipxact:name>
        <ipxact:description>AXI Master read address ready.
Indicates that the slave is ready to accept address and associated control signals.
 - 0: Slave not ready 
 - 1: Slave ready
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awready</ipxact:name>
        <ipxact:description>AXI Master write address ready. Indicates that slave is ready to accept address and associated control signals.
 - 0: Slave not ready 
 - 1: Slave ready
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_bid</ipxact:name>
        <ipxact:description>AXI Master write response identification tag.

Note: Currently, the AXI Master only requests ID 0.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_bmisc_info</ipxact:name>
        <ipxact:description>AXI Master Write Response Miscellaneous Information.
This signal is not currently used. Tie this signal to '0'.
Active State: N/A
Registered: N/A
Synchronous to: N/a
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_bresp</ipxact:name>
        <ipxact:description>AXI Master write response. Indicates status of write transaction.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_bvalid</ipxact:name>
        <ipxact:description>AXI Master write response valid. Indicates that valid write response is available.
 - 0: Write response not available 
 - 1: Write response available
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_csysreq</ipxact:name>
        <ipxact:description>AXI Master System low-power request from system clock controller for peripheral to enter low-power state.

Note: This feature is currently not supported and this input must be hard-wired to 0. (The value of 1 means non-active.)
Active State: Low
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_rdata</ipxact:name>
        <ipxact:description>AXI Master read data.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_rid</ipxact:name>
        <ipxact:description>AXI Master Read identification tag.

Note: Currently, the AXI Master only requests ID 0.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_rlast</ipxact:name>
        <ipxact:description>AXI Master read last. Indicates last transfer in read burst.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_rmisc_info</ipxact:name>
        <ipxact:description>AXI Master Read Response Miscellaneous Information.
This signal is not currently used. Tie this signal to '0'.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_rresp</ipxact:name>
        <ipxact:description>AXI Master read response. Indicates status of read transaction.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_rvalid</ipxact:name>
        <ipxact:description>AXI Master read valid.
Indicates that required read data is available and read transfer can complete.
 - 0: Read data not available 
 - 1: Read data available
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_wready</ipxact:name>
        <ipxact:description>AXI Master write ready. Indicates that slave can accept write data.
 - 0: Slave not ready 
 - 1: Slave ready
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_araddr</ipxact:name>
        <ipxact:description>AXI Master read address.
Gives initial address of read burst transaction.
Only start address of burst is provided, and control signals issued alongside address show how address is calculated for remaining transfers in burst.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_arburst</ipxact:name>
        <ipxact:description>AXI Master read burst.
Combined with size information, shows how address for each transfer within burst is calculated.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_arcache</ipxact:name>
        <ipxact:description>AXI Master read cache. For cache type bit assignments, see "Cache Type Bit Assignments" table in the Databook.

Note: All cache type bits are programmable using the GSBUSCFG0 register (see "GSBUSCFG0" in the Databook).
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_arid</ipxact:name>
        <ipxact:description>AXI Master read address identification tag for read address signals.

Note: Currently, the AXI Master only requests ID 0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_arlen</ipxact:name>
        <ipxact:description>AXI Master read burst length.
Gives exact number of transfers in burst; determines number of data transfers associated with the address.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>7</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_arlock</ipxact:name>
        <ipxact:description>AXI Master read lock.
Encoded value indicates whether the transfer is a normal, exclusive, or locked access.

Note: Currently the USB 3.0 Controller does not do atomic access. This output is always 0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_armisc_info</ipxact:name>
        <ipxact:description>AXI Master Read Request Miscellaneous Information.
This signal is not currently used. You can leave this signal unconnected.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_arprot</ipxact:name>
        <ipxact:description>AXI Master read protection.
Indicates normal, privileged, or secure protection level of transaction and whether the transaction is data access or instruction access.

Note: Currently only normal, non-secure, and data accesses are indicated.
This output signal is always 3'b010.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_arsize</ipxact:name>
        <ipxact:description>AXI Master read burst size. Indicates size of each transfer in burst.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_arvalid</ipxact:name>
        <ipxact:description>AXI Master read address valid.
When high, indicates read address and control information is valid and remains stable until arready is high.
 - 0: Address and Control information not valid 
 - 1: Address and Control information valid
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awaddr</ipxact:name>
        <ipxact:description>AXI Master write address. Specifies address of first transfer in write burst transaction.
Associated control signals used to determine addresses of remaining transfers in burst.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awburst</ipxact:name>
        <ipxact:description>AXI Master write burst. Combined with size information, shows how address for each transfer within burst is calculated.

Note: Currently only the INCR burst is used.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awcache</ipxact:name>
        <ipxact:description>AXI Master write cache.
For cache type bit assignments, see "Cache Type Bit Assignments" table in the Databook.

Note: All cache type bits are programmable using GSBUSCFG0 register (see "GSBUSCFG0" section in the Databook).
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awid</ipxact:name>
        <ipxact:description>AXI Master write address identification. Gives identification tag for write address signals.

Note: Currently, the AXI Master only requests ID 0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awlen</ipxact:name>
        <ipxact:description>AXI Master write burst length.
Specifies exact number of transfers in burst; determines number of data transfers associated with address.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>7</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awlock</ipxact:name>
        <ipxact:description>AXI Master write lock. Provides additional information about characteristics of transfer.

Note: Currently, the USB 3.0 Controller does not do atomic access. This output will always be 0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awmisc_info</ipxact:name>
        <ipxact:description>AXI Master Write Request Miscellaneous Information.
This signal is not currently used. You can leave this signal unconnected.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awprot</ipxact:name>
        <ipxact:description>AXI Master write protection. Indicates normal, privileged, or secure protection level of transaction and whether transaction is data access or instruction access.

Note: Currently only normal, non-secure, and data accesses are indicated. This output signal is always 3'b010.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awsize</ipxact:name>
        <ipxact:description>AXI Master write burst size. Indicates size of each transfer in burst. Byte lane strobes indicate exactly which byte lanes to update.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_awvalid</ipxact:name>
        <ipxact:description>AXI Master write address valid.
Indicates valid write address and control information are available. Address and control information remain stable until a ready signal is high.
 - 0: Address and Control information not available 
 - 1: Address and Control information available
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_bready</ipxact:name>
        <ipxact:description>AXI Master response ready. Indicates master can accept response information.
 - 0: Master not ready 
 - 1: Master ready
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_cactive</ipxact:name>
        <ipxact:description>AXI Master Clock active. Indicates that peripheral requires clock signal:
 - 1: Peripheral clock required
 - 0: Peripheral clock not required
Note: This feature is currently not supported, and this output is hard-wired to 1.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_csysack</ipxact:name>
        <ipxact:description>AXI Master Low-power request acknowledgement.
Indicates acknowledgement from a peripheral of a system low-power request.

Note: This feature is currently not supported, and this output is hard-wired to 1.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_rready</ipxact:name>
        <ipxact:description>AXI Master read ready.
Indicates that the master can accept read data and response information.
 - 0: Master not ready 
 - 1: Master ready
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_wdata</ipxact:name>
        <ipxact:description>AXI Master write data.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_wid</ipxact:name>
        <ipxact:description>AXI Master write identification tag of write data transfer.

Note: Currently, the AXI Master only requests ID 0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_wlast</ipxact:name>
        <ipxact:description>AXI Master write last. Indicates last transfer in write burst.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_wstrb</ipxact:name>
        <ipxact:description>AXI Master write strobes.
Indicates which byte lanes to update in memory.
One write strobe for each eight bits of write data bus. WSTRB[n] is associated with the following byte of MDATA:

MDATA[8n+7: 8n]
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>7</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xm_wvalid</ipxact:name>
        <ipxact:description>AXI Master write valid. Indicates valid write data and strobes are available.
 - 0: Write data and strobes not available 
 - 1: Write data and strobes available
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_araddr</ipxact:name>
        <ipxact:description>AXI Slave read address. Gives initial address of read burst transaction.
Only the start address of the burst is provided, and control signals issued alongside address show how the address is calculated for remaining transfers in the burst.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_arburst</ipxact:name>
        <ipxact:description>AXI Slave read burst.
Combined with size information, shows how address for each transfer within burst is calculated.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_arcache</ipxact:name>
        <ipxact:description>AXI Slave read cache.
Indicates bufferable, cacheable, read-through, and read-back attributes of transaction.
This feature is not supported. This input must be driven to 4'h0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_arid</ipxact:name>
        <ipxact:description>AXI Slave read address identification tag for read address signals.

Note: The AXI Slave processes only one ID request at a time. Only after completing the current ID data transfer, the AXI Slave processes the next ID request.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>5</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_arlen</ipxact:name>
        <ipxact:description>AXI Slave read burst length.
Gives exact number of transfers in burst; determines number of data transfers associated with the address.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>7</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_arlock</ipxact:name>
        <ipxact:description>AXI Slave read lock.
Encoded value indicates whether the transfer is a normal, exclusive, or locked access.
This feature is not supported. This input must be driven to 2'h0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_armisc_info</ipxact:name>
        <ipxact:description>Read request miscellaneous information

Note: This signal is not used.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_arprot</ipxact:name>
        <ipxact:description>AXI Slave read protection.
Indicates normal, privileged, or secure protection level of transaction and whether transaction is data access or instruction access.
This feature is not supported. This input must be driven to 3'h0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_arsize</ipxact:name>
        <ipxact:description>AXI Slave read burst size. Indicates size of each transfer in burst.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_arvalid</ipxact:name>
        <ipxact:description>AXI Slave read address valid.
When high, indicates read address and control information is valid and remains stable until arready is high.
 - 0: Address and Control information not valid 
 - 1: Address and Control information valid
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awaddr</ipxact:name>
        <ipxact:description>AXI Slave write address.
Specifies address of first transfer in write burst transaction. Associated control signals used to determine addresses of remaining transfers in burst.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awburst</ipxact:name>
        <ipxact:description>AXI Slave write burst.
Combined with size information, shows how address for each transfer within burst is calculated.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awcache</ipxact:name>
        <ipxact:description>AXI Slave write cache.
Indicates bufferable, cacheable, write-through, and write-back attributes of transaction.
This feature is not supported.
This input must be driven to 4'h0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awid</ipxact:name>
        <ipxact:description>AXI Slave write address identification.
Gives identification tag for write address signals.

Note: The AXI Slave processes only one ID request at a time.
Only after completing the current ID data transfer, the AXI Slave processes the next ID request.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>5</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awlen</ipxact:name>
        <ipxact:description>AXI Slave write burst length.
Specifies exact number of transfers in burst; determines number of data transfers associated with address.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>7</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awlock</ipxact:name>
        <ipxact:description>AXI Slave write lock.
Provides additional information about characteristics of transfer. This feature is not supported. This input must be driven to 2'b00 (normal access).
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awmisc_info</ipxact:name>
        <ipxact:description>Write request miscellaneous information

Note: This signal is not used.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awprot</ipxact:name>
        <ipxact:description>AXI Slave write protection.
Indicates normal, privileged, or secure protection level of transaction and whether transaction is data access or instruction access.
This feature is not supported. This input must be driven to 3'h0.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awsize</ipxact:name>
        <ipxact:description>AXI Slave write burst size.
Indicates size of each transfer in burst. Byte lane strobes indicate exactly which byte lanes to update.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awvalid</ipxact:name>
        <ipxact:description>AXI Slave write address valid.
Indicates valid write address and control information are available.
Address and control information remain stable until awready signal is high.
 - 0: Address and control information not available 
 - 1: Address and control information available
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_bready</ipxact:name>
        <ipxact:description>AXI Slave response ready. Indicates that the master can accept response information.
 - 0: Master not ready 
 - 1: Master ready
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_csysreq</ipxact:name>
        <ipxact:description>AXI Slave System low-power request from system clock controller for peripheral to enter low-power state.

Note: This feature is currently not supported and this input must be driven to 1. (A value of 1 means non-active.)
Active State: Low
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_rready</ipxact:name>
        <ipxact:description>AXI Slave read ready. Indicates master can accept read data and response information.
 - 0: Master not ready 
 - 1: Master ready
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_wdata</ipxact:name>
        <ipxact:description>AXI Slave write data.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>31</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_wid</ipxact:name>
        <ipxact:description>AXI Slave write identification tag of write data transfer.

Note: The AXI Slave processes only one ID request at a time.
Only after completing the current ID data transfer, the AXI Slave processes the next ID request.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>5</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_wlast</ipxact:name>
        <ipxact:description>AXI Slave write last. Indicates last transfer in write burst.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_wstrb</ipxact:name>
        <ipxact:description>AXI Slave write strobes.
Indicates which byte lanes to update in memory. One write strobe for each eight bits of write data bus.
WSTRB[n] is associated with the following byte of SDATA:

SDATA[8n+7: 8n]
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_wvalid</ipxact:name>
        <ipxact:description>AXI Slave write valid.
Indicates valid write data and strobes are available.
 - 0: Write data and strobes not available 
 - 1: Write data and strobes available
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_arready</ipxact:name>
        <ipxact:description>AXI Slave read address ready.
Indicates that slave is ready to accept address and associated control signals.
 - 0: Slave not ready 
 - 1: Slave ready
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awaddr_parerr</ipxact:name>
        <ipxact:description>AXI Slave write address parity error.

Note: Currently, this signal is hardwired to 0.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_awready</ipxact:name>
        <ipxact:description>AXI Slave write address ready.
Indicates that slave is ready to accept address and associated control signals.
 - 0: Slave not ready 
 - 1: Slave ready
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_bid</ipxact:name>
        <ipxact:description>AXI Slave write response identification tag.

Note: The AXI Slave processes only one ID request at a time.
Only after completing the current ID data transfer, the AXI Slave processes the next ID request.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>5</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_bmisc_info</ipxact:name>
        <ipxact:description>Write response miscellaneous information

Note: This signal is driven to zero.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_bresp</ipxact:name>
        <ipxact:description>AXI Slave write response. Indicates status of write transaction.
This signal indicates an error if the data phase ID does not match the address phase ID.
For example, if the AWID = 0 and the WID != 0, then the core responds with bresp slave error.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_bvalid</ipxact:name>
        <ipxact:description>AXI Slave write response valid. Indicates that valid write response is available.
 - 0: Write response not available 
 - 1: Write response available
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_cactive</ipxact:name>
        <ipxact:description>AXI Slave Clock active. Indicates that peripheral requires clock signal:.
 - 1: Peripheral clock required 
 - 0: Peripheral clock not required
Note: This feature is currently not supported and this output is hard-wired to 0.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_csysack</ipxact:name>
        <ipxact:description>AXI Slave Low-power request acknowledgment.
Indicates acknowledgment from peripheral of system low-power request.

Note: This feature is currently not supported and this output is hard-wired to 0.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_rdata</ipxact:name>
        <ipxact:description>AXI Slave read data.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>31</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_rid</ipxact:name>
        <ipxact:description>AXI Slave Read identification tag.

Note: The AXI Slave processes only one ID request at a time.
Only after completing the current ID data transfer, the AXI Slave will process the next ID request.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>5</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_rlast</ipxact:name>
        <ipxact:description>AXI Slave read last. Indicates last transfer in read burst.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_rmisc_info</ipxact:name>
        <ipxact:description>Read response miscellaneous information

Note: This signal is driven to zero.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_rresp</ipxact:name>
        <ipxact:description>AXI Slave read response.
Indicates status of read transaction.

 Note: Currently, the core always responds with xs_rresp = 0.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_rvalid</ipxact:name>
        <ipxact:description>AXI Slave read valid.
Indicates that required read data is available and read transfer can complete.
 - 0: Read data not available 
 - 1: Read data available
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xs_wready</ipxact:name>
        <ipxact:description>AXI Slave write ready. Indicates that slave can accept write data.
 - 0: Slave not ready 
 - 1: Slave ready
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_legacy_smi_bar_wr</ipxact:name>
        <ipxact:description>PCI Base Address register (BAR) write: one clock pulse.

The PCIe interface need to generate one clock pulse during PCIe Base Address register (BAR) write. Tie this low, if you are not using legacy support.
Active State: High
Registered: No
Synchronous to: Synchronous to bus_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_legacy_smi_pci_cmd_reg_wr</ipxact:name>
        <ipxact:description>PCI command register write: one clock pulse.

The PCIe interface needs to generate one clock pulse during PCIe command register write. Tie this low if you are not using Legacy support.
Active State: High
Registered: No
Synchronous to: bus_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_msi_enable</ipxact:name>
        <ipxact:description>This enables the pulse type interrupt signal (one bus clock cycle) 'interrupt' port instead of level-sensitive interrupt.
When interfacing to PCIe, this allows you to easily map 'interrupt' to MSI in the PCIe controller.

MSI can only be enabled in the Host mode. There is no MSI support in the Device mode yet.
So if the core is configured in the DRD mode, it can only use wire interrupt which is a level signal.
Active State: High
Registered: No
Synchronous to: N/A: Strap Signal
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_num_u2_port</ipxact:name>
        <ipxact:description>Number of USB2.0 Ports.

This signal overrides the 'DWC_USB3_NUM_U2_ROOT_PORTS synthesis configuration parameter.

This allows you, for example, to develop a chip with a 4-Port USB2.0 host and package it as only two USB2.0 ports in a board.
The upper two ports are not enabled. The 'Number of Ports' field of the HCSPARAMS1 register is controlled by this port.
The 'Number of Ports' indicates 'host_num_u3_ports + host_num_u2_port' value.

If you do not require the override feature, assign this port as follows:

assign host_num_u2_ports3:0] = 'DWC_USB3_NUM_U2_ROOT_PORTS; 

Notes: 
 - The valid value of host_num_u2_port is from 1 to `DWC_USB3_NUM_U2_ROOT_PORTS. Make sure that this signal is not set to 0. It must be set to have at least one USB2.0 port.
 - If the core is operated as an OTG or Device (for instance, PrtCapDir = 2'b11/2'b10), then only Port 0 (such as, one u2 port and one u3 port) is valid. Internal to the core, the host_num_u2_port/host_num_u3_port are forced to 1 when operating in OTG/Device mode.
Active State: High
Registered: No
Synchronous to: N/A: Strap Signal
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">0x1</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_num_u3_port</ipxact:name>
        <ipxact:description>Number of USB 3.0 SS Ports.

This signal overrides the 'DWC_USB3_NUM_U3_ROOT_PORTS synthesis configuration parameter.

This allows you, for example, to develop a chip with a 4-Port USB 3.0 SS host and package it as only two USB 3.0 SS ports in a board.
The upper two ports are not enabled.
The 'Number of Ports' field of the HCSPARAMS1 register is controlled by this port.
The 'Number of Ports' indicates 'host_num_u3_ports + host_num_u2_port' value.

If you do not require the override feature, assign this port as follows: 

assign host_num_u3_port[3:0] = 'DWC_USB3_NUM_U3_ROOT_PORTS; 

Notes: 
 - The valid value of host_num_u3_port is from 1 to `DWC_USB3_NUM_U3_ROOT_PORTS. Make sure that this signal is not set to 0. It must be set to have at least one USB3.0 SS port.
 - If the core is operated as an OTG or Device (such as, PrtCapDir = 2'b11), then only Port0 (for instance, one u2 port and one u3 port) is valid. Internal to the core, the host_num_u2_port/ host_num_u3_port will be forced to 1 when operating in OTG/Device mode. 
 - This signal is not present in USB 2.0-only mode.
Active State: High
Registered: No
Synchronous to: N/A: Strap Signal
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">0x1</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_port_power_control_present</ipxact:name>
        <ipxact:description>This port defines the bit [3] of Capability Parameters (HCCPARAMS).
Change the PPC value through the pin Port Power Control (PPC). This indicates whether the host controller implementation includes port power control.
 - 0: Indicates that the port does not have port power switches.
 - 1: Indicates that the port has port power switches.
Active State: High
Registered: No
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_u2_port_disable</ipxact:name>
        <ipxact:description>USB2.0 Port Disable control.
 - 0: Port Enabled 
 - 1: Port Disabled When '1', this signal stops reporting connect/disconnect events the port and keeps the port in disabled state.
This could be used for security reasons where hardware can disable a port irrespective of whether xHCI driver enables a port or not.

The 'Number of Ports' field of the HCSPARAMS1 register is not affected by this signal.

This signal should be either static (should not change during operation), or change only once from 0 to 1 during operation and stay at 1 after that.

Note: Port-0 (the first U2 port) must not be disabled if any other U2 port is operational.
Active State: High
Registered: No
Synchronous to: N/A: Strap Signal
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_u3_port_disable</ipxact:name>
        <ipxact:description>USB 3.0 SS Port Disable control.
 - 0: Port Enabled 
 - 1: Port Disabled 
This signal, when '1', stops reporting connect/disconnect events the port and keeps the port in disabled state.
This could be used for security reasons where hardware can disable a port irrespective of whether xHCI driver enables a port or not.

The 'Number of Ports' field of the HCSPARAMS1 register is not affected by this signal.

This signal should be either static (should not change during operation), or change only once from 0 to 1 during operation and stay at 1 after that.

Note: 
 - This signal is not present in USB 2.0-only mode.
 - The SuperSpeed Port0 (first SS port) must not be disabled if the other SuperSpeed ports are operational.
Active State: High
Registered: No
Synchronous to: N/A: Strap Signal
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>hub_port_overcurrent</ipxact:name>
        <ipxact:description>This is the per port Overcurrent indication of the root-hub ports:
 - 0: No Overcurrent 
 - 1: Overcurrent 
The lower bits are for USB 2.0 ports and the higher bits are for USB 3.0 SS ports:

hub_port_overcurrent[N-1:0] = { 

hub_port_overcurrent['DWC_USB3_NUM_U3_ROOT_PORTS-1:0], 

hub_port_overcurrent['DWC_USB3_NUM_U2_ROOT_PORTS-1:0]} 

The minimum required overcurrent duration is 3 suspend clock periods.

Note: In USB 2.0-only mode, only the bits corresponding to USB 2.0 ports are present.
For hub configurations:

The hub_port_overcurrent[0] (upstream port's bit) bit must be tied to '0'.
In hub level overcurrent mode (hub_overcurrent_ctrl=1), any overcurrent must be tied to all overcurrent bits except the bit 0.
Active State: High
Registered: No
Synchronous to: asynchronous signal
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>hub_port_perm_attach</ipxact:name>
        <ipxact:description>Indicates if the device attached to a downstream port is permanently attached or not.
 - 0: Not permanently attached 
 - 1: Permanently attached 
The lower bits are for USB2.0 ports and the higher bits are for USB 3.0 SS ports: 

hub_port_perm_attach[N-1:0] = { 

hub_port_perm_attach['DWC_USB3_NUM_U3_ROOT_PORTS-1:0], 

[hub_port_perm_attach['DWC_USB3_NUM_U2_ROOT_PORTS-1:0]} 

For hub configurations: 

This signal indicates if the device attached to a downstream port is permanently attached or not.
The hub_port_perm_attach[0] (upstream port's bit) must be tied to '0'.
Active State: High
Registered: No
Synchronous to: N/A: Strap Signal
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>xhc_bme</ipxact:name>
        <ipxact:description>This signal is used to disable the bus mastering capability of the xHC.
In a PCI system, it comes from the Bus Master Enable (BME) bit of the Device Control Register in the PCI Configuration register space.
 - 1'b0: Bus mastering capability is disabled. The host controller cannot use the bus master interface.
 - 1'b1: Bus mastering capability is enabled.
Note: 

In Host mode,
 - For a non-PCI system, the xhc_bme is always tied to 1'b1 for the core master to work.
 - For a PCI system, connect the BME register bit of the PCI to this xhc_bme input.
In Device mode, the xhc_bme can be any value, but it is recommended to tie this signal to 1.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_current_belt</ipxact:name>
        <ipxact:description>Current BELT Value.

This signal indicates the minimum value of all received BELT values and the BELT that is set by the Set LTV command. This signal is valid only in Host mode.
Active State: N/A
Registered: No
Synchronous to: ram_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>11</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_legacy_smi_interrupt</ipxact:name>
        <ipxact:description>SMI interrupt: active high.

The PCIe interface need to pass this SMI interrupt output.

No connect, if you do not need Legacy support
Active State: High
Registered: No
Synchronous to: Synchronous to bus_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>host_system_err</ipxact:name>
        <ipxact:description>Host System Error.

This signal indicates that a Host System Error has occurred as reflected in the USBSTS.HSE field.
This signal is asserted only if the USBCMD.HSEE field is set to '1'.
It can occur when the host controller encounters an 'Error' response in the AHB, the AXI, or the Native Master Bus.
When the USBSTS.HSE field is cleared by software, this signal is deasserted unless the master continues to assert its bus error output.
The typical software response to an HSE is to reset the core. For more details, refer to section 4.10.2.6 of the xHCI 1.0 specification.
Active State: High
Registered: Yes
Synchronous to: ram_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>hub_vbus_ctrl</ipxact:name>
        <ipxact:description>Port Power control for each downstream port.
 - 0: VBUS OFF 
 - 1: VBUS ON 
The lower bits are for USB2.0 ports and the higher bits are for USB 3.0 SS ports:

hub_vbus_ctrl[N-1:0] = {

hub_vbus_ctrl['DWC_USB3_NUM_U3_ROOT_PORTS-1:0],

hub_vbus_ctrl['DWC_USB3_NUM_U2_ROOT_PORTS-1:0]}

Note: In USB 2.0-only mode, only the bits corresponding to USB 2.0 ports are present.

For hub configurations:

Port Power control for each Downstream port. hub_vbus_ctrl[0] (upstream port's bit) must be unused.
Active State: High
Registered: No
Synchronous to: hub_vbus_ctrl[DWC_USB3_NUM_U2_ROOT_PORTS+:`DWC_USB3_NUM_U3_ROOT_PORTS] is synchronous to the mac3_clk and hub_vbus_ctrl[0+:DWC_USB3_NUM_U2_ROOT_PORTS] is synchronous to the wpc_clk (which is mac2_clk)
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_l1_suspend_n</ipxact:name>
        <ipxact:description>UTMI Suspend in L1.
This active low signal is asserted from the core indicating that the core is in Sleep (L1) state.
In sleep state, the PHY can use this signal to enter deep low power mode.
Deep low power mode is where the PHY is able to switch off its internal logic as well as the oscillator circuitry.
The PHY clock to core is switched off.

When this signal is asserted low, the UTMI PHY transitions to Deep Low-Power mode by
powering down its internal logic as well as the oscillator circuitry.
If this signal is de-asserted (high), the PHY returns to its normal operating state.

The core asserts this signal when it transitions to L1 (SLEEP) power state after a successful LPM transaction
and is waiting for a minimum TL1 token retry time of 50us.
This signal is deasserted when the power state exits the SLEEP (L1) state,
whether due to host-initiated resume or device-initiated remote wakeup.

Note: In device mode of operation, if a PHY does not support LPM, the normal utmi_suspend_n
and utmi_l1_suspend_n can be ANDed and connected to the PHY's SUSPENDM
as long as the PHY's wake up time is less than the HIRD_Thres maximum value, and the utmi_sleep_n can be ignored.
This signal is always present because LPM support is enabled by default.
It goes to de-asserted state (driven high)
when the LPM capability is not enabled in DCFG[22]. For details on
the connections in the host mode, see 'OVRLD_L1_SUSP_COM' register field.
Active State: Low
Registered: No
Synchronous to: Assertion is synchronous to mac2_clk and de-assertion is asynchronous (internal signal)
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_sleep_n</ipxact:name>
        <ipxact:description>UTMI Sleep.
The core asserts this active-low signal to indicate that the core is in the Sleep (L1) state,
and the PHY can use this signal to enter Shallow Low-Power mode in the Sleep state.
In Shallow Low-Power mode, the PHY can switch off some of its internal logic
but still provide a PHY clock output by keeping the oscillator circuitry alive.

Note that in the Host and DRD configurations, the controller assumes that when it asserts the utmi_sleep_n signal,
the UTMI PHY shuts down some of its internal blocks but still provides the PHY clock.
If the PHY turns off the clocks also, then it is recommended that you connect '1' to the utmi_sleep_n signal of the PHY
and leave the controller's output unconnected.
For the Synopsys PHY, in the Host mode operation, avoid assertion of this signal by setting
the L1_SUSP_THRLD_EN_FOR_HOST=1'b1 and HIRD/BESL&gt;=L1_SUSP_THRLD_FOR_HOST.

When this signal is asserted low, the UTMI PHY transitions to Shallow Low-Power mode by powering down necessary blocks.
When this signal is deasserted (high), the PHY returns to its normal operating state.

The core asserts this signal when it transitions to L1 (SLEEP) power state after a successful LPM transaction
and is waiting for a Minimum T&lt;sub&gt;L1token retry time&lt;/sub&gt; of 50us.
This signal is de-asserted when the power state exits the SLEEP (L1) state, due either to host-initiated resume or device-initiated remote wakeup.

Note: In device mode of operation, if a PHY does not support LPM, the normal utmi_suspend_n and utmi_l1_suspend_n can be ANDed
and connected to the PHY's SUSPENDM as long as the PHY's wake up time is less than the HIRD_Thres maximum value,
and the utmi_sleep_n can be ignored. This signal is always present because LPM support is enabled by default.
It goes to de-asserted state (driven high) when LPM Capability is not enabled in DCFG[22].
For details on the connections in the host mode, see 'OVRLD_L1_SUSP_COM' register field.
Active State: Low
Registered: No
Synchronous to: Assertion is synchronous to mac2_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>bus_filter_bypass</ipxact:name>
        <ipxact:description>Bus Filter Bypass. Disables the internal bus filters that are enabled by DWC_USB3_EN_BUS_FILTERS coreConsultant parameter.
This static signal is present only when DWC_USB3_EN_BUS_FILTERS is 1.
It is expected that this signal is set or reset at power-on reset and is not changed during the normal operation of the core.
The function of each bit is:
 - bus_filter_bypass[3]: Bypass the filter for utmiotg_iddig 
 - bus_filter_bypass[2]: Bypass the filters for utmisrp_bvalid and utmisrp_sessend
 - bus_filter_bypass[1]: Bypass the filter for pipe3_PowerPresent all U3 ports 
 - bus_filter_bypass[0]: Bypass the filter for utmiotg_vbusvalid all U2 ports 
In non-OTG Host-only mode, internal bus filters are not needed.
Therefore, bus_filter_bypass[3:0] must be connected to logic high value (4'b1111).

Values: 
 - 1'b0: Bus filter(s) enabled 
 - 1'b1: Bus filter(s) disabled (bypassed)
Active State: High
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>dft_en_bus_clk_gated</ipxact:name>
        <ipxact:description>At-Speed DFT control port that controls bus_clk_gated.

This signal is '0' by default.
Active State: High
Registered: No
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>dft_en_ram_clk_gated</ipxact:name>
        <ipxact:description>At-Speed DFT port that controls ram_clk_gated and ram_clk_gated_ram0.

This signal is '0' by default.
Active State: High
Registered: No
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>gp_in</ipxact:name>
        <ipxact:description>General Purpose Input Port; can be used as general purpose inputs.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>15</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pme_en</ipxact:name>
        <ipxact:description>Enable signal for the pme_generation.
Enable the core to assert pme_generation.

Refer to the description of pme_generation signal for details.
Active State: High
Registered: No
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>scan_mode</ipxact:name>
        <ipxact:description>Scan Mode Port.

This signal enables scan-mode bypass to improve scan coverage.

Values:
 - 1'b0: Scan mode bypass disabled 
 - 1'b1: Scan mode bypass enabled Controls the internally generated clocks and reset during scan mode for clean DFT.
When additional At-Speed DFT controls are enabled, it only controls a few flops which have internally generated reset/clock.
During scan-mode, this should be '1'.
Active State: High
Registered: No
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>gp_out</ipxact:name>
        <ipxact:description>General Purpose Output Port; can be used as general purpose outputs.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>15</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>interrupt</ipxact:name>
        <ipxact:description>Interrupt Line 

This signal interrupts the application to indicate the occurrence of an event needing application intervention.

This signal is used in both the device mode and the host mode.
In the host mode, it is a one-bus clock cycle pulse when host_msi_enable is 1, or a level signal when host_msi_enable is 0.
In the device mode, it is always a level signal.
In the DRD mode, host_msi_enable must be tied to 0, and it is a level signal.

Values:
 - 1'b0: Event interrupt disabled 
 - 1'b1: Event interrupt enabled
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>logic_analyzer_trace</ipxact:name>
        <ipxact:description>Logic Analyzer Trace. These are internal design signals that you can use for debug purposes.
Some of the signals are interface signals like PIPE, UTMI, ULPI, AXI, and AHB, and others are internal state machines and status information signals.
During chip bring-up, to debug functional issues, you can probe the interface signals for additional visibility.

Chip Debug Recommendation:
 - Check USB trace, driver log, register dump, and system interface (PICe/AXI/AHB) signals to isolate the problem.
 - Check the additional interface-related logic_analyzer_trace signals for further debugging.
 - For further assistance, open a SolvNet case and send the USB trace, driver log, register dump, and PCIe analyzer trace (if your system is PCIe) to Synopsys. Synopsys will analyze the information, and if needed, will request that you log additional logic_analyzer_trace signals.
For details on how to control this port to bring out different debug information, refer to "GDBGLSPMUX" section of the Databook.

For details on the selected signals, see the section "assign logic_analyzer_trace = " of the DWC_usb.v file.

Note: The mux select register loses its value when vcc_reset_n is asserted. To change this behavior, set the parameter DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT to 1. This detaches the mux register from vcc_reset_n which allows debugging across board resets and hibernation resets.
Active State: N/A
Registered: N/A (both combinational and registered)
Synchronous to: N/A (multiple clock domains)
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pme_generation</ipxact:name>
        <ipxact:description>PME# Generation.

This signal is used to generate a PME# (Power Management Event).

When the Run/Stop bit of the USB Command Register is cleared during USB suspend mode,
the core cannot generate an event and cannot assert a regular interrupt. In this case, the core asserts a
pme_generation signal to report any wakeup condition if pme_en is high.

If the system does not support PCI-like PME interface, then it must not clear the Run/Stop bit during USB suspend mode.
In this case, the core generates an event and asserts an interrupt when there is any wakeup event.

If the pme interface is not used, connect pme_en to zero and keep pme_generation unconnected.
This is a level signal that gets cleared when the software clears CSC, OCC and PLC bits in all the PORTSC registers.

In device mode, connect pme_en to zero and keep pme_generation unconnected.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>clk_gate_ctrl</ipxact:name>
        <ipxact:description>Clock gating control

This signal indicates the clock gating controls used for gating RAM and bus clocks.

Bit[0] is gating control for bus_clk, bit[1] is for ram_clk, and bit[2] is for ram_clk_u3_l2.

This output must be used only for debug purposes.
Active State: High
Registered: Yes
Synchronous to: The respective clocks
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>operational_mode</ipxact:name>
        <ipxact:description>Port capability direction

This signal defines the mode of operation of the controller. It directly reflects the value programmed in the bits [13:12] of the GCTL register.
Active State: High
Registered: Yes
Synchronous to: bus_clk_early
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram0_p1_rdata</ipxact:name>
        <ipxact:description>RAM&lt;N&gt; Port1 Read Data.
Provides read data from the RAM address specified by ramN_p1_addr.

Note: For a Hub configuration, 
 - 33-bit data width RAM0 and RAM1 are used.
 - Port-2 read data is not used.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ramN
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram1_p1_rdata</ipxact:name>
        <ipxact:description>RAM1 Port1 Read Data.
Provides read data from the RAM address specified by ram1_p1_addr.
For Hub 33-bit data width ram1 and RAM1 are used. Port-2 read data is not used in Hub configuration.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram1
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram2_p1_rdata</ipxact:name>
        <ipxact:description>RAM2 Port1 Read Data.
Provides read data from the RAM address specified by ram2_p1_addr.
For Hub 33-bit data width ram2 and RAM1 are used. Port-2 read data is not used in a Hub configuration.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram2
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram0_p1_addr</ipxact:name>
        <ipxact:description>RAM&lt;N&gt; Port1 RAM Address Bus.
Provides the address for a read or write operation.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ramN
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>10</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram0_p1_ce_n</ipxact:name>
        <ipxact:description>RAM&lt;N&gt; Port1 Chip Select.
Indicates that the RAM&lt;N&gt; is being accessed for a read or a write.
Active State: Low
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ramN
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram0_p2_addr</ipxact:name>
        <ipxact:description>RAM&lt;N&gt; Port2 RAM Address Bus.
Provides the address for a read or write operation.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ramN
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>10</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram0_p2_ce_n</ipxact:name>
        <ipxact:description>RAM&lt;N&gt; Port2 Chip Select.
Indicates that the RAM&lt;N&gt; is being accessed for a read or a write.
Active State: Low
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ramN
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram0_p2_wdata</ipxact:name>
        <ipxact:description>RAM&lt;N&gt; Port2 Write Data.
Provides data to be written to the RAM&lt;N&gt; address specified by ramn_p2_addr.

Note: For a Hub configuration, 
 - 33-bit data width RAM0 and RAM1 are used.
 - Port-1 Write data is not used.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ramN
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram0_p2_wr_n</ipxact:name>
        <ipxact:description>RAM&lt;N&gt; Port2 Write Enable. Qualifies ramN_p2_addr and ramN_p2_addr.

Note: For a Hub configuration, Port-1 write is not used.
Active State: Low
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ramN
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram1_p1_addr</ipxact:name>
        <ipxact:description>RAM1 Port1 RAM Address Bus. Provides the address for a read or write operation.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram1
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>10</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram1_p1_ce_n</ipxact:name>
        <ipxact:description>RAM1 Port1 Chip Select.
Indicates that the RAM is being accessed for a read or a write.
Active State: Low
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram1
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram1_p2_addr</ipxact:name>
        <ipxact:description>RAM1 Port2 RAM Address Bus.
Provides the address for a read or write operation.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram1
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>10</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram1_p2_ce_n</ipxact:name>
        <ipxact:description>RAM1 Port2 Chip Select.
Indicates that the RAM is being accessed for a read or a write.
Active State: Low
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram1
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram1_p2_wdata</ipxact:name>
        <ipxact:description>RAM1 Port2 Write Data.
Provides data to be written to the RAM address specified by ram1_p2_addr.
For Hub 33-bit data width ram1 and RAM1 are used. Port-1 Write data is not used in a Hub configuration.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram1
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram1_p2_wr_n</ipxact:name>
        <ipxact:description>RAM1 Port2 Write Enable.
Qualifies ram1_p2_addr and ram1_p2_addr. Port-1 write is not used in Hub configuration.
Active State: Low
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram1
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram2_p1_addr</ipxact:name>
        <ipxact:description>RAM2 Port1 RAM Address Bus.
Provides the address for a read or write operation.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram2
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>9</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram2_p1_ce_n</ipxact:name>
        <ipxact:description>RAM2 Port1 Chip Select.
Indicates that the RAM is being accessed for a read or a write.
Active State: Low
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram2
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram2_p2_addr</ipxact:name>
        <ipxact:description>RAM2 Port2 RAM Address Bus.
Provides the address for a read or write operation.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram2
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>9</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram2_p2_ce_n</ipxact:name>
        <ipxact:description>RAM2 Port2 Chip Select.
Indicates that the RAM is being accessed for a read or a write.
Active State: Low
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram2
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram2_p2_wdata</ipxact:name>
        <ipxact:description>RAM2 Port2 Write Data.
Provides data to be written to the RAM address specified by ram2_p2_addr.
For Hub 33-bit data width ram2 and RAM1 are used. Port-1 Write data is not used in Hub configuration.
Active State: High
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram2
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>63</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram2_p2_wr_n</ipxact:name>
        <ipxact:description>RAM2 Port2 Write Enable.
Qualifies ram2_p2_addr and ram2_p2_addr. Port-1 write is not used in Hub configuration.
Active State: Low
Registered: No
Synchronous to: ram_clk_gated/ram_clk_gated_ram2
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>debug</ipxact:name>
        <ipxact:description>Debug Port. For more details, see "Synopsys Test Environment Interface" section in the Databook.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>66</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>bigendian_gs</ipxact:name>
        <ipxact:description>Slave Big Endian Select (AHB/AXI/Native). Selects Big Endian mode for the SoC bus Slave.
 - 1'b0: Little Endian
 - 1'b1: Big Endian
Active State: High
Registered: No
Synchronous to: N/A (Strap signal)
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">zero</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>bus_clk_early</ipxact:name>
        <ipxact:description>SoC Bus Clock (AHB/AXI/Native). Clock from application bus. 

In host mode, depending on the host bandwidth required for your configuartion, you can use a bus clock frequency lower than the ram_clk requirements by programming GCTL[7:6]. For more details, refer to "Minimum Clock Frequencies: bus_clk, ram_clk" section in the Databook. The minimum bus_clk frequency that has been tested is 60MHz.

In device mode, when UTMI is running at 16-bit mode, the minimum frequency is 60 MHz and when UTMI/ULPI is running in 8-bit mode, then the minimum frequency can be up to 1 MHz. The maximum frequency depends on the technology. 

In device mode, ram_clk must be connected to pipe_clk when running the bus_clk lower than 125 MHz in SS mode or to ULPI/UTMI clock when running bus_clk lower than 60 MHz in USB 2.0 mode. 

The nominal frequency must meet the USB 3.0 maximum data rate of 4Gbs IN and OUT direction for concurrent IN and OUT operation.
For example, in device mode this needs to be a 125 MHz@32-bit AXI-bus when using 2-port RAM and 250 MHz when using single port RAM. 

In the case of a 4-port host with four SuperSpeed bus instances, this needs to be a 125 MHz@128-bit AXI-bus when using 2-port RAM
and 250 MHz when using single port RAM. This nominal frequency recommendation is not taking into consideration other bus masters in your SoC.

This signal is used by USB 2.0/3.0.

Note: For native master and slave, all signals are sampled on the rising edge of clock.

When Hibernation is enabled:

This signal is also the primary clock used by the non-sticky modules after reset.
The core applies its own reset to the non-sticky modules asynchronously with vcc_reset_n and deasserts it synchronously with the first rising edge of bus_clk.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:drivers>
            <ipxact:driver>
              <ipxact:clockDriver>
                <ipxact:clockPeriod>8</ipxact:clockPeriod>
                <ipxact:clockPulseOffset>0</ipxact:clockPulseOffset>
                <ipxact:clockPulseValue>1</ipxact:clockPulseValue>
                <ipxact:clockPulseDuration>4</ipxact:clockPulseDuration>
              </ipxact:clockDriver>
            </ipxact:driver>
          </ipxact:drivers>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">hclk</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>bus_clken_gm</ipxact:name>
        <ipxact:description>Master Interface Clock Enable (AHB/AXI/Native). Allows slower operation on the bus.
This signal is typically useful in CPU applications, where the CPU, for example, can run at 400 MHz and the bus can run at 200 MHz.

This pin is reserved for future use. Tie to 1'b1.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">one</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>bus_clken_gs</ipxact:name>
        <ipxact:description>Slave Interface Clock Enable (AHB/AXI/Native). Allows slower operation on the bus.
Typically useful in CPU applications, where the CPU, for example, can run at 400 MHz and the bus can run at 200 MHz.

This pin is reserved for future use. Tie to 1'b1.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">one</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>fladj_30mhz_reg</ipxact:name>
        <ipxact:description>HS Jitter Adjustment.
Indicates the correction required to accommodate mac3 clock and utmi clock jitter to measure 125 's duration.

With fladj_30mhz_reg tied to zero, the high speed 125us micro-frame is counted for 123933ns.
You must program the value in terms of high speed bit times in a 30 MHz cycle.
The default value that must be driven is 32 (assuming 30 MHz perfect clock).

fladj_30mhz_reg connects to the FLADJ register defined in the xHCI spec in the PCI configuration space.
Each count is equal to 16 high speed bit times.
By default, when this register is set to 32, it gives a 125us interval.

Now, based the clock accuracy you can decrement the count or increment the count to get the 125 us uSOF window.
For non-PCI systems, it is recommended that this strap is connected to a register that can be controlled by software.
This strap is used in device mode also.
If device only mode is implemented, it is recommended to tie this input to 'd32.

You can override this value using the register GFLADJ in case this input signal is tied to a hardcoded value and must be changed post-silicon.

For details how to program this register, refer to "GFLADJ".

Default Value: Strap Value
Active State: No
Registered: N/A
Synchronous to: bus_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>5</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ref_clk</ipxact:name>
        <ipxact:description>Reference Clock. 

The ref_clk input generates the ITP counter when the UTMI/ULPI PHY are in the suspended state.
This clock exists as an input in the Host and DRD/OTG configuration. The maximum frequency of this clock is 125 MHz.
The minimum frequency is 16.129 MHz.
This clock must meet the accuracy requirement of 50 ppm. For more details how to program the core with ref_clk frequency,
refer to GUCTL.REFCLKPER in "GUCTL" section of the Databook.
For more details how to enable the ITP generation based the ref_clk counter, refer to GCTL.SOFITPSYNC in "GCTL" section of the Databook.

If GFLADJ.GFLADJ_REFCLK_LPM_SEL is selected, the SOF and ITP counters are generated off of ref_clk.

In this mode of operation, the ref_clk frequencies supported are 16/17/19.2/20/24/39.7/40MHz frequencies.
For more information enabling this mode, see "GFLADJ" section in the Databook.

If you never use GCTL.SOFITPSYNC feature or the GFLADJ.GFLADJ_REFCLK_LPM_SEL feature,
the minimum frequency for the ref_clk can be as low as 32KHz.

For SSIC configuration (DWC_USB3_NUM_SSIC_PORTS != 0), this clock is used as TxCfgClk and RxCfgClk the RMMI CTRL interface.
Therefore, this clock exists in device configuration also. The ref_clk needs to be within 52 MHz for SSIC configuration.
This clock is required to be always running for the SSIC host mode.

For SSIC device mode (when coreConsultant parameter DWC_USB3_MODE =0), if the GUSB3RMMICTL[17] register bit is 1,
then the ref_clk can be gated if the ssic_soc_pa_clk_suspend_n is asserted. If the clock is gated, the clock needs to be stopped (set to 1'b0) within a maximum of 16 ssic_soc_pa_clk cycles from the SoC when the ssic_soc_pa_clk_suspend_n is asserted.
The clock needs to be restarted when the ssic_soc_pa_clk_suspend_n is de-asserted within a maximum period of 8 ms.

Note: The ref_clk clock does not have any direct relationship with RX_RefClk defined in RMMI signaling interface
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:drivers>
            <ipxact:driver>
              <ipxact:clockDriver>
                <ipxact:clockPeriod>8</ipxact:clockPeriod>
                <ipxact:clockPulseOffset>0</ipxact:clockPulseOffset>
                <ipxact:clockPulseValue>1</ipxact:clockPulseValue>
                <ipxact:clockPulseDuration>4</ipxact:clockPulseDuration>
              </ipxact:clockDriver>
            </ipxact:driver>
          </ipxact:drivers>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>suspend_clk</ipxact:name>
        <ipxact:description>Suspend Clock

The USB3 suspend_clk input replaces pipe3_rx_pclk as the clock source to a small part of the USB3 core that operates
when the SS PHY is in its lowest power state (P3) and therefore not providing a clock.
The suspend_clk drives the mac3_clk, pipe3_mx_rx_pclk, pipe3_mx_tx_pclk during suspend.
The maximum frequency of the internally divided suspend clock is 125 MHz. The minimum frequency is 32 KHz.
For suspend clock accuracy requirement, refer to GCTL[31:19] in the "GCTL" section of the Databook. 

Note that this signal is not present in USB 2.0-only mode, if the hibernation and ADP features are disabled.

When Hibernation is enabled:

This is a minimum 32 kHz, maximum 200 kHz clock that is provided to the PMU and the core.
In the PMU, it is used to filter out glitches from the PHY, time PIPE3 receiver detection, and to set PORTSC bits while in hibernation.
In the core, it is used to allow the sticky state to be restored before the bus_clk, USB 2.0 PHY clock, and USB 3.0 PHY clock are available.

Note: When Hibernation is enabled, 
 - Suspend clock must be always running (even in USB 2.0 mode).
 - When PMU filters are enabled (DWC_USB3_EN_PMU_FILTER=1), the maximum suspend_clk frequency is only 200kHz because the suspend_clk is used to filter glitches from the PHY interfaces. A pulse is considered to be a glitch if it is less than 2.5us long (derived from USB 2.0). Therefore, sampling a signal on two consecutive rising edges of a 200kHz clock guarantees that the signal is stable for more than 2.5us.
 - When PMU filters are disabled (DWC_USB3_EN_PMU_FILTER=0), the suspend_clk frequency may be faster (up to 30MHz).
Active State: High
Registered: Yes
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:drivers>
            <ipxact:driver>
              <ipxact:clockDriver>
                <ipxact:clockPeriod>8</ipxact:clockPeriod>
                <ipxact:clockPulseOffset>0</ipxact:clockPulseOffset>
                <ipxact:clockPulseValue>1</ipxact:clockPulseValue>
                <ipxact:clockPulseDuration>4</ipxact:clockPulseDuration>
              </ipxact:clockDriver>
            </ipxact:driver>
          </ipxact:drivers>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>vcc_reset_n</ipxact:name>
        <ipxact:description>Active Low Core Reset (AHB/AXI/Native). Active low reset for the DWC_usb3 core which:
 - clears the poll_lfps_once flag in the LTSSM which is used to detect whether a SS polling failure leads the link to enter compliance mode or not;
 - applies reset to the 2.0 and 3.0 PHYs;
 - clears the logic analyzer MUX register.
It is asynchronously asserted and deasserted, and internally synchronized.

In a two power-rail configuration (hibernation feature enabled), this is the reset for the Vcc power domain, similar to the PERST# in PCIe.
The PMUs restore the sticky state when this signal is deasserted. 
vcc_reset_n signal has two behaviors depending whether Hibernation is enabled or not.
 - Hibernation Off: vcc_reset_n resets DWC_usb3 core and PHYs and Vaux_reset_n is not used.
 - Hibernation On: vcc_reset_n resets DWC_usb3 core and vaux_reset_n (along with vcc_reset_n) resets DWC_usb3 core and PHYs.
For more information vaux_reset_n, refer to the "Hibernation" chapter in the Databook.

When Hibernation is enabled and vaux_reset_n is de-asserted:

This signal is asserted asynchronously by the power controller when the core enters D3.  It is de-asserted asynchronously by the power controller when the core exits D3, either due to a PME or due to software-initiated wakeup, and Vcc is valid.  Sticky bits are retained by the PMU and the PHYs are not reset. The power controller must assert this reset at least 1 suspend_clk cycle after the core enters D3 to allow the PMUs time to start controlling the PHYs.

When Hibernation is not enabled, or when Hibernation is enabled and vaux_reset_n is asserted:

This signal is driven to the same value as vaux_reset_n to perform a cold reset, which resets the entire core including the sticky bits and the PHYs. It may be asserted and de-asserted asynchronously.
Active State: Low
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">hresetn</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram_clk_gated</ipxact:name>
        <ipxact:description>RAM Clock Gated (for RAM1 and RAM2). This is the input clock for RAM1 and RAM2.
If clock gating is enabled, this clock is gated when the USB is in low power mode and the core (except the host-mode periodic scheduling logic) is idle.

In the device mode, ram_clk_gated is identical to ram_clk_gated_ram0.
In the host mode, if there are periodic EPs, sometimes ram_clk_gated is gated but ram_clk_gated_ram0 is active so that the core can access the cache RAM to decide when to schedule the next periodic transaction.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ram_clk_gated_ram0</ipxact:name>
        <ipxact:description>RAM Clock Gated (for RAM0). This is the input clock for RAM0. If clock gating is enabled, this clock is gated when the USB is in low power mode and the core is idle.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>usb2phy_reset</ipxact:name>
        <ipxact:description>USB 2.0 PHY Reset. USB 2.0 PHY Reset Used by USB 2.0
Active State: High
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmiotg_dmpulldown</ipxact:name>
        <ipxact:description>D' Pull-down Resistor Enable. Enables the 15 KW pull-down resistor on the D' line.
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmiotg_dppulldown</ipxact:name>
        <ipxact:description>D+ Pull-down Resistor Enable. Enables the 15 KW pull-down resistor the D+ line.
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_clk</ipxact:name>
        <ipxact:description>UTMI Clock. Receives the 30-, 60-, or 48-MHz clock supplied by the High Speed UTMI+ PHY.
You must enable this clock when DWC_USB3_HSPHY_INTERFACE is set to a value of 1 or 3.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:drivers>
            <ipxact:driver>
              <ipxact:range>
                <ipxact:left>0</ipxact:left>
                <ipxact:right>0</ipxact:right>
              </ipxact:range>
              <ipxact:clockDriver clockName="utmi_clk_0">
                <ipxact:clockPeriod>16.66</ipxact:clockPeriod>
                <ipxact:clockPulseOffset>0</ipxact:clockPulseOffset>
                <ipxact:clockPulseValue>1</ipxact:clockPulseValue>
                <ipxact:clockPulseDuration>8.33</ipxact:clockPulseDuration>
              </ipxact:clockDriver>
            </ipxact:driver>
          </ipxact:drivers>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_hostdisconnect</ipxact:name>
        <ipxact:description>Peripheral Disconnect Indicator to Host.
Indicates that the USB transceiver has detected a disconnect condition the cable.
 - This signal is valid only when utmiotg_dppulldown and utmiotg_dmpulldown are sampled asserted.
 - When utmiotg_dppulldown and utmiotg_dmpulldown are not sampled asserted, then the behavior of utmi_hostdisconnect is undefined. 
Connection: 
 - No peripheral connected: signal remains asserted.
 - Peripheral connected: signal de-asserted.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_linestate</ipxact:name>
        <ipxact:description>Line State Indicator. Indicates the current state of the two USB data signals:
 - D+ (utmi_line_state[0]).
 - D' (utmi_line_state[1]). 
This signal is combinational when the clock is not available (in Suspend state), but otherwise is a registered signal.

Values: 
 - 2'b00: SE0 
 - 2'b01: J 
 - 2'b10: K 
 - 2'b11: SE1
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_rx_data</ipxact:name>
        <ipxact:description>UTMI Receive Data. 8- or 16-bit data received from the PHY.
The low and high bytes are asserted valid by the utmi_rxvalid and utmi_rxvalidh signals, respectively.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>15</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_rxactive</ipxact:name>
        <ipxact:description>UTMI Receive Active.
Indicates that the PHY has detected SYNC and is active.
This signal is deasserted after a bit stuff error or when an EOP is detected.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_rxerror</ipxact:name>
        <ipxact:description>UTMI Receive Error. Indicates that the PHY has detected a receive error.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">zero</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_rxvalid</ipxact:name>
        <ipxact:description>UTMI Receive Data Valid, Low Byte.
Indicates that utmi_rx_data[7:0] contains valid data.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_rxvalidh</ipxact:name>
        <ipxact:description>UTMI Receive Data Valid, High Byte.
Indicates that utmi_rx_data[15:8] contains valid data.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
            <snps:attribute name="SimTieOff">zero</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_txready</ipxact:name>
        <ipxact:description>UTMI Transmit Data Ready.
Indicates that the PHY accepted the current transmit data and is ready for the next packet the utmi_tx_data bus.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmiotg_vbusvalid</ipxact:name>
        <ipxact:description>Vbus Valid. Indicates if the voltage Vbus is valid for Host and A-Device operation.
The comparator thresholds are:
 - 1'b0: Vbus &lt; 4.4 V 
 - 1'b1: Vbus &gt; 4.75 V 
This signal must be a filtered signal if DWC_USB3_EN_BUS_FILTERS is chosen as 0.
It must be the same as pipe3_PowerPresent.
This input must be driven in all non-peripheral (host) modes if DWC_USB3_HSPHY_INTERFACE is chosen as UTMI.

In non-OTG Host-only mode, this signal must be connected to logic high value of 1'b1.

For complete usage, refer to "Integrating the Core with the PHY" section in the DWC SuperSpeed USB 3.0 Controller User Guide.
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmisrp_bvalid</ipxact:name>
        <ipxact:description>BVALID: Session valid for Peripheral.
Indicates if the voltage Vbus is valid for peripheral and B-Device session.
The comparator thresholds are:
 - 1'b0: Vbus &lt; 0.8 V 
 - 1'b1: Vbus &gt;= 4 V 
This signal must be a filtered signal if DWC_USB3_EN_BUS_FILTERS is chosen as 0.

This input must be driven in all peripheral (non-host) modes when DWC_USB3_HSPHY_INTERFACE is chosen as UTMI.

In Non-OTG Device-only mode, this is used as power-present.

Note: For DWC_usb3 version 1.72a and earlier, the utmisrp_bvalid input was not present.

For complete usage, refer to "Integrating the Core with the PHY" section in the DWC SuperSpeed USB 3.0 Controller User Guide.
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_fsls_low_power</ipxact:name>
        <ipxact:description>PHY Low-Power Clock Select.
Selects either 480- or 48-MHz Low-Power mode for the PHY.
Typically in FS and LS modes, the PHY can operate a 48-MHz clock to save power.

Values:
 - 1'b0: 480-MHz Internal PLL clock 
 - 1'b1: 48-MHz External clock 
Clocks: 
 - Using a 48-MHz clock, the UTMI interface operates at 48 MHz in FS and LS modes.
 - Using a 480-MHz clock, the UTMI interface operates at either 60 MHz for 8-bit data mode, or 30 MHz for 16-bit data mode.
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_fslsserialmode</ipxact:name>
        <ipxact:description>PHY Interface Mode Select. Indicates which PHY interface is used to transfer the FS and LS packets.

Values:
 - 1'b0: FS and LS packets are transferred through the parallel interface 
 - 1'b1: FS and LS packets are transferred through the serial interface.
This signal is tied low to select the parallel interface.
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_l1_suspend_com_n</ipxact:name>
        <ipxact:description>Common L1 suspend.

For device mode, this signal is the same as inverted utmi_l1_suspend_n[0].

For the OTG mode of operation, it is the same as for host mode operation, but depends only on Port0 of SS and Port0 of non-SS connection.

For host mode, this signal is asserted (low) if any of the following conditions is met:  
 - Any of the host ports (either 3.0 or 2.0 ports) is not suspended. (In this case, for the USB 3.0 port, suspend is equivalent to P3; for the USB 2.0 port, it is L1/L2 Suspend).
 - Hardware LPM is enabled.
For host mode, this signal is high if all of the following conditions are met: 
 - All the USB 2.0 ports are in L1/L2 suspend (or in disconnected state if `DWC_USB3_SUSPEND_ON_DISCONNECT_EN is high) with at least one port in L1 suspend/sleep state 
 - GUSB2PHYCFGn.EnblSlpM is 1 for all the ports 
 - All the SS PHYs are in P3 
 - Hardware LPM is not enabled 
Note: 
 - The polarity of this signal is different than the utmi_l1_suspend_n signal.
 - In OTG and host mode, for details the exceptions to the dependency SS port and USB 2.0 HW LPM, based GCTL.SOFITPSYNC and GFLADJ.GFLADJ_REF_CLK_LPM_SEL, see 'SOFITPSYNC' and 'GFLADJ_REFCLK_LPM_SEL'.
Active State: N/A
Registered: No
Synchronous to: Asynchronous
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_opmode</ipxact:name>
        <ipxact:description>UTMI Operating Mode.
The DWC_usb3 core drives this signal to select the UTMI mode.

Values: 
 - 2'b00: Normal operation 
 - 2'b01: Non-driving 
 - 2'b10: Disable bit stuffing and NRZI encoding
 - No other values are supported
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_suspend_com_n</ipxact:name>
        <ipxact:description>UTMI common Suspend.

For device mode of operation, this signal is same as inverted utmi_suspend_n[0].
For OTG mode of operation, it is the same as for host mode operation, but depends only on Port0 of SS and Port0 of non-SS connection.
For host mode, this signal is asserted (low) if either of the following conditions is met:
 - Any of the host ports (either 3.0 or 2.0 ports) is not suspended (in this case, for the USB 3.0 port, suspend is equivalent to P3; for the USB 2.0 port, it is either L2 suspend or disconnected state if DWC_USB3_SUSPEND_ON_DISCONNECT_EN is high). The dependency on the USB 3.0 ports is nullified if the GCTL[10] bit or GFLADJ[23] bit is set.
 - Hardware LPM is enabled. The dependency hardware LPM is nullified if the GFLADJ[23] bit is set.
For host mode, this signal is high if all of the following conditions are met:
 - All the ports are L2 suspended (or disconnected if DWC_USB3_SUSPEND_ON_DISCONNECT_EN is 1).
 - GUSB2PHYCFGn.SusPHY is 1 for all the ports.
 - All the SS PHYs are in P3. The dependency of the USB 3.0 ports is nullified if the GCTL[10] or GFLADJ[23] bit is set.
 - Hardware LPM is not enabled. The dependency hardware LPM is nullified if the GFLADJ[23] bit is set.
This signal must be used with a third-party PHY that does not have a free-running UTMI clock available. In Host/DRD mode, it must be inverted and connected to the SUSPENDM input of the port0 PHY. In Device mode, utmi_suspend_n[0] can also be connected to the SUSPENDM input of the PHY directly.

When using the Synopsys PHY, you can leave this signal unconnected.

For more information on how to use this signal, refer to "Integrating with USB 2.0 PHY" section of the DWC SuperSpeed USB 3.0 Controller User Guide.

Note: 
 - If the selected PHY has only SUSPENDM input, it can be connected to (~utmi_suspend_com_n &amp; ~utmi_l1_suspend_com_n). In these cases, the PHY recovery time (from suspend) must meet the LPM HIRD duration.
 - The overloading of the utmi_l1_suspend_com_n signal with the utmi_sleep_n signal is done only if the GUCTL1[1] bit is set high. For the description of the GUCTL1[1] bit, refer to "GUCTL1"  section of the Databook.
If some of the ports are in L2 suspend and the others are in L1 suspend or L1 sleep (in other words, each port is either in L2 suspend, L1 suspend or L1 sleep with at least one in L1 suspend or sleep) then the following occurs:
 - utmi_suspend_com_n signal is not asserted high
 - the utmi_l1_suspend_com_n signal is asserted high
If the utmi_l1_suspend_com_n signal is used to control the Port0 PHY suspend, the Port0 PHY must have a resume recovery time that meets the least LPM HIRD duration used.
Active State: N/A
Registered: No
Synchronous to: Asynchronous combinatorial signal
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_suspend_n</ipxact:name>
        <ipxact:description>UTMI Suspend. Places the PHY in Suspend mode, drawing minimal power.
In this mode, the PHY shuts down all internal circuits that are not necessary for suspend/resume.
The PHY also disables the clock.
Whenever the USB 2.0 PHY is requested to exit from the suspended state
(for example, when utmi_suspend_n is set back to 1'b1 requesting to turn the utmi clock), the DWC_usb3 core assumes that the utmi/ulpi_clk is switched within 990 us.
Active State: N/A
Registered: No
Synchronous to: Assertion is synchronous
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_termselect</ipxact:name>
        <ipxact:description>Termination Select. Selects HS or FS termination the PHY.

Values:
 - 1'b0: HS termination enabled
 - 1'b1: FS termination enabled
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_tx_data</ipxact:name>
        <ipxact:description>UTMI Data Output Bus. 8- or 16-bit data transmitted to the PHY.
The low and high bytes are asserted valid by utmi_rxvalid and utmi_rxvalidh, respectively.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>15</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_txvalid</ipxact:name>
        <ipxact:description>UTMI Transmit Data Valid, Low Byte.
Indicates that utmi_tx_data[7:0] contains valid data.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_txvalidh</ipxact:name>
        <ipxact:description>UTMI Transmit Data Valid, High Byte.
Indicates that utmi_tx_data[15:8] contains valid data.
Active State: High
Registered: No
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_word_if</ipxact:name>
        <ipxact:description>UTMI Data Bus Width and Clock Select.
Indicates whether the PHY is operating in 8- or 16-bit mode.

Note: This is not an actual UTMI+ Level 3 signal.

Values:
 - 1'b0: 8-bit interface 
 - 1'b1: 16-bit interface
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>utmi_xcvrselect</ipxact:name>
        <ipxact:description>Transceiver Select. Selects a HS, FS, or LS transceiver the PHY. 

Values:
 - 2'b00: HS transceiver enabled 
 - 2'b01: FS transceiver enabled 
 - 2'b10: LS transceiver enabled 
 - 2'b11: Send a LS packet a FS bus or receive a LS packet.
If xcrvselect is 2'b11, the transceiver sends a preamble packet at FS before sending the LS packet.
In receive mode, the transceiver waits to receive an LS packet with the LS transceiver enabled.
The transceiver must send all data (both FS preamble packet and the LS data) with FS signaling
(fast rise and fall times, and opposite polarity).
Active State: High
Registered: Yes
Synchronous to: utmi_clk
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_DataBusWidth</ipxact:name>
        <ipxact:description>PIPE3 Data Bus Width.
 - 00: 32-bit 
 - 01: 16-bits 
 - 10: 8-bits 
 - 11- Reserved
Sampled once after the PHY reset is released.
Active State: High
Registered: Yes
Synchronous to: This is an asynchronous strap signal.
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_PhyStatus</ipxact:name>
        <ipxact:description>PIPE3 PHY Status. For details on PhyStatus, refer to the following sections:
 - "SS PHY Status Transfer" in the Databook
 - "Inputs from PHY" section in the User Guide, and 
 - Description of pipe3_PhyStatus_async signal in this table
Active State: High
Registered: Yes
Synchronous to: pipe3_rx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_PhyStatus_async</ipxact:name>
        <ipxact:description>PIPE3 PHY Status Asynchronous.
Connect this signal to the same pipe3_PhyStatus signal from the PHY.
The reason for implementing this duplicate signal is to achieve a clean FPGA implementation that meets timing.
The pipe3_PhyStatus signal is synchronous to the pipe3_pclk during a non-P3 state,
and asynchronous to the pipe3_pclk during P3 because there is no pipe3_pclk during P3.

All of the PIPE3 input signal sampling is required to be inferred in the FPGA I/O ring flops to meet timing.
If a signal is sampled by two different clocks, the FPGA synthesis tools do not use the FPGA I/O flops
to sample the signal and instead they use two normal flops in a CLB.
This can cause a large routing delay of these critical signals
from the external PHY (which runs at 250MHz) and result in not meeting the timing requirements.

By duplicating the signal, the FPGA synthesis tool can use the I/O ring flops to
register pipe3_PhyStatus with pipe3_pclk
which has critical timing.

For more details PhyStatus, refer to the following sections:
 - "SS PHY Status Transfer" section in the Databook
 - "Inputs from PHY" section in the User Guide
Active State: High
Registered: No
Synchronous to: pipe3_rx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_PowerPresent</ipxact:name>
        <ipxact:description>PIPE3 PHY Power Present.
This must be a filtered signal and must be the same as utmiotg_vbusvalid.
In Non-OTG Host-only mode (DWC_USB3_EN_OTG=0), this signal must be connected to logic high value (1'b1).
For complete usage information, refer to section "Integrating the Core with
the PHY" in the DWC SuperSpeed USB 3.0 Controller User Guide.
Active State: High
Registered: No
Synchronous to: Asynchronous
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_RxData</ipxact:name>
        <ipxact:description>PIPE3 Receive Data.
Active State: High
Registered: Yes
Synchronous to: pipe3_rx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>31</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_RxDataK</ipxact:name>
        <ipxact:description>PIPE3 Receive DataK.
Active State: High
Registered: Yes
Synchronous to: pipe3_rx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_RxElecIdle</ipxact:name>
        <ipxact:description>PIPE3 PHY Electrical Idle.
Active State: High
Registered: Yes
Synchronous to: pipe3_rx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_RxStatus</ipxact:name>
        <ipxact:description>PIPE3 PHY Receive Status.
Active State: High
Registered: Yes
Synchronous to: pipe3_rx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_RxValid</ipxact:name>
        <ipxact:description>PIPE3 Receive Data Valid.
Active State: High
Registered: Yes
Synchronous to: pipe3_rx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_rx_pclk</ipxact:name>
        <ipxact:description>PIPE3 Rx Port Clock. Pipe 3 output clock from PHY.
Capture and logic clock for PIPE3 inputs to core.
Frequency depends PHY data width (32 bit -&gt; 125 MHz, 16 bit -&gt; 250 MHz, 8-bit -&gt; 500 MHz).
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:drivers>
            <ipxact:driver>
              <ipxact:range>
                <ipxact:left>0</ipxact:left>
                <ipxact:right>0</ipxact:right>
              </ipxact:range>
              <ipxact:clockDriver clockName="pipe3_rx_pclk_0">
                <ipxact:clockPeriod>4</ipxact:clockPeriod>
                <ipxact:clockPulseOffset>0</ipxact:clockPulseOffset>
                <ipxact:clockPulseValue>1</ipxact:clockPulseValue>
                <ipxact:clockPulseDuration>2</ipxact:clockPulseDuration>
              </ipxact:clockDriver>
            </ipxact:driver>
          </ipxact:drivers>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_tx_pclk</ipxact:name>
        <ipxact:description>PIPE3 Tx Port Clock. Pipe 3 output clock from PHY.
Drive and logic clock for PIPE3 outputs from core to PHY.
Frequency depends on PHY data width (32 bit -&gt; 125 MHz, 16 bit -&gt; 250 MHz, 8-bit -&gt; 500 MHz).
The pipe3_tx_pclk and the pipe3_rx_pclk must be connected to the same PHY clock output, and must have the same clock insertion delay for layout purposes.

For FPGA testing, the pipe3_tx_pclk can be a delayed version of the pipe3_rx_pclk clock, but cannot be an asynchronous version.
The setup and hold timing must be met between the pipe3_rx_clk and the pipe3_tx_clk.

In the case of Port-0, the setup and hold timing between the pipe3_rx_clk, the pipe3_tx_clk, and the internal mac3_clk must be met.
For more details, refer to "U3 PIU Clocks" section of the Databook.
Active State: N/A
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
          <ipxact:drivers>
            <ipxact:driver>
              <ipxact:range>
                <ipxact:left>0</ipxact:left>
                <ipxact:right>0</ipxact:right>
              </ipxact:range>
              <ipxact:clockDriver clockName="pipe3_tx_pclk_0">
                <ipxact:clockPeriod>4</ipxact:clockPeriod>
                <ipxact:clockPulseOffset>0</ipxact:clockPulseOffset>
                <ipxact:clockPulseValue>1</ipxact:clockPulseValue>
                <ipxact:clockPulseDuration>2</ipxact:clockPulseDuration>
              </ipxact:clockDriver>
            </ipxact:driver>
          </ipxact:drivers>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_ElasBufferMode</ipxact:name>
        <ipxact:description>PIPE3 Elasticity Buffer Mode.

Values: 
 - 1'b0: Half-Full mode 
 - 1'b1: Empty mode
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_PHY_Mode</ipxact:name>
        <ipxact:description>PIPE3 PHY Mode. Hard wire to USB3 mode.
Active State: High
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_PowerDown</ipxact:name>
        <ipxact:description>PIPE3 Power Down Transceiver.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_Rate</ipxact:name>
        <ipxact:description>PIPE3 Data Rate. Hard wired to 1'b1.

Values:
 - 1'b0: 2.5GHz 
 - 1'b1: 5GHz
Active State: High
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_RxEqTrain</ipxact:name>
        <ipxact:description>PIPE3 equalization training.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_RxPolarity</ipxact:name>
        <ipxact:description>PIPE3 Receive Polarity.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_RxTermination</ipxact:name>
        <ipxact:description>PIPE3 Receiver Termination.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_TxData</ipxact:name>
        <ipxact:description>PIPE3 Transmit Data.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>31</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_TxDataK</ipxact:name>
        <ipxact:description>PIPE3 Transmit DataK.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>3</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_TxDeemph</ipxact:name>
        <ipxact:description>PIPE3 Transmit De-emphasis.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>1</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_TxDetectRxLoopbk</ipxact:name>
        <ipxact:description>PIPE3 Receive Detect/LoopBack.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_TxElecIdle</ipxact:name>
        <ipxact:description>PIPE3 Transmit Electrical Idle.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_TxMargin</ipxact:name>
        <ipxact:description>PIPE3 Transmit Voltage Level.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>2</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_TxOnesZeros</ipxact:name>
        <ipxact:description>PIPE3 USB3 Transmit Compliance.
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_TxSwing</ipxact:name>
        <ipxact:description>PIPE3 Voltage Swing.

Values:
 - 1'b0: Full swing 
 - 1'b1: Low swing
Active State: High
Registered: Yes
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_compliance</ipxact:name>
        <ipxact:description>PIPE3 PCIe Compliance Pattern. Hard wired to 1'b0.
Active State: High
Registered: N/A
Synchronous to: N/A
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pipe3_reset_n</ipxact:name>
        <ipxact:description>PIPE3 Asynchronous Reset. Only deassertion is synchronous.
Active State: Low
Registered: No
Synchronous to: pipe3_tx_pclk[N-1]
PowerDomain: Vcc</ipxact:description>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>0</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="IfUnconnected">export</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
    </ipxact:ports>
  </ipxact:model>
  <ipxact:choices>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_MODE</ipxact:name>
      <ipxact:enumeration text="Device">0</ipxact:enumeration>
      <ipxact:enumeration text="Host">1</ipxact:enumeration>
      <ipxact:enumeration text="Device and Host (DRD)">2</ipxact:enumeration>
      <ipxact:enumeration text="Hub">3</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_USB2_ONLY</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_ISOC_SUPT</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_PWROPT</ipxact:name>
      <ipxact:enumeration text="No Power Optimization">0</ipxact:enumeration>
      <ipxact:enumeration text="Clock Gating Only">1</ipxact:enumeration>
      <ipxact:enumeration text="Clock Gating and Hibernation (Two Power Rails)">2</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_OTG</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="OTG2.0">1</ipxact:enumeration>
      <ipxact:enumeration text="OTG3.0 (and OTG 2.0)">2</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_ADP</ipxact:name>
      <ipxact:enumeration text="External ADP">0</ipxact:enumeration>
      <ipxact:enumeration text="Internal ADP">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_BC</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_MBUS_TYPE</ipxact:name>
      <ipxact:enumeration text="AHB">0</ipxact:enumeration>
      <ipxact:enumeration text="AXI">1</ipxact:enumeration>
      <ipxact:enumeration text="Reserved2">2</ipxact:enumeration>
      <ipxact:enumeration text="Native">3</ipxact:enumeration>
      <ipxact:enumeration text="Reserved">4</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SBUS_TYPE</ipxact:name>
      <ipxact:enumeration text="AHB">0</ipxact:enumeration>
      <ipxact:enumeration text="AXI">1</ipxact:enumeration>
      <ipxact:enumeration text="Reserved2">2</ipxact:enumeration>
      <ipxact:enumeration text="Native">3</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_MDWIDTH</ipxact:name>
      <ipxact:enumeration text="32 bits">32</ipxact:enumeration>
      <ipxact:enumeration text="33 bits">33</ipxact:enumeration>
      <ipxact:enumeration text="64 bits">64</ipxact:enumeration>
      <ipxact:enumeration text="128 bits">128</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SDWIDTH</ipxact:name>
      <ipxact:enumeration text="32 bits">32</ipxact:enumeration>
      <ipxact:enumeration text="64 bits">64</ipxact:enumeration>
      <ipxact:enumeration text="128 bits">128</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_AWIDTH</ipxact:name>
      <ipxact:enumeration text="32 bits">32</ipxact:enumeration>
      <ipxact:enumeration text="64 bits">64</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_IDWIDTH</ipxact:name>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="5">5</ipxact:enumeration>
      <ipxact:enumeration text="6">6</ipxact:enumeration>
      <ipxact:enumeration text="7">7</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SIDWIDTH</ipxact:name>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="5">5</ipxact:enumeration>
      <ipxact:enumeration text="6">6</ipxact:enumeration>
      <ipxact:enumeration text="7">7</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
      <ipxact:enumeration text="9">9</ipxact:enumeration>
      <ipxact:enumeration text="10">10</ipxact:enumeration>
      <ipxact:enumeration text="11">11</ipxact:enumeration>
      <ipxact:enumeration text="12">12</ipxact:enumeration>
      <ipxact:enumeration text="13">13</ipxact:enumeration>
      <ipxact:enumeration text="14">14</ipxact:enumeration>
      <ipxact:enumeration text="15">15</ipxact:enumeration>
      <ipxact:enumeration text="16">16</ipxact:enumeration>
      <ipxact:enumeration text="17">17</ipxact:enumeration>
      <ipxact:enumeration text="18">18</ipxact:enumeration>
      <ipxact:enumeration text="19">19</ipxact:enumeration>
      <ipxact:enumeration text="20">20</ipxact:enumeration>
      <ipxact:enumeration text="21">21</ipxact:enumeration>
      <ipxact:enumeration text="22">22</ipxact:enumeration>
      <ipxact:enumeration text="23">23</ipxact:enumeration>
      <ipxact:enumeration text="24">24</ipxact:enumeration>
      <ipxact:enumeration text="25">25</ipxact:enumeration>
      <ipxact:enumeration text="26">26</ipxact:enumeration>
      <ipxact:enumeration text="27">27</ipxact:enumeration>
      <ipxact:enumeration text="28">28</ipxact:enumeration>
      <ipxact:enumeration text="29">29</ipxact:enumeration>
      <ipxact:enumeration text="30">30</ipxact:enumeration>
      <ipxact:enumeration text="31">31</ipxact:enumeration>
      <ipxact:enumeration text="32">32</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_NUM_RAMS</ipxact:name>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SPRAM_TYP</ipxact:name>
      <ipxact:enumeration text="2-Port RAM">0</ipxact:enumeration>
      <ipxact:enumeration text="Single-Port RAM (SPRAM)">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_MDBUS_ACCESS_GT21</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SSPHY_INTERFACE_NUM_PIPE</ipxact:name>
      <ipxact:enumeration text="No Additional Pipeline">0</ipxact:enumeration>
      <ipxact:enumeration text="1 stage of Additional Pipeline">1</ipxact:enumeration>
      <ipxact:enumeration text="2 stages of Additional Pipeline">2</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HSPHY_INTERFACE</ipxact:name>
      <ipxact:enumeration text="Reserved">0</ipxact:enumeration>
      <ipxact:enumeration text="UTMI+">1</ipxact:enumeration>
      <ipxact:enumeration text="ULPI">2</ipxact:enumeration>
      <ipxact:enumeration text="UTMI+ and ULPI">3</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_ENABLE_HSIC</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_FAST_TAT_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_VENDOR_CTL_INTERFACE</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_PIPE_RXTERM_RESET_VAL</ipxact:name>
      <ipxact:enumeration text="0">0</ipxact:enumeration>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_RXDET_IN_P3_DS</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SUSPEND_ON_DISCONNECT_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_NUM_SSIC_PORTS</ipxact:name>
      <ipxact:enumeration text="0">0</ipxact:enumeration>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="5">5</ipxact:enumeration>
      <ipxact:enumeration text="6">6</ipxact:enumeration>
      <ipxact:enumeration text="7">7</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
      <ipxact:enumeration text="9">9</ipxact:enumeration>
      <ipxact:enumeration text="10">10</ipxact:enumeration>
      <ipxact:enumeration text="11">11</ipxact:enumeration>
      <ipxact:enumeration text="12">12</ipxact:enumeration>
      <ipxact:enumeration text="13">13</ipxact:enumeration>
      <ipxact:enumeration text="14">14</ipxact:enumeration>
      <ipxact:enumeration text="15">15</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SSIC_GEAR</ipxact:name>
      <ipxact:enumeration text="HS_G1_ONLY">1</ipxact:enumeration>
      <ipxact:enumeration text="RESERVED">2</ipxact:enumeration>
      <ipxact:enumeration text="HS_G1_G2_G3">3</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SSIC_NUM_LANE</ipxact:name>
      <ipxact:enumeration text="1-Lane">1</ipxact:enumeration>
      <ipxact:enumeration text="2-Lane">2</ipxact:enumeration>
      <ipxact:enumeration text="4-Lane">4</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_RMMI_DATA_WIDTH</ipxact:name>
      <ipxact:enumeration text="Reserved1">10</ipxact:enumeration>
      <ipxact:enumeration text="Reserved2">20</ipxact:enumeration>
      <ipxact:enumeration text="40">40</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EXT_BUFF_CONTROL</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SSIC_NON_SNPS_MPHY</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF1_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF2_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_SSIC_ROM_DEPTH</ipxact:name>
      <ipxact:enumeration text="0">0</ipxact:enumeration>
      <ipxact:enumeration text="16">16</ipxact:enumeration>
      <ipxact:enumeration text="32">32</ipxact:enumeration>
      <ipxact:enumeration text="64">64</ipxact:enumeration>
      <ipxact:enumeration text="128">128</ipxact:enumeration>
      <ipxact:enumeration text="256">256</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF3_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF4_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF5_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF6_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF7_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF8_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF9_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF10_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF11_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF12_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF13_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF14_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_TXF15_BURST_EN</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_DBC</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_SEPARATE_DESC_QUEUES</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HOST_NUM_U2_ROOT_PORTS</ipxact:name>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="5">5</ipxact:enumeration>
      <ipxact:enumeration text="6">6</ipxact:enumeration>
      <ipxact:enumeration text="7">7</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
      <ipxact:enumeration text="9">9</ipxact:enumeration>
      <ipxact:enumeration text="10">10</ipxact:enumeration>
      <ipxact:enumeration text="11">11</ipxact:enumeration>
      <ipxact:enumeration text="12">12</ipxact:enumeration>
      <ipxact:enumeration text="13">13</ipxact:enumeration>
      <ipxact:enumeration text="14">14</ipxact:enumeration>
      <ipxact:enumeration text="15">15</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HOST_NUM_U3_ROOT_PORTS</ipxact:name>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="5">5</ipxact:enumeration>
      <ipxact:enumeration text="6">6</ipxact:enumeration>
      <ipxact:enumeration text="7">7</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
      <ipxact:enumeration text="9">9</ipxact:enumeration>
      <ipxact:enumeration text="10">10</ipxact:enumeration>
      <ipxact:enumeration text="11">11</ipxact:enumeration>
      <ipxact:enumeration text="12">12</ipxact:enumeration>
      <ipxact:enumeration text="13">13</ipxact:enumeration>
      <ipxact:enumeration text="14">14</ipxact:enumeration>
      <ipxact:enumeration text="15">15</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_NUM_DEVICE_SUPT</ipxact:name>
      <ipxact:enumeration text="64">64</ipxact:enumeration>
      <ipxact:enumeration text="127">127</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_FREECLK_USB2_EXIST</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_NUM_SS_USB_INSTANCES</ipxact:name>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_NUM_HS_USB_INSTANCES</ipxact:name>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_ECC</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HUB_NUM_U3_PORTS</ipxact:name>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="5">5</ipxact:enumeration>
      <ipxact:enumeration text="6">6</ipxact:enumeration>
      <ipxact:enumeration text="7">7</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
      <ipxact:enumeration text="9">9</ipxact:enumeration>
      <ipxact:enumeration text="10">10</ipxact:enumeration>
      <ipxact:enumeration text="11">11</ipxact:enumeration>
      <ipxact:enumeration text="12">12</ipxact:enumeration>
      <ipxact:enumeration text="13">13</ipxact:enumeration>
      <ipxact:enumeration text="14">14</ipxact:enumeration>
      <ipxact:enumeration text="15">15</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_HUB_SFLASH_SUPT</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_JTAG_INTERFACE</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HUB_NUM_RXHEADERS</ipxact:name>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HUB_NUM_TXHEADERS</ipxact:name>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HUB_NUM_UPSTRMRX_DATAPKTS</ipxact:name>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="5">5</ipxact:enumeration>
      <ipxact:enumeration text="6">6</ipxact:enumeration>
      <ipxact:enumeration text="7">7</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HUB_NUM_UPSTRMTX_DATAPKTS</ipxact:name>
      <ipxact:enumeration text="1">1</ipxact:enumeration>
      <ipxact:enumeration text="2">2</ipxact:enumeration>
      <ipxact:enumeration text="3">3</ipxact:enumeration>
      <ipxact:enumeration text="4">4</ipxact:enumeration>
      <ipxact:enumeration text="5">5</ipxact:enumeration>
      <ipxact:enumeration text="6">6</ipxact:enumeration>
      <ipxact:enumeration text="7">7</ipxact:enumeration>
      <ipxact:enumeration text="8">8</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HUB_DESC_DEPTH</ipxact:name>
      <ipxact:enumeration text="64">64</ipxact:enumeration>
      <ipxact:enumeration text="128">128</ipxact:enumeration>
      <ipxact:enumeration text="256">256</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HUB_DESC_SS_START_DEPTH</ipxact:name>
      <ipxact:enumeration text="0">0</ipxact:enumeration>
      <ipxact:enumeration text="64">64</ipxact:enumeration>
      <ipxact:enumeration text="128">128</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HUB_ENABLE_VCI</ipxact:name>
      <ipxact:enumeration text="Disable">0</ipxact:enumeration>
      <ipxact:enumeration text="Enable">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_HUB_ENABLE_SCRAMBLING</ipxact:name>
      <ipxact:enumeration text="Disable">0</ipxact:enumeration>
      <ipxact:enumeration text="Enable">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_LPM_ERRATA</ipxact:name>
      <ipxact:enumeration text="LPM Errata Disable">0</ipxact:enumeration>
      <ipxact:enumeration text="LPM Errata Enable">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_DEV_EN_SCATTER_PACKETS_OF_8_TO_15_TRBS</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_FPGA</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_LOG_PHYS_EP_SUPT</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_ATSPEED_DFT</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_BUS_FILTERS</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_PMU_FILTER</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_PIPE_32BIT_ONLY</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_RAM_CLK_TO_BUS_CLK</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_EN_SYNC_ALL_POSEDGE</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
    <ipxact:choice>
      <ipxact:name>DWC_USB3_REMOVE_PIPE_CLK_MUX_FOR_20_MODE</ipxact:name>
      <ipxact:enumeration text="No">0</ipxact:enumeration>
      <ipxact:enumeration text="Yes">1</ipxact:enumeration>
    </ipxact:choice>
  </ipxact:choices>
  <ipxact:fileSets>
    <ipxact:fileSet>
      <ipxact:name>Hdl</ipxact:name>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_hub_rom_data_inc.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_internal_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_ssic_rom_data_inc.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_ahb_gm_param.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_axi_gm_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bmu/DWC_usb3_bmu_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_cparams.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdparams.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hparams.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_pa_patgen_rom_data_inc.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_func_iepindex.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_func_oepindex.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3mac/DWC_usb3_u3mac_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_derived_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_bcm_params.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_internal_defines.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_noclkrst.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_pwrdwn.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_rst.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_clk.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_u2pwrdwn.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_u3pwrdwn.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_filter.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_debounce_filter.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/csr/DWC_usb3_csr.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/csr/DWC_usb3_csr_dev.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/csr/DWC_usb3_csr_epinfo.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/csr/DWC_usb3_csr_hst.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/csr/DWC_usb3_csr_dbc.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/csr/DWC_usb3_csr_dbc_epinfo.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bius/DWC_usb3_bus_gs.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bius/DWC_usb3_ahb_gs.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bius/DWC_usb3_axi_gs.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_bus_gm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_ahb_gm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_axi_gm_bs.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_axi_gm_cmdif.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_axi_gmw_xmdif.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_axi_gmw_drqif.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_axi_gm_xmrif.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_axi_gmr.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_axi_gmw.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium/DWC_usb3_axi_gm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_hrxe.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_htxe.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_pccarb.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_plrarb.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_axe.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_mpcarb.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_pltif.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_rxe.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_txe.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl_cxe.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl/DWC_usb3_u3ptl.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_crc16.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_lpent.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_lque.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_rdeskp.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_replay.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_rlc.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_rpkt.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_rscrm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_rtset.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_scram.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_tctrl.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link_tscrm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link/DWC_usb3_u3link.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_glue.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_barb.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_cch.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_ctm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_dev.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_dev_barbif.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_eim.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_pim.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_psm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_rdp.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_rsp.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_rxt.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_smu.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_tap.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_tpf.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_txt.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_muldiv.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hceg.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hcmd.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdnh.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_herh.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hpsp.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hl1w.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hprsp.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_halm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_halm_periodic.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hglb.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hsch.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hmsch.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hsrx.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hstx.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hth.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_htof.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hping.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hu1bi.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hu2bi.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hu3bi.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hst.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_nsr.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdeim.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdep0.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdpsm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdpim.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdrx.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdtpf.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdtx.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdglue.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp_hdbc.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp/DWC_usb3_lsp.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bmu/DWC_usb3_bmu_bcu.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bmu/DWC_usb3_bmu_ccu.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bmu/DWC_usb3_bmu_dcu.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bmu/DWC_usb3_bmu_rac.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bmu/DWC_usb3_bmu.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_2clkfifo.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_clamp.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_fifoctl.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_fifo.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_fifo_rew.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_mux.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_clkgate_cell.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_clk_mux.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_clk_buf.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_glitch_free_mux.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_clk_or.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_isolation_cell.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_bcm21.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_bcm22.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_sync_ctl.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_sync_pulse.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_sync_data.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_sync_toggledata.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_bussync.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_dsyncmulti.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_sync_2edge.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_clk_mux_dft.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_clk_div_2_4.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_binenc.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_arb_rr.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_arb_rr_2w.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_byte_align.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_double_sync_n2p_n.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_double_sync_n2p_p.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_double_sync_p2n_n.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_double_sync_p2n_p.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_double_sync_p2p_n.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_double_sync_p2p_p.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_clkgate_leaf_cell.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_bcm46_a.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_bcm46_b.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_bcm46_c.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_bcm46_d.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_bcm46_e.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/com/DWC_usb3_bcm46_wrapper.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3mac/DWC_usb3_u3crc32.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3mac/DWC_usb3_u3mac.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3mac/DWC_usb3_smac.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2ptl/DWC_usb3_u2ptl.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2ptl/DWC_usb3_u2ptl_dev.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2ptl/DWC_usb3_u2ptl_hst.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_prtrtr.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_prt.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_u3ltssm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_u3piu.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_tscrm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_scram.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_u3ring.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_cnctsm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_sync.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_csr.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_pa_cmd.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_pa_crc16.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_pa_patgen.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_legacy.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_pwrm_csr_hst.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm/DWC_usb3_u2wpc.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/asev/DWC_usb3_asev_evtgen.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/asev/DWC_usb3_asev_soft.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/asev/DWC_usb3_asev.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3rhb/DWC_usb3_u3rhb_prtmux.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3rhb/DWC_usb3_u3rhb_prtrxmux.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3rhb/DWC_usb3_u3rhb_prtsm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3rhb/DWC_usb3_u3rhb_prt.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3rhb/DWC_usb3_u3rhb.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_tr.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3_sync.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2piu.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2piu_sync.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2piu_ulpi.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2mac.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2mac_crc16.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2dssr.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2prt.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2prtmux.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_rhusy.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_rhutx.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_rhurx.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2prtsm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2rhlpm.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2upi.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2fsie_cntrl.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2fsie_dpll.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2fsie_rx.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2fsie_rx_buf.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2fsie_tx.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2fsie_tx_buf.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2fs_sie.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2rhb.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2devprt.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac/DWC_usb3_u2hmac.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/DWC_usb3-undef.v</ipxact:name>
        <ipxact:fileType>systemVerilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:dependency>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src</ipxact:dependency>
      <ipxact:dependency>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bium</ipxact:dependency>
      <ipxact:dependency>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/bmu</ipxact:dependency>
      <ipxact:dependency>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/link</ipxact:dependency>
      <ipxact:dependency>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/lsp</ipxact:dependency>
      <ipxact:dependency>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/pwrm</ipxact:dependency>
      <ipxact:dependency>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u2mac</ipxact:dependency>
      <ipxact:dependency>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3mac</ipxact:dependency>
      <ipxact:dependency>/home/esirotkin/project/USB3_DWC_3.20a_controller/i_DWC_usb3/src/u3ptl</ipxact:dependency>
    </ipxact:fileSet>
  </ipxact:fileSets>
  <ipxact:parameters>
    <ipxact:parameter choiceRef="DWC_USB3_MODE" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_MODE" prompt="Mode of Operation" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_MODE</ipxact:name>
      <ipxact:description>Selects controller mode of operation. 

Device, Host, DRD, or Hub configuration selection needs the corresponding license purchase. With a USB 3.0 DRD license, you can configure the controller as a device, host, or DRD (you can select DWC_USB3_MODE as 0, 1, or 2).</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_USB2_ONLY" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_EN_USB2_ONLY" prompt="Enable USB 2.0-only mode?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_USB2_ONLY</ipxact:name>
      <ipxact:description>Enables USB 2.0 only mode, which removes SuperSpeed gates and RAM requirements.

If you need USB 2.0 only support but still want to use USB 3.0 software drivers, this option provides a smaller gate count solution. For example, in your SoC if you need USB 2.0 and USB 3.0 controllers, then using two instances of USB 3.0 controller (one in USB 2.0 only mode) will reduce your IP integration and SoC development time; also the product needs only one SW driver development. 

In host mode, only Linux and MCCI xHCI drivers support USB 2.0 only mode. Microsoft Windows 8.1 driver does not support USB 2.0 only mode since it expects that both the USB 2.0 and USB 3.0 port extended capabilities be present. Check with Microsoft on the availability of Windows support.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_ISOC_SUPT" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_EN_ISOC_SUPT" prompt="Enable Isochronous Support?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_ISOC_SUPT</ipxact:name>
      <ipxact:description>Enables isochronous endpoint capability. 

It is recommended that you always enable this feature in host mode because this is a required feature in a standard xHCI host. There is no area saving by disabling this feature in either device or host mode.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_PWROPT" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_EN_PWROPT" prompt="Power Optimization Mode" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_PWROPT</ipxact:name>
      <ipxact:description>Specifies the power optimization mode.
 - If Clock Gating Only is selected, BUS and RAM domain module clocks are gated when the core is inactive during L1, L2, U1, U2, and U3 states. Note that the PHY and MAC clocks are turned off by the PHY during L1 sleep (by Synopsys-PHY), L2, and U3 states.
 - If Hibernation (Two Power Rails) is selected, in addition to clock gating, you can power down the DWC_usb3 core to minimize leakage power during L1 (device mode only), L2, and U3 states. Only the smaller U2PMU and U3PMU modules are active to detect wakeup conditions. Because the always-on U2PMU/U3PMU modules are much smaller (~5K gates) than the power-gated DWC_usb3 core (~250K gates in device mode), the leakage power during hibernation is reduced. To use the Hibernation feature, you need to purchase a Hibernation Add-on license.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_OTG" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_EN_OTG" prompt="Enable USB2.0 or USB3.0 OTG Capability?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_OTG</ipxact:name>
      <ipxact:description>Enables OTG 2.0 or OTG 3.0 plus OTG 2.0 capability when DRD configuration is selected. 
 - No OTG: This option lacks OTG based dynamic role switching capability, but can work as either a host or a device, depending on the PrtCapDir programming by software.
 - OTG 2.0 Capable: It indicates HNP (Host Negotiation Protocol) and SRP (Session Request Protocol) capability. This option includes dynamic role switching capability, ability to detect SRP when in Host role, and ability to generate SRP when in Device role. In a USB 3.0 core, enabling the OTG 2.0 capability will ONLY support USB 2.0 HNP and SRP, and it does NOT support USB 3.0 RSP(Role Swap Protocol). The core is compliant to OTG 2.0 specifications. The OTG 2.0 feature needs an OTG 2.0 Add-on license purchase.
 - OTG 3.0 Capable: It indicates HNP/RSP (Role Swap Protocol) and SRP Capable. This option includes dynamic role switching capability, can detect SRP when in Host role and generate SRP when in Device role. This option is a superset of the OTG 2.0 capable features defined previously. By enabling OTG 3.0 capability, the core supports both USB 2.0 HNP and SRP, and USB 3.0 RSP. The core is compliant to OTG 3.0 specifications. OTG 3.0 capability is not supported in USB 2.0-only mode. The OTG 3.0 feature needs an OTG 3.0 Add-on license purchase; the OTG 3.0 add-on license includes the OTG 2.0 add-on license.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_ADP" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_EN_ADP" prompt="Enable ADP Capability?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_ADP</ipxact:name>
      <ipxact:description>Enables Internal ADP capability of the USB3 core. 

When enabled, the core incorporates ADP controller logic and provides ADP control signals.

Note: When both ADP and Hibernation (DWC_USB3_EN_ADP=1 and DWC_USB3_EN_PWROPT=2) features are enabled, the ADP feature is non-functional when the core is in Hibernation.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_BC" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_EN_BC" prompt="Enable Battery Charging Capability?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_BC</ipxact:name>
      <ipxact:description>Enables Battery Charging (ACA) capability. 

When enabled, the core supports battery charger and provides support for Accessory Charging Adaptor (ACA) pins. When both Battery Charging and OTG (DWC_USB3_EN_BC =1 and DWC_USB3_EN_OTG=1 or 2) are enabled, the utmiotg_iddig pin can also be derived from ACA pins based on BCFG.IDDIG_SEL programming. Battery Charger is not supported in the HSIC interface. For more information, refer to "Modes Of Operation" under the "Battery Charger" section of the Databook. 

Note: When both Battery Charging and Hibernation (DWC_USB3_EN_BC=1 and DWC_USB3_EN_PWROPT=2) features are enabled, the ADP feature is non-functional when the core is in Hibernation.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_MBUS_TYPE" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_MBUS_TYPE" prompt="Master Bus (DMA Bus) Interface Type" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_MBUS_TYPE</ipxact:name>
      <ipxact:description>Selects the SoC Master Bus interface type. The Master bus is used for DMA.
 - If your SoC is AHB-based, or if you have an AHB to your SoC bus bridge, select AHB.
 - If your SoC is AXI-based, or if you have an AXI to your SoC bus bridge, select AXI.
 - Otherwise, select the Native bus interface, and design a bridge from DWC_usb3's Native interface to your SoC bus.
Because the Master Bus is critical for DMA operation/data transfer, selecting the bus type, frequency, and data width of this bus are critical in meeting USB performance.
For example, because USB 3.0 is full duplex bus, a full duplex AXI bus would provide better bandwidth than an AHB bus.
For more information, refer to the "Minimum Clock Frequencies; bus_clk, ram_clk" section in the Databook.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SBUS_TYPE" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_SBUS_TYPE" prompt="Slave Bus (Register Access Bus) Interface Type" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SBUS_TYPE</ipxact:name>
      <ipxact:description>Selects the SoC Slave Bus interface type. The Slave bus is used for register programming. 
 - If your SoC is AHB-based, or if you have an AHB to your SoC bus bridge, select AHB.
 - If your SoC is AXI-based, or if you have an AXI to your SoC bus bridge, select AXI.
 - Otherwise, select the Native bus interface, and design a bridge from DWC_usb3's Native interface to your SoC bus.
Because the Slave Bus is only used for register access (which are less frequent) the performance on this bus is not as critical as in the Master Bus.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_MDWIDTH" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_MDWIDTH" prompt="Master Bus (DMA Bus) Data Bus Width" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_MDWIDTH</ipxact:name>
      <ipxact:description>Selects data bus width of the Master Bus interface. 

For USB 3.0 operation, 64-bit or larger data width is recommended to meet USB bandwidth.
33-bit is used only for Hub configuration. For more information, refer to the "Minimum Clock Frequencies; bus_clk, ram_clk" section in the Databook.</ipxact:description>
      <ipxact:value>64</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SDWIDTH" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_SDWIDTH" prompt="Slave Bus (Register Access Bus) Data Bus Width" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SDWIDTH</ipxact:name>
      <ipxact:description>Selects the data bus width of the Slave Bus interface.

Note: The slave data bus width must not be larger than the master data bus width.</ipxact:description>
      <ipxact:value>32</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_AWIDTH" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_AWIDTH" prompt="Master/Slave Address Bus Width" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_AWIDTH</ipxact:name>
      <ipxact:description>Selects the address bus width of the master and slave interfaces.
 - If your system address bus width is 32 bits, then select 32 bits.
 - If your system address bus width is 64 bits, then select 64 bits. 
 - If your system address bus width for example is 40 bits, select 64 and tie the address bits [63:40] of the DWC_usb3 to 0.
The address width is common for both master and slave interfaces; and must be set to meet both the the DMA master and slave interface requirements. The slave interface uses only address bits [19:0] and for the others, don't care.</ipxact:description>
      <ipxact:value>64</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_IDWIDTH" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_IDWIDTH" prompt="Master ID Port Width" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_IDWIDTH</ipxact:name>
      <ipxact:description>Selects the ID port width of the master bus interface. 

Because the USB3.0 controller supports up to a maximum of 16 outstanding transfers, using more than 4 master ID widths is not required. The number of registers to track the transfers increases by two to the power of the master ID widths, therefore the larger area overhead when selecting a larger master ID. The number of flops used for tracking transfers are 272, 544, 1066, 2176, and 4352 when master ID widths 4 to 8 are used.</ipxact:description>
      <ipxact:value>4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SIDWIDTH" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_SIDWIDTH" prompt="Slave ID Port Width" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SIDWIDTH</ipxact:name>
      <ipxact:description>Selects the ID port width of the slave bus interface. 

There is no area overhead in using larger slave ID width because the USB 3.0 only registers the input ID and returns it back along with the response.</ipxact:description>
      <ipxact:value>6</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_NUM_RAMS" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_NUM_RAMS" prompt="Number of RAMs" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_RAMS</ipxact:name>
      <ipxact:description>Selects the number of RAMs.

Configuration Recommendations:
 - USB 3.0 device and host requires 2 or 3 RAMs (3 recommended); 
In 3-RAM configuration, RAM0 is used for registers and descriptor cache, RAM2 for Rx-buffering, and RAM1 for Tx prefetch. 
In a 2-RAM configuration, RAM0 is used for registers, descriptor cache, and Rx-buffering and RAM1 for Tx prefetch.
 - USB 2.0-only mode device and host requires only 1 RAM (USB 2.0 needs less bandwidth); RAM0 is used for registers, descriptor cache, Rx buffering, and Tx prefetch.
 - Hub requires two 2-port RAMs.
 - For USB 3.0 device and host, three 2-Port RAMs provide the best compromise among performance, low clock frequency, and area.</ipxact:description>
      <ipxact:value>3</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SPRAM_TYP" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_SPRAM_TYP" prompt="Synchronous Static RAM Type" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SPRAM_TYP</ipxact:name>
      <ipxact:description>Selects either 2-Port RAM (single-clock, 1 port for read only, and 1 port for write only) or Single-Port RAM (SPRAM). Two-port is preferred for USB 3.0 applications.
 - Select 2-port RAM for performance-sensitive applications or if your system bus frequency is very low (for example, below 66 MHz).
 - Select single-port RAM if you do not have 2-port RAM in your library or for USB 2.0 only mode or for area-sensitive applications.
Note that DWC_usb3 needs only 2-port RAM which runs on a single clock and one port is read only and one port is write only and not a 2 clock true dual port ram which supports read and write on both ports. Depending on your memory compiler and RAM size, the area of a true dual-port RAM is 1.2-1.8 times larger than a single-port RAM of the same RAM size. The 2-port RAMs are normally a little larger than SPRAM but much smaller than DPRAM. 

When SPRAM is selected, the same port is shared by both the MAC and SoC Bus; the MAC has priority over the SoC Bus. Depending up on the ram clock frequency, busy cycles may be inserted on the SoC Master interface during simultaneous MAC and SoC accesses to the RAM.

For USB 3.0 device and host, three 2-Port RAMs provides the best compromise between performance, lower clock frequency, and area. For additional information, refer to the "Minimum Clock Frequencies; bus_clk, ram_clk" section and "Memory Requirements" sections of the Databook.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_USERID" prompt="Global User ID (GUID) Register&amp;apos;s Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_USERID</ipxact:name>
      <ipxact:description>Specifies the Global User ID (GUID) register's power-on initialization value. 

After power-up, the software can change this value. This register can be used as either a scratch pad or identification register. For more information, see the "GUID" section of the Databook.</ipxact:description>
      <ipxact:value>'h12345678</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_GUCTL" prompt="Global User Control (GUCTL) Register&amp;apos;s Power-On Initialization Value (0x0-02000010)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GUCTL</ipxact:name>
      <ipxact:description>Specifies the global User Specific Control Register's power-on initialization value. 

After power-up, the software can change this value. Choice decides the values of options to improve the host inter-operability with different devices. For more information, see the "GUCTL" section of the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h2800010</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_GUCTL1" prompt="Global User Control 1 (GUCTL1) Register&amp;apos;s Power-On Initialization Value (0x0-0004018a)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GUCTL1</ipxact:name>
      <ipxact:description>Specifies the Global User Control 1 Register's power-on initialization value.

After power-up, the software can change this value.
 - bit[24] - 1'b0: Device L1 exit by hardware disabled; 1'b1: enabled. 
 - bit[20] - 1'b0: Device LSP Tail update lock enabled; 1'b1: disabled.
For more information, see the "Registers" chapter of the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h4018a</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_GUCTL2" prompt="Global User Control 2 (GUCTL2) Register&amp;apos;s Power-On Initialization Value (0x0-000007ff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GUCTL2</ipxact:name>
      <ipxact:description>Specifies the Global User Control 2 Register's power-on initialization value.

After power-up, the software can change this value.
 - bit[4:0]: Indicates the maximum time in units of 8 ns the LTSSM should instruct the PHY to keep transmitting the ping LFPS (For example, a value of 13 indicates 104 ns). 
 - bit[10:5]: Indicates the maximum time in units of 8 ns the LTSSM should instruct the PHY to keep receiving the ping LFPS (For example, a value of 32 indicates 256 ns). 
 - bit[11]: Disable xHCI Errata Contiguous FrameID capability and Microframe targeting. 
 - bit[12]: Enable Evicting Endpoint cache after flow control for bulk endpoints.
For more information, see the "Registers" chapter of the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h40d</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_GFLADJ" prompt="Global Frame Length Adjustment (GFLADJ) Register&amp;apos;s Power-On Initialization Value (0x0-00000000)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GFLADJ</ipxact:name>
      <ipxact:description>Specifies the global frame length adjustment Register's power-on initialization value. 

After power-up, the software can change this value. What you select decides the values of options to program host frame length adjustment. For more information, see the "GFLADJ" section of the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_MDBUS_ACCESS_GT21" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_MDBUS_ACCESS_GT21" prompt="Does the Master DMA bus latency plus access time exceed the USB MaxPacket transmission time (2.1us for 1KB SS/ ~10 uS for 512Byte HS)?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_MDBUS_ACCESS_GT21</ipxact:name>
      <ipxact:description>Configures the Rx FIFO, Tx FIFO, and Cache sizes depending up on the system latency.

By setting this parameter, which indicates that the Master DMA bus latency plus access time exceeds the USB MaxPacket transmission time, a larger FIFO size is recommended. For example, when this parameter is set, for SuperSpeed endpoint which supports burst, a 5-packet size FIFO is recommended instead of a 3-packet size FIFO.

A 1KB SuperSpeed packet has a transmission time of 2.1 microseconds while a 512B high-speed packet has a transmission time of ~10 microseconds. Therefore, for SS enabled cores, if the DMA bus latency plus access time exceeds 2.1us, then set this parameter. For USB 2.0-only cores, set this parameter if the DMA access time exceeds 10us.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SSPHY_INTERFACE_NUM_PIPE" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_SSPHY_INTERFACE_NUM_PIPE" prompt="Enable Pipelining on the Pipe Interface" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SSPHY_INTERFACE_NUM_PIPE</ipxact:name>
      <ipxact:description>Decides the number of additional pipelines to be added in the Rx and Tx of the PIPE interface.

This is normally not required because the DWC_usb3 core registeres the PIPE inputs and outputs.

For FPGA validation, this is not needed because DCMs and clock-phase shifts are used for data capture in FPGA mode.
In ASIC mode, this is needed only when your SS PHY is placed far from your controller and you have problem in closing timing with PIPE interface. Because most on-chip PHY's PIPE interface runs at only 32bits at 125MHz, timing closer with no additional pipeline should not be an issue. Normally there is no reason to use more than 1 pipeline even if your PHY is placed far from your controller.

In the src/pwrm/DWC_usb3_pwrm_u3piu module, the following additional pipeline registers control the pipelining: phy_pipe3_rx_stage1, phy_pipe3_rx_stage2, phy_pipe3_tx_stage1, and phy_pipe3_tx_stage2.

Note: The following PIPE signals are not pipelined: 
 - pipe3_PowerPresent
 - pipe3_PhyStatus_async
 - pipe3_DataBusWidth
When you use this feature, these pipeline registers can be moved around during placement to break the routing timing delays. For more details, refer to the "USB 3.0 PHY Interface Unit (U3PIU)" section of the Databook.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HSPHY_INTERFACE" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_HSPHY_INTERFACE" prompt="High-Speed PHY Interface(s)?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HSPHY_INTERFACE</ipxact:name>
      <ipxact:description>Specifies the High-Speed PHY interface(s). 

Choose both UTMI+ and ULPI if you are not sure whether a UTMI+ or ULPI off-chip PHY will be used in the product, or if you have an on-chip UTMI+ PHY and want to bring out the ULPI interface as a backup in case the on-chip PHY fails. Because the MAC connects to the UTMI+ interface, choosing an ULPI interface adds about 1.5K gates for the ULPI-to-UTMI+ conversion logic. If the UTMI+ and ULPI option is chosen, the software can select either interface. 

For more details, refer to "Integrating with USB 2.0 PHY" section in the User Guide and "USB 2.0 PHY Interface Unit (U2PIU)" section in the Databook.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_ENABLE_HSIC" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_ENABLE_HSIC" prompt="Enable HSIC Support for USB 2.0 Ports?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_ENABLE_HSIC</ipxact:name>
      <ipxact:description>Selects the High Speed Interchip (HSIC) support for the USB 2.0 Ports.

When enabled, the HSIC mode of operation or normal UTMI/ULPI mode of operation is selected by register and input port controls.

The HSIC feature needs an HSIC Add-on license purchase.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_FAST_TAT_EN" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_FAST_TAT_EN" prompt="Enable UTMI-16bit Fast Turnaround Operation" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_FAST_TAT_EN</ipxact:name>
      <ipxact:description>Selects the USB2.0 FAST Turnaround logic for UTMI 16-bit mode.

Enable this parameter only if you require 16-bit UTMI support. In multi-port mode, this parameter can be enabled only if all your USB2.0 port clocks are synchronous to each other. If your USB2.0 port clocks are asynchronous to each other, then enabling this would cause functional failures.

The USB specification defines the High-Speed turn around delay to be 192 bit times, which translates into 12 PHY clocks at 30 MHz. Typically, the PHY will take 7 PHY clocks, leaving 5 PHY clocks to the controller. Without this FAST_TAT feature enabled, for IN transactions, when operating at a RAM clock of 60 MHz the USB3 device core can take up to 7 clocks for its response. In this case, the UTMI PHY must consume no more than 5 clocks for the Receive End Delay and Transmit Start Delay, combined. If the UTMI PHY cannot guarantee that the total time consumed for the Receive End Delay and Transmit Start Delay is 5 PHY clock cycles or less, then the turn-around delay may be higher than 192 HS bit times. As a result, the USB host may timeout (if the device is connected to the 5th hub in a 5-tier hub topology) for a data packet returned by the USB3 device core for an IN token. Enabling this option optimizes/eliminates some registers in the device mac/ptl path and host mode clock-crossing FIFO, thereby achieving faster turn-around. 

Note:
 - If you select all posedge-clocked synchronizers (DWC_USB3_EN_SYNC_ALL_POSEDGE=1) and you are not enabling this FAST_TAT feature, then the device mode minimum ram_clk frequency has to be 100 MHz to support the 5-clock turnaround time. If mac2_clk is 60 MHz and FAST_TAT_EN=1, enabling all posedge-clocked synchronizers does not increase the minimum ram_clk frequency of 60 MHz. If you plan to use ULPI mode only or UTMI 8-bit mode only, with ram_clk &gt;= 100MHz, then do not enable this option. Depending on your UTMI PHY time consumption, your ram clock frequency, and your all posedge-clocked synchronizers, select this option. 
 - For more details on how to set this parameter, see the "Recommendations for Selecting DWC_USB3_FAST_TAT_EN Value" section of the Databook.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_VENDOR_CTL_INTERFACE" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_VENDOR_CTL_INTERFACE" prompt="Enable UTMI PHY Vendor Control Interface?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_VENDOR_CTL_INTERFACE</ipxact:name>
      <ipxact:description>Specifies whether the UTMI+ PHY Vendor Control interface is enabled. 

For ULPI PHYs, since there are no additional ports Vendor Control is always enabled. 

For additional information, refer to "Global USB2 PHY Vendor Control Register(GUSB2PHYACCn)" section in Databook.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_GUSB2PHYCFG_INIT" prompt="Global USB2 PHY Configuration Register&amp;apos;s (GUSB2PHYCFG) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GUSB2PHYCFG_INIT</ipxact:name>
      <ipxact:description>Specifies the Global USB2 PHY Configuration Register's (GUSB2PHYCFG) power-on initialization value. 

The GUSB2PHYCFG register defines USB2 PHY configuration. The bits other than defined here must be 0. The different fields are:

bit[31]: UTMI PHY Soft Reset (PHYSoftRst)

bit[30]: 1'b0: USB2 FREECLK doesn't exist; 1'b1: It exists;

bit[29]:
 - 1'b0: LPM tokens to the ULPI PHY have 4 bytes with NOPID and EXTPID
 - 1'b1: LPM tokens to the ULPI PHY have 3 bytes with EXTPID only (opmode based EXTPID check)
bit[28:27]: HSIC_CON_WIDTH_ADJ Set the value of this field to 1, 2, or 3, in order to increase the connect duration from 3 to 4, 5, or 6 times the strobe periods.

bit[26]: INV_SEL_HSIC The application driver uses this bit to control the HSIC enable/disable function. This bit overrides and functionally inverts the if_select_hsic signal

bit[25]: Reserved

bit[24:22]: Host LS Rx-to-Tx packet gap (TurnaroundTime) - 0..7 corresponds to 2...5.5 bit times (increments of 0.5)

bit[21:19]: Host LS Tx-to-Tx InterpacketGap - 0..7 corresponds to 2...5.5 bit times (increments of 0.5)

bit[18]: ULPI External VBUS Indicator (ULPIExtVbusIndicator)

bit[17]: ULPI External VBUS Drive (ULPIExtVb)

bit[16]: Reserved

bit[15]: ULPI Auto Resume (ULPIAutoRes)

bit[14]: Reserved

bit[13:10]: USB 2.0 Turnaround Time. 4'h5 - 16-bit UTMI+; 4'h9 - 8-bit UTMI+/ULPI;

bit[9]: Transceiver Delay (XCVRDLY). 1'b0: No delay between xcvr_sel and tx_vld; 1'b1 - delay between xcvr_sel and tx_vld during chirp;

bit[8]: Enable utmi_sleep_n and utmi_l1_suspend_n (EnblSlpM)

The application uses this bit to control utmi_sleep_n and utmi_l1_sleepn_n assertion to the PHY in the L1 state.
 - 1b0: Disable
 - 1b1: Enable
Note: When a ULPI interface is configured, enabling this bit results in a write to bit[7] of the ULPI Function Control register as long as the ULPI PHY supports writing to this bit when the SleepM is asserted. The encoding used for Function Control register bits [7:6] is as follows: 

If {Bit7, Bit6, sleep_n, l1_suspend_n, suspend_n} is,
 - 5'b01111: state is normal working
 - 5'b00110: state is L2 Suspend
 - 5'b10101: state is L1 Suspend
 - 5'b11011: state is L1 Sleep
In host mode, when the `DWC_USB3_FREECLK_USB2_EXIST is 0, the ULPI port0 is not suspended if any of the following conditions are met:
 - At least one of the USB 2.0 ports is not suspended. 
Because the L1 Sleep requires quick wakeup time from the PHY, if the GUCTL1.OVRLD_L1_SUSP_COM is low, it is not treated as a suspend condition. If GUCTL1.OVRLD_L1_SUSP_COM is high, it is treated as a suspend condition and the clock can be suspended. The setting of this bit depends on how fast the Port0 PHY can recover from L1 sleep. 
If DWC_USB3_SUSPEND_ON_DISCONNECT_EN is 1, the port disconnect condition with SE0 or SE1 on linestate is treated equivalent to the suspend condition.
 - At least one of the USB 3.0 ports is not in P3
 - GUSB2PHYCFGn.EnblslpM is 0 for at least one of the ports Hardware LPM is enabled
bit[7]: Speed mode. 1'b0 USB2.0 High Speed (UTMI/ULPI); 1'b1 - USB1.1 Full Speed; 

bit[6]: When set, USB2.0 PHY enters Suspend mode if Suspend conditions are valid. 1'b0 - Disable; 1'b1 - Enable;

bit[5]: 1'b0 - 6-Pin Unidirectional FS; 1'b1 - 3-Pin Bidirectional FS;

bit[4]: 1'b0 - UTMI; 1'b1 - ULPI;

bit[3]: UTMI Mode: 1'b0 8-bit UTMI; 1'b1 - 16-bit UTMI; This bit should be 1'b0 for ULPI Mode.

bit[2:0]: HS/FS Timeout Calibration
If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. If you are developing your own xHCI host driver, then this register can be configured by your driver. For more information, see the "GUSB2PHYCFG(#n)" section of the Databook.</ipxact:description>
      <ipxact:value>'h40102400</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_GUSB3PIPECTL_INIT" prompt="Global USB3 PIPE Control Register&amp;apos;s (GUSB3PIPECTL) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GUSB3PIPECTL_INIT</ipxact:name>
      <ipxact:description>Specifies the Global USB3 PIPE Control Register's (GUSB3PIPECTL) power-on initialization value. The GUSB3PIPECTL register defines USB3 PIPE Control.
For more details, refer to PIPE3 Specification. The bits other than defined here must be 0. The different fields are:

bit[31]: Reset SSPHY. After setting this bit to 1, the software needs to clear this bit. Refer to the Databook for how to use this bit. 

bit[29]: SSInactP3ok; 0: During link state SS.Inactive, put PHY in P2 (Default), 1: During link state SS.Inactive, put PHY in P3            

bit[28]: DisRxDetP3
 - 0: If PHY is in P3 and Core needs to perform receiver detection, Core will perform receiver detection in P3 (default)
 - 1: If PHY is in P3 and Core needs to perform receiver detection, Core will change PHY power state to P2 and then perform receiver detection. After receiver detection, Core will change PHY power state to P3.
bit[27]: When set to 0, the core does U1/U2/U3 exit in P0. (Default behavior); When set to 1, the core does U1/U2/U3 exit in P1/P2/P3 respectively. 

This bit is added for SSPHY work-around where SSPHY injects glitch on pipe3_RxElecIdle (while receiving Ux exit LFPS) while pipe3_PowerDown change is in progress. This should be '0' for Synopsys-PHY. It is used by third-party SS PHY.

bit[26]: When set, Downstream port U1 ping receive timeout becomes 500ms instead of 300ms. Min Ping.LFPS receive duration is 8ns (1 mac3_clk). For downstream port only. This should be '0' for Synopsys-PHY. It is used by third-party SS PHY.

bit[25]: If the U1/U2 LFPS handshake fails, LTSSM will transition from U1/U2 to Recovery instead of SS Inactive. If Recovery fails, then the LTSSM can enter SS.Inactive. Enhancement only. Prevents inter-op issue if remote link does not do proper U1/U2 LFPS handshake.

bit[24]: When set, the core will always request PHY power change from P0 to P1/P2/P3 during U0 to U1/U2/U3 transition. If this bit is 0 and immediate Ux exit (remote initiated or Locally initiated) happens, Core may not request P1/P2/P3 power state change. This should be '1' for Synopsys-PHY. For non-Synopsys-PHY, check with your PHY vendor.

bit[23]: If DWC_USB3_GUSB3PIPECTL_INIT[22] is set and link is in U3 or Rx.Detect state, core will start receiver detection on rising edge of this bit. For Downstream port only. This feature should not be used during normal operation.

bit[22]: When set, the core will not do receiver detection in U3/Rx.Detect. DWC_USB3_GUSB3PIPECTL_INIT[23] should be used to start receiver detection manually. For Downstream port only. This feature should not be enabled for normal operation. Contact Synopsys if have to use this feature. 

bit[21:19]: Delay P0 to P1/P2/P3 request when entering U1/U2/U3 until (DWC_USB3_GUSB3PIPECTL_INIT[21:19]*8) 8B10B error happens or Pipe3_RxValid drops. DWC_USB3_GUSB3PIPECTL_INIT[18] must be "1" to enable this functionality. This should be 3'h001 for Synopsys-PHY. 

bit[18]: Delay P1/P2/P3 transition when entering U1/U2/U3 until rxelecIdle is 1 and Rxvalid is 0. 1 - Delay P1/P2/P3 transition; 0 - Do not delay P1/P2/P3 based on rxelecIdle and Rxvalid.

bit[17]: Enable USB3.0 SS PHY Suspend. 

bit[16:15]: PIPE Data Width. The clock after reset, these bits will reflect the values of the "pipe3_DataBusWidth" port. 2'b00 - 32-bit, 2'b01 - 16-bit, 2'b10 - 8-bit 

bit[14]: In link state U2, abort receiver detection if remote partner starts U2 exit. This should be '0' for Synopsys-PHY. Used by 3rd party SSPHY.

bit[13]: No Rx Detect If RxElecIdle Low, when set the core will skip Rx Detection if pipe3_RxElecIdle is low. Skipping means waiting for the appropriate timeout and then repeating the operation.

bit[12]: LFPS P0 Align, when set the core will deassert LFPS transmission on the same clock edge that it requests Phy power state 0 when exiting U1, U2, or U3 low power states. Otherwise, LFPS transmission will be asserted one clock earlier. In addition, the core will request symbol transmission two pipe3_rx_pclks after the PHY asserts PhyStatus when the PHY has switched from the P1 or P2 to P0 state. 

bit[11]: P3 P2 Transitions OK, when set the core will transition directly from Phy power states P2 to P3, and from P3 to P2. Otherwise, P0 will always be entered between P2 and P3 as defined in the PIPE3 specification. For Synopsys-PHY this should be "0". Used by 3rd party SSPHY.

bit[10]: P3 Exit Signal in P2, when set the core will always change the Phy power state to P2, before attempting a U3 exit handshake. For Synopsys-PHY this should be "0". Used by 3rd party SSPHY. 

bit[9]: LFPS Filter Value, when set filter LFPS reception with pipe3_RxVaid in PHY power state P0, i.e ignore LFPS reception from the PHY unless both pipe3_Rxelecidle and pipe3_RxValid are deasserted. 

bit[8]:
 - 1'b0 (Default) - Enable 400us delay to start Polling LFPS after RX_DETECT to allow VCM offset to settle to proper level.
 - 1'b1 - Disable 400us delay to start Polling LFPS after RX_DETECT to allow VCM offset to settle to proper level. 
bit[7]: SSICEn. 1'b0 - Pipe interface active; 1'b1 - RMMI interface active

bit[6]: Tx Swing; 1'b0 - Full Swing; 1'b1 - Low Swing;

bit[5:3]: Tx Margin, 3'b000 - Normal; 3'b001 - 800-1200mV Full Swing/400-700mV Half Swing; 3'b010, 3'b011 - Vendor Defined; 3'b101 - 3'b111 - 200-400mV Full Swing/100-200mV Half Swing;

bit[2:1]: Tx Deemphasis. 2'b00 - -6DB; 2'b01 - -3.5DB; 2'b10 - No Deemphesis; 2'b11 - Reserved;

bit[0]: PHY Elasticity Mode. 1'b0 - Nominal Half Full Buffer; 1'b1 - Nominal Empty Buffer;
If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. If you are developing your own xHCI host driver, then this register can be configured by your driver. For more information, see the "GUSB3PIPECTL(#n)" section in the Databook and "Integrating with SuperSpeed PHY" section in the User Guide.</ipxact:description>
      <ipxact:value>'h10c0002</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_PIPE_RXTERM_RESET_VAL" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_PIPE_RXTERM_RESET_VAL" prompt="pipe3_RxTermination signal hardware reset value?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_PIPE_RXTERM_RESET_VAL</ipxact:name>
      <ipxact:description>Determines the value of the pipe3_RxTermination signal while hardware reset is asserted.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_RXDET_IN_P3_DS" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_RXDET_IN_P3_DS" prompt="Enable Receiver detection in PHY power state P3?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_RXDET_IN_P3_DS</ipxact:name>
      <ipxact:description>For a USB 3.0 HUB or downstream port of Host, allow receiver detection in PHY power state P3.

Check whether your PHY supports this feature. Even though this feature is supported in Synopsys-PHY, some of the existing Synopsys-PHY test chips do not support this. Check with Synopsys whether a particular test chip supports this feature before enabling this feature for FPGA hardware validation.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SUSPEND_ON_DISCONNECT_EN" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_SUSPEND_ON_DISCONNECT_EN" prompt="In Host Mode Enable USB2.0 suspend during Disconnect?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SUSPEND_ON_DISCONNECT_EN</ipxact:name>
      <ipxact:description>For USB2.0 ports, enable suspend during disconnect. 

This saves power when no devices are connected to a USB 2.0 port.

Note: When DWC_USB3_NUM_SSIC_PORTS != 0, select DWC_USB3_SUSPEND_ON_DISCONNECT_EN = 1.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_BasicDeviceConfig" maximum="32" minimum="1" parameterId="DWC_USB3_DEVICE_NUM_INT" prompt="Number of Device Mode Event Buffers" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEVICE_NUM_INT</ipxact:name>
      <ipxact:description>Selects the number of event buffers in device mode. 

Each Event Buffer will also have a separate interrupt. If you have one processor in your SoC, then configuring multiple interrupts is not useful. This is used when you have multi-core or multiple processors in your SoC and you plan to do load balancing. There is no performance improvement expected when using multiple interrupts. In a SoC, mapping USB interrupts to one processor and another peripheral like Ethernet/SATA interrupt to another processor is alternate way of load balancing without making the drivers complex.

In device mode, you could use multiple interrupts when there are multiple processors in your system. Different endpoint interrupts can be mapped to different processors. For example, the control endpoints can be mapped to one processor and the mass-storage bulk endpoints can be mapped to another endpoint. You still need communication between these two processors. The driver could get complex due to synchronization requirements of the multiple threads between the processors. Another use case in a multi-function device is to route Ethernet related endpoint interrupts to one processor and mass-storage related interrupts to another processor. This interrupt mapping is done static during endpoint configuration. In device mode dynamic mapping of interrupt is not supported. Refer to section "Multiple Device Interrupt Support" in the databook.

In device mode, when you are using standard class driver interface (like the Linux BOT gadget driver), single interrupt is better for driver porting. The Synopsys mass-storage BOT and UASP reference driver supports only one interrupt.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_NUM_SSIC_PORTS" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_NUM_SSIC_PORTS" prompt="Number of SSIC Ports" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_SSIC_PORTS</ipxact:name>
      <ipxact:description>Specifies the number of SSIC ports.

The area of a SSIC port is about 20K gates excluding RAMs.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_BasicDeviceConfig" maximum="32" minimum="4" parameterId="DWC_USB3_NUM_EPS" prompt="Number of Device Mode Endpoints (4-32)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_EPS</ipxact:name>
      <ipxact:description>Specifies the number of device mode single directional endpoints, including control OUT and IN endpoints 0 which are always present. 

The DWC_usb3 core provides flexible endpoint configuration, where an endpoint can be mapped to any USB IN or OUT endpoint. For example, if you need 3 bi-directional endpoints then you need to choose 6 single directional endpoint configuration. Choose the maximum possible number of endpoints that must be supported for all configurations and alternate settings. Specifying additional endpoints is not useful because the core will not use the excess registers, resulting in increased gate count but no gain in performance. 

If area is not a concern, and you want a flexible design that can be used in multiple applications/projects, instantiate all 16 IN and 16 OUT endpoints. The default value of 8 endpoints reflects the UASP mass-storage class plus an ISOC application requirement: Control-OUT, Control-IN, Bulk-Data-OUT, Bulk-Data-IN, Bulk-Command-OUT, Bulk-Status-IN, ISOC-OUT, and ISOC-IN. The cost of an OUT/IN endpoint is 2.5/3.5Kgates plus transfer resource cache. For more guidance on configuring the number of device mode endpoints, see "Example Device Endpoint Mapping in Different Applications" section in the Databook.</ipxact:description>
      <ipxact:value>8</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SSIC_GEAR" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_SSIC_GEAR" prompt="Maximum gear speed for SSIC ports (HS_G1_ONLY, RESERVED, HS_G1_G2_G3)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SSIC_GEAR</ipxact:name>
      <ipxact:description>Specifies the maximum HS Gear that is supported for all the SSIC ports.

The controller supports all the lower HS Gears up to the maximum specified by this parameter.</ipxact:description>
      <ipxact:value>3</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_BasicDeviceConfig" maximum="16" minimum="2" parameterId="DWC_USB3_NUM_IN_EPS" prompt="Number of Device Mode Active IN Endpoints (2-16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_IN_EPS</ipxact:name>
      <ipxact:description>Specifies the maximum number of Device mode IN endpoints active at any time, including control IN endpoint 0, which is always present. 

This parameter determines the number of Device mode TxFIFOs to be instantiated and Tx RAM allocated. The default value of 4 IN endpoints reflects the UASP mass-storage class plus an ISOC application requirement: Control-IN, Bulk-Data-IN, Bulk-Status-IN, and ISOC-IN. For more guidance on configuring the number of device mode endpoints, see "Example Device Endpoint Mapping in Different Applications" section in the Databook.</ipxact:description>
      <ipxact:value>4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SSIC_NUM_LANE" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_SSIC_NUM_LANE" prompt="Max. number of Tx/Rx lanes for SSIC ports" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SSIC_NUM_LANE</ipxact:name>
      <ipxact:description>Specifies the maximum number of lanes of SSIC ports (common to both Tx &amp; Rx)</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_RMMI_DATA_WIDTH" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_RMMI_DATA_WIDTH" prompt="Tx/Rx Symbol width of RMMI interface for SSIC ports" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_RMMI_DATA_WIDTH</ipxact:name>
      <ipxact:description>Specifies the data width on RMMI interface of SSIC ports. Even when you configure the controller in 40-bit mode, you can still program it to operate in 20-bit mode using GUSB3RMMICTL(#n) register.
For supporting HS G3 with width 10, contact Synopsys.</ipxact:description>
      <ipxact:value>40</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_BasicDeviceConfig" maximum="32" minimum="2" parameterId="DWC_USB3_CACHE_TRBS_PER_TRANSFER" prompt="Number of cached TRBs per Transfer(2-32)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_CACHE_TRBS_PER_TRANSFER</ipxact:name>
      <ipxact:description>Selects the number of TRBs per transfer that can be cached within the core. The cost of TRB cache is, 16 * Number of cached TRBs bytes.

If your application performs scatter-gather operations where a single packet is split across more than two TRBs, then the TRB cache must also have at least one packet amount of TRBs (including Link TRB) for correct operation. For example, if a single 1 KB packet is scattered in 8 data buffers of each 128 bytes, then you would need a minimum of 9 TRBs cache (8 normal TRBs plus 1 Link TRB). 

For performance, it is recommended that the endpoint cache be able to hold one USB SS burst amount of TRBs. For example, if your system page size is 4KB and since the USB SS burst is 16, then 5 TRB cache is required for performance (4 normal TRBs plus 1 Link TRB). For ISOC applications, if your system bus latency is high, then it is recommended to have one BInterval data worth of TRB cache.

In addition, it is always recommended to enable the "Support Device/DbC Scatter-Gather Packets of 8 to 15 TRBs (DWC_USB3_DEV_EN_SCATTER_PACKETS_OF_8_TO_15_TRBS)" parameter in the "Advanced Configuration" section.</ipxact:description>
      <ipxact:value>4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EXT_BUFF_CONTROL" configGroups="DeviceConfig_BasicDeviceConfig" parameterId="DWC_USB3_EXT_BUFF_CONTROL" prompt="Enable Device External Buffer Control?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EXT_BUFF_CONTROL</ipxact:name>
      <ipxact:description>Enables Device External Buffer Control Sideband Controls.

When enabled, dev_usb_outep_pkt_buff_avail and dev_usb_inep_pkt_buff_avail signals are used to indicate space/packet availability in the external Rx and Tx FIFOs for each OUT and IN endpoints, respectively. Note that the External Buffer Control is mainly used for debug endpoints and has usage restrictions. Refer to the "External Buffer Control" section in the "Architecture Chapter" for more details.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_GUSB3RMMICTL_INIT" prompt="Global USB3 RMMI Control Register&amp;apos;s (GUSB3RMMICTL) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GUSB3RMMICTL_INIT</ipxact:name>
      <ipxact:description>Specifies Global USB3 RMMI Control Register (GUSB3RMMICTL) power-on initialization value. 

GUSB3RMMICTL register defines the fields for SSIC Control over RMMI interface. 

For field value definitions, refer to "GUSB3RMMICTL(#n) in the Databook. 

Reserved and unlisted bits must be set to 0.</ipxact:description>
      <ipxact:value>'h3800e4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP0" maximum="8192" minimum="10" parameterId="DWC_USB3_DEV_TXF0_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF0_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 0 depth in MDWIDTH-bit words

The recommended value is: (1 * (512 / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N)</ipxact:description>
      <ipxact:value>66</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_RXF" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_RXF_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_RXF_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects RxFIFO MaxPacket size in bytes.

Since all OUT Endpoints use the same RxFIFO, choose the largest packet size of the supported endpoint types.
 - The MaxPacket size of a Bulk endpoint is 1024 bytes for SS and 512 bytes for HS. 
 - The MaxPacket size of an Isoc endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application-specific.
 - The MaxPacket of an Interrupt endpoint is application-specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_RXF" maximum="16" minimum="1" parameterId="DWC_USB3_DEV_RXF_NUM_MAX_PACKETS" prompt="RxFIFO Size in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_RXF_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for RxFIFO

All Device OUT Endpoints use the same RxFIFO.

Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.

The default value is 3. However, for USB 2.0 only mode, the default is 2 in a low latency system (&lt; 10 uS), 3 for ISOC, and 4 for non-ISOC in high-latency system.</ipxact:description>
      <ipxact:value>3</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_RXF" maximum="8192" minimum="133" parameterId="DWC_USB3_DEV_RXF_DEPTH" prompt="RxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_RXF_DEPTH</ipxact:name>
      <ipxact:description>Selects Device RxFIFO depth in MDWIDTH-bit words. Not recommended to configure less than 2 MaxPacket size.

The default expression used is: (DWC_USB3_DEV_RXF_NUM_MAX_PACKETS * ((DWC_USB3_DEV_RXF_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES) + DWC_USB3_DEV_RXFIFO_OK_SPACE_MARGIN * 4 / DWC_USB3_MBYTES)

In addition to the packet storage, the RxFIFO also stores up to three 8-byte setup packets and requires a 16-byte synchronization allowance.

You can override this value depending upon your application requirements. 

Refer to "Memory Requirement" section of the Databook for more information.</ipxact:description>
      <ipxact:value>389</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SSIC_NON_SNPS_MPHY" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_SSIC_NON_SNPS_MPHY" prompt="CB interface not used in MPHY?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SSIC_NON_SNPS_MPHY</ipxact:name>
      <ipxact:description>Decides whether proprietary CB interface is used with the DWC_usb3 core for SSIC ports.

Supports Synopsys MPHY only if CB interface is selected.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP10" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF10_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF10_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 10
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF10_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF10_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP11" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF11_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF11_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 11
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF11_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF11_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP12" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF12_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF12_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 12
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum of 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF12_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF12_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP13" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF13_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF13_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 13
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is  (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF13_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF13_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP14" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF14_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF14_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 14
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF14_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF14_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP15" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF15_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF15_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 15
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF15_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF15_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF1_BURST_EN" configGroups="DeviceConfig_Device_INEP1" parameterId="DWC_USB3_DEV_TXF1_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF1_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 1 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 - In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence of packet-3.
 - For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP1" maximum="16" minimum="1" parameterId="DWC_USB3_DEV_TXF1_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF1_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 1

All Device IN Endpoints have a dedicated TxFIFO.
 - Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 - While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 - However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC, and 4 for non-ISOC high-latency system.
</ipxact:description>
      <ipxact:value>3</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP2" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF2_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF2_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 2
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF2_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF2_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>3</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP3" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF3_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF3_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 3
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF3_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF3_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP4" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF4_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF4_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 4
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF4_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF4_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP5" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF5_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF5_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 5
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum of 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF5_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF5_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP6" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF6_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF6_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 6
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF6_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF6_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP7" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF7_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF7_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 7
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF7_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF7_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP8" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF8_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF8_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 8
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF8_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF8_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP9" maximum="16" minimum="0" parameterId="DWC_USB3_DEV_TXF9_NUM_MAX_PACKETS" prompt="TxFIFO Depth in Number of MaxPackets(1 to 16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF9_NUM_MAX_PACKETS</ipxact:name>
      <ipxact:description>Selects Number of MaxPackets for TxFIFO 9
 All Device IN Endpoints have a dedicated TxFIFO.
 Burst support requires a minimum 3 MaxPacket FIFO size; however, for SuperSpeed, 5 MaxPackets is recommended if the master DMA bus latency plus access time for a 1KB packet is larger than 2.1 microseconds.
 While the recommended value is 3 for burstable endpoints, the recommended value is 2 for non-burstable endpoints (no more than 1 packet scheduled per micro-frame).
 However, for USB 2.0 only mode, the default is 2 in low latency system (&lt; 10 uS), 3 for ISOC and 4 for non-ISOC in high-latency system.
 NPI config: For UASP Data Endpoint which supports burst, 4 packets are recommended.
 The default value is (@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF9_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF9_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP1" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF1_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF1_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 1 MaxPacket size in bytes 
 - The MaxPacket of a Bulk endpoint is 1024 bytes (or 512 bytes in 2.0-only mode). 
 - The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.
 - The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP1" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF1_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF1_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 1 depth in MDWIDTH-bit words

The default expression used is: DWC_USB3_DEV_TXF1_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF1_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N

In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.

You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>388</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF2_BURST_EN" configGroups="DeviceConfig_Device_INEP2" parameterId="DWC_USB3_DEV_TXF2_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF2_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 2 supports burst transfers (Note: in 2.0-only mode, applies to ISOC Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_SSIC_ROM_DEPTH" configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_SSIC_ROM_DEPTH" prompt="Total Depth of the SSIC ROM @ 24-bit Data Width?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SSIC_ROM_DEPTH</ipxact:name>
      <ipxact:description>Specifies the depth of the SSIC ROM @ 24-bit Data Width 

The SSIC ROM contains all the MPHY attributes to be written into the MPHY during initialization (in HIBERN8) and also as part of the CONFIGURE_FOR_HS phase during RRAP. 

The DWC_usb3 controller reads the ROM contents from Address 0 to DWC_USB3_SSIC_ROM_RRAP_START_DEPTH-1 and then writes these attributes in to the MPHY.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP2" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF2_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF2_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 2 MaxPacket size in bytes.   
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP2" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF2_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF2_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 2 depth in MDWIDTH-bit words
 The default expression used is: DWC_USB3_DEV_TXF2_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF2_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>388</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF3_BURST_EN" configGroups="DeviceConfig_Device_INEP3" parameterId="DWC_USB3_DEV_TXF3_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF3_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 3 supports burst transfers (Note: in USB 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum of 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP3" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF3_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF3_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 3 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP3" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF3_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF3_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 3 depth in MDWIDTH-bit words
 The default expression used is: DWC_USB3_DEV_TXF3_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF3_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>259</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="PHYConfig_PHYConfig" maximum="256" minimum="0" parameterId="DWC_USB3_SSIC_ROM_RRAP_START_DEPTH" prompt="Starting Depth of CONFIGURE_FOR_HS MPHY Attribute data in the SSIC ROM?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_SSIC_ROM_RRAP_START_DEPTH</ipxact:name>
      <ipxact:description>Specifies the starting depth from which the locations in the SSIC ROM contains MPHY attributes to be written into the MPHY as part of the CONFIGURE_FOR_HS phase during RRAP.

The DWC_usb3 controller reads the ROM contents from DWC_USB3_SSIC_ROM_RRAP_START_DEPTH to DWC_USB3_SSIC_ROM_DEPTH-1 during the CONFIGURE_FOR_HS phase.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF4_BURST_EN" configGroups="DeviceConfig_Device_INEP4" parameterId="DWC_USB3_DEV_TXF4_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF4_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 4 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP4" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF4_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF4_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 4 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP4" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF4_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF4_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 4 depth in MDWIDTH-bit words. 
 The default expression used is: DWC_USB3_DEV_TXF4_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF4_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF5_BURST_EN" configGroups="DeviceConfig_Device_INEP5" parameterId="DWC_USB3_DEV_TXF5_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF5_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 5 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP5" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF5_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF5_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 5 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP5" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF5_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF5_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 5 depth in MDWIDTH-bit words. 
 The default expression used is: DWC_USB3_DEV_TXF5_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF5_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF6_BURST_EN" configGroups="DeviceConfig_Device_INEP6" parameterId="DWC_USB3_DEV_TXF6_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF6_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 6 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP6" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF6_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF6_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 6 MaxPacket size in bytes.  
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP6" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF6_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF6_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 6 depth in MDWIDTH-bit words. 
 The default expression used is: DWC_USB3_DEV_TXF6_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF6_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF7_BURST_EN" configGroups="DeviceConfig_Device_INEP7" parameterId="DWC_USB3_DEV_TXF7_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF7_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 7 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP7" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF7_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF7_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 7 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP7" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF7_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF7_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 7 depth in MDWIDTH-bit words
 The default expression used is: DWC_USB3_DEV_TXF7_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF7_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF8_BURST_EN" configGroups="DeviceConfig_Device_INEP8" parameterId="DWC_USB3_DEV_TXF8_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF8_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 8 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP8" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF8_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF8_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 8 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP8" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF8_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF8_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 8 depth in MDWIDTH-bit words.  
 The default expression used is: DWC_USB3_DEV_TXF6_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF6_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF9_BURST_EN" configGroups="DeviceConfig_Device_INEP9" parameterId="DWC_USB3_DEV_TXF9_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF9_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 9 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP9" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF9_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF9_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 9 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP9" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF9_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF9_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 9 depth in MDWIDTH-bit words.  
 The default expression used is: DWC_USB3_DEV_TXF9_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF9_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF10_BURST_EN" configGroups="DeviceConfig_Device_INEP10" parameterId="DWC_USB3_DEV_TXF10_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF10_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 10 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP10" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF10_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF10_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 10 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP10" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF10_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF10_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 10 depth in MDWIDTH-bit words.  
 The default expression used is: DWC_USB3_DEV_TXF10_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF10_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF11_BURST_EN" configGroups="DeviceConfig_Device_INEP11" parameterId="DWC_USB3_DEV_TXF11_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF11_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 11 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP11" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF11_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF11_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 11 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP11" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF11_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF11_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 11 depth in MDWIDTH-bit words
 The default expression used is: DWC_USB3_DEV_TXF11_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF11_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF12_BURST_EN" configGroups="DeviceConfig_Device_INEP12" parameterId="DWC_USB3_DEV_TXF12_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF12_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 12 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF13_BURST_EN" configGroups="DeviceConfig_Device_INEP13" parameterId="DWC_USB3_DEV_TXF13_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF13_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 13 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF14_BURST_EN" configGroups="DeviceConfig_Device_INEP14" parameterId="DWC_USB3_DEV_TXF14_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF14_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 14 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_TXF15_BURST_EN" configGroups="DeviceConfig_Device_INEP15" parameterId="DWC_USB3_DEV_TXF15_BURST_EN" prompt="Burst Supported?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF15_BURST_EN</ipxact:name>
      <ipxact:description>Selects whether TxFIFO 15 supports burst transfers (Note: in 2.0-only mode, applies to Isoc Endpoints only).
 In SS mode, burst-capable endpoints require a minimum 3 packet size FIFO. The reason is that the device must decide shortly
 after sending packet-1 whether to set the End of Burst (EOB) flag in packet-2's header, which depends on the presence
 of packet-3.
 For non-burst endpoints, a 2 MaxPacket size FIFO allocation is recommended.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP12" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF12_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF12_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 12 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP13" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF13_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF13_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 13 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP14" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF14_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF14_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 14 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP15" maximum="1024" minimum="1" parameterId="DWC_USB3_DEV_TXF15_MAX_PACKET_SIZE" prompt="MaxPacket Size in Bytes(1 to 1024)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF15_MAX_PACKET_SIZE</ipxact:name>
      <ipxact:description>Selects TxFIFO 15 MaxPacket size in bytes 
 The MaxPacket of a Bulk endpoint is 1024 bytes. 
 The MaxPacket of a ISOC endpoint is 1024 bytes when more than 1 packet is scheduled per Micro-Frame, otherwise this is application specific.  
 The MaxPacket of an Interrupt endpoint is application specific. For example, a mouse-like Human Interface Device (HID) uses a packet size of 4 bytes.</ipxact:description>
      <ipxact:value>1024</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP12" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF12_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF12_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 12 depth in MDWIDTH-bit words
 The default expression used is: DWC_USB3_DEV_TXF12_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF12_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP13" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF13_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF13_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 13 depth in MDWIDTH-bit words.  
 The default expression used is: DWC_USB3_DEV_TXF13_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF13_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP14" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF14_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF14_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 14 depth in MDWIDTH-bit words
 The default expression used is: DWC_USB3_DEV_TXF14_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF14_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="DeviceConfig_Device_INEP15" maximum="8192" minimum="0" parameterId="DWC_USB3_DEV_TXF15_DEPTH" prompt="TxFIFO Depth(0 to 8192)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF15_DEPTH</ipxact:name>
      <ipxact:description>Selects TxFIFO 15 depth in MDWIDTH-bit words
 The default expression used is: DWC_USB3_DEV_TXF15_NUM_MAX_PACKETS * ((DWC_USB3_DEV_TXF15_MAX_PACKET_SIZE + DWC_USB3_MBYTES - 1) / DWC_USB3_MBYTES + DWC_USB3_NPI_N) + DWC_USB3_NPI_N
 In addition to the packet storage, the TxFIFO also stores additional DWC_USB3_MDWIDTH bytes status for each packet and DWC_USB3_MDWIDTH bytes status for each endpoint.
 You can override this value depending upon your application requirements.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_DBC" configGroups="HostConfig_HostConfig" parameterId="DWC_USB3_EN_DBC" prompt="Enable xHCI Debug Capability?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_DBC</ipxact:name>
      <ipxact:description>Enables xHCI Debug Capability</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="16" minimum="1" parameterId="DWC_USB3_HOST_NUM_INTERRUPTER_SUPT" prompt="Number of Host Interrupters (1-16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_INTERRUPTER_SUPT</ipxact:name>
      <ipxact:description>Specifies the number of supported interrupters, each of which requires 100 bytes of internal RAM; in addition, depending on configuration, increasing the number of interrupters may cause the number of required scratchpad buffers to increase from 2 to 3. It is recommended not to select more than 8 interrupts; the future releases will remove support for more than 8 interrupts.

If you have one processor in your SoC, then configuring multiple interrupts is not useful. This is used when you have multi-core or multiple processors in your SoC and you plan to do load balancing. There is no performance improvement expected when using multiple interrupts. In a SoC, mapping USB interrupts to one processor and another peripheral like Ethernet/SATA interrupt to another processor is an alternate way of load balancing without increasing complexity of the drivers.

In host mode, this feature is intended for multi-core processors in the PC. For an embedded system, single interrupt is recommended. The open-source Linux driver does enable multiple interrupts when HW supports this feature, but likely does not actively use them.

If the "Separate Descriptor Queues" feature is enabled, the maximum number of interrupts supported is 8 since each interrupt needs an additional Event Queue FIFO which increases area.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_SEPARATE_DESC_QUEUES" configGroups="HostConfig_HostConfig" parameterId="DWC_USB3_EN_SEPARATE_DESC_QUEUES" prompt="Enable Separate Descriptor Queues" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_SEPARATE_DESC_QUEUES</ipxact:name>
      <ipxact:description>Specifies whether to implement separate descriptor fetch and writeback queues for SS, HS, and FS/LS bus instances. 

It is recommended to enable this parameter; option to not enable this feature will be removed in future releases.

When system bus latencies are unpredictable and less than the total bandwidth of the USB SS, HS, and FS/LS bandwidth, this feature provides fairness to the HS and FS/LS traffic and will improve HS and FS/LS periodic endpoints QoS. Even though there are separate Rx and Tx Data FIFOs for SS, and HS, and FS/LS businstances, high traffic in SS bus instance could impact HS and FS/LS QoS due to the common descriptor queue and due to the fixed DMA arbitration priority of RXQ, DWQ, then DFQ queues. With this enhancement, since each bus instance has its own RxQ, DWQ, and DFQ, the SS traffic does not affect other bus instances QoS.

This feature, which requires additional RAM, is available for 3.0 Host/DRD with MDWIDTH=64 or 128 and at most 8 interrupts. Please note that when this feature is enabled, in addition to the descriptor queues each Event (interrupt) also needs an Event Queue FIFO in order to queue the events from different bus instances in the order received.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HOST_NUM_U2_ROOT_PORTS" configGroups="HostConfig_HostConfig" parameterId="DWC_USB3_HOST_NUM_U2_ROOT_PORTS" prompt="Number of USB2.0 (HS/FS/LS) Root Hub Ports (1-15)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_U2_ROOT_PORTS</ipxact:name>
      <ipxact:description>Specifies the number of USB2 Root Hub ports. 

The area of a USB 2.0 port is about 12K gates.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HOST_NUM_U3_ROOT_PORTS" configGroups="HostConfig_HostConfig" parameterId="DWC_USB3_HOST_NUM_U3_ROOT_PORTS" prompt="Number of USB3 SS Root Hub Ports (1-15)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_U3_ROOT_PORTS</ipxact:name>
      <ipxact:description>Specifies the number of USB 3.0 Root Hub ports.

The area of a USB3 port is about 52K gates.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_NUM_DEVICE_SUPT" configGroups="HostConfig_HostConfig" parameterId="DWC_USB3_NUM_DEVICE_SUPT" prompt="Number of Devices Supported (64-127)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_DEVICE_SUPT</ipxact:name>
      <ipxact:description>Specifies the number of devices supported. 

The value you choose does not increase the DWC_usb3's gate count, but the memory requirements increase to store context information. Thirty-two (32) bytes of internal RAM is required for each device supported. For example, the Gold Tree testing used at USB-IF Host compliance has 9 Hubs, 2 WebCams, 1 Printer, 2 keyboards, 3 mass storage devices, 1 mouse, 1 headset. This configuration has a total of 19 devices. 

For more information, see "Area, Speed, Power, DFT, and Performance" appendix in the Databook.</ipxact:description>
      <ipxact:value>64</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="510" minimum="32" parameterId="DWC_USB3_HOST_NUM_PERIODIC_EP" prompt="Number of Periodic Endpoints Supported (32-510)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_PERIODIC_EP</ipxact:name>
      <ipxact:description>Specifies the number of periodic endpoints for all USB Bus-Instance (SS, HS, and FS/LS combined).

Twenty (20) bytes of internal RAM are required for each periodic endpoint. Increasing the value of this parameter may increase the number of scratchpad buffers needed by the hibernation feature. For example, if DWC_USB3_HOST_NUM_PERIODIC_EP is set to its maximum value (510), the number of scratchpad buffers required may be as much as 4, whereas if DWC_USB3_HOST_NUM_PERIODIC_EP is set to 64, the number of scratchpad buffers should not exceed 2. 

Most Periodic device like WebCam, Keyboard, Speaker, Hub, Mice, Game Controller, etc, use one to two periodic endpoints. On the other hand, some game controllers may use 7 to 15 periodic endpoints. For example, the Gold Tree testing used at USB-IF Host compliance has 9 Hubs, 2 WebCams, 1 Printer, 2 keyboards, 3 mass storage devices, 1 mice, and 1 headset. This configuration has a total of 20 periodic endpoints.

It limits the maximum number of periodic endpoints that can be configured by the application using the EP configuration command. When the application adds new periodic endpoints in the EP configuration command, the Host Controller allocates an unused entry to each endpoint. If there is no more free space, the Host Controller returns a "Resource Error" event TRB. Note, even if the application drops the endpoint in the same EP configuration command as "add EP", the Host Controller does not remove the endpoint information for the dropped endpoint immediately. This is because the command can get rejected because of bandwidth issues. The new added endpoint still needs a free cache slot and not the slot from a "dropped EP" in the same command.</ipxact:description>
      <ipxact:value>32</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_FREECLK_USB2_EXIST" configGroups="HostConfig_HostConfig" parameterId="DWC_USB3_FREECLK_USB2_EXIST" prompt="Does your USB 2.0 PHY Provides a free running PHY clock?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_FREECLK_USB2_EXIST</ipxact:name>
      <ipxact:description>Specifies whether your USB 2.0 PHY provides a free running PHY clock which is active when the clock control input is active. 

If your USB 2.0 PHY provides the free running PHY clock, it should be connected to "utmi_clk[0]" input. Rest of the "utmi_clk[n]" would be getting the respective port clocks. The Port-0 clock will be used by the core for generating internal mac2 clock.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_NUM_SS_USB_INSTANCES" configGroups="HostConfig_HostConfig" parameterId="DWC_USB3_NUM_SS_USB_INSTANCES" prompt="Number of SuperSpeed USB Bus-Instances (1-4)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_SS_USB_INSTANCES</ipxact:name>
      <ipxact:description>Specifies the number of SuperSpeed USB Bus-Instances.

This is recommended only if your SoC master-bus/memory bandwidth can sustain the USB3.0 peek bandwidth for all the USB3.0 SS Bus-Instances (DWC_USB3_NUM_SS_USB_INSTANCES *  8Gbs) and has less bus access latency. The USB 3.0 controller pipelines only up to 2 packets reads and in high latency system the system bus bandwidth may not meet the USB bandwidth required due to the pipelining limit. In such case, it is recommended to instantiate multiple single port controllers. 

Number of SuperSpeed USB Bus-Instances cannot be greater than USB 3.0 SS Root Hub ports (DWC_USB3_NUM_SS_USB_INSTANCES &lt;= DWC_USB3_HOST_NUM_U3_ROOT_PORTS).

When the number of SuperSpeed USB Bus-Instances is equal to the number of USB 3.0 ports, you can do concurrent USB 3.0 transfers on each port. 

For example, if you have 4 ports and 4 SuperSpeed USB Bus-Instances, then in concurrent mode your effective data rate is 32 Gbps (8 Gbps * 4). The area overhead of a SuperSpeed USB Bus-Instance is about 145K gates. When compared to the area of the PHY, which is about 400K gates per port, this is small, but the performance increase is multifold. For example, if you have 4 ports, 1 port can be connected to a USB 3.0 drive, another port can be connected to a display, and 2 more ports can be used as general purpose I/O interface. Here, each port has a guaranteed throughput of 8 Gbps (or 4 Gbps simplex).</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_NUM_HS_USB_INSTANCES" configGroups="HostConfig_HostConfig" parameterId="DWC_USB3_NUM_HS_USB_INSTANCES" prompt="Number of High-Speed USB Bus-Instances (1-4)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_HS_USB_INSTANCES</ipxact:name>
      <ipxact:description>Specifies the number of High-Speed USB Bus-Instances. When the number of High-Speed USB Bus-Instances is equal to the number of root ports, you can do concurrent High-Speed transfers on each port. For example, if you have 4 ports and 4 High-Speed USB Bus-Instances, then in concurrent mode your effective data rate is 1.92 Gbps (480 Mbps * 4). The area overhead of a HighSpeed USB Bus-Instance is about 55K gates.

Number of high-speed USB Bus-Instances cannot be greater than USB 2.0 Root Hub ports (DWC_USB3_NUM_HS_USB_INSTANCES &lt;= DWC_USB3_HOST_NUM_U2_ROOT_PORTS).</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="126" minimum="16" parameterId="DWC_USB3_DBC_TRBS_PER_TRANSFER" prompt="Number of Cached TRBs for Each Debug Capability Endpoint (16-126)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DBC_TRBS_PER_TRANSFER</ipxact:name>
      <ipxact:description>It is recommended not to reduce the size from default value.

Specifies the number of TRBs that can be cached in the core for each cached endpoint in the Debug Capability. 

16 bytes of internal RAM are allocated for each cached TRB. The TRB cache must be large enough to hold TRBs (including Link TRBs) for at least one maximum-packet-size packet. For better performance or when system latency is large, TRB cache for maximum-burst-size of packets is recommended.</ipxact:description>
      <ipxact:value>16</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="32" minimum="1" parameterId="DWC_USB3_HOST_NUM_CACHE_EP_PER_SS_INSTANCE" prompt="Number of Cached Endpoints for Each SuperSpeed USB Instance (1-32)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_CACHE_EP_PER_SS_INSTANCE</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the number of SuperSpeed endpoints that can be cached for each SuperSpeed USB Bus-Instance. (136 + `DWC_USB3_HOST_NUM_CACHE_TRB_PER_SS_EP * 16) bytes of internal RAM are allocated for each super speed endpoint cache.</ipxact:description>
      <ipxact:value>8</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="126" minimum="2" parameterId="DWC_USB3_HOST_NUM_CACHE_TRB_PER_SS_EP" prompt="Number of Cached TRBs for Each Cached SuperSpeed Endpoint (2-126)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_CACHE_TRB_PER_SS_EP</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.
Specifies the number of TRBs that can be cached in the core for each cached SuperSpeed endpoint. 16 bytes of internal RAM are allocated for each cached TRB. 

The TRB cache must be large enough to hold TRBs (including Link TRBs and Event Data TRBs) for at least one maximum burst size of packets. For example, if your system page size is 4 KB (one TRB holds up to four 1 KB packets) and since USB 3.0 burst size is 16 packets, you need at least a cache size of 6 TRBs (4 data TRBs, 1 Link TRB, and 1 Event Data TRB). If your application performs scatter-gather operations where a single packet is split across more than two TRBs then the cache size should account for this. For example, if a single 1 KB packet is scattered in 4 data buffers of each 256 bytes each then you would need a minimum of 66 TRB cache (64 normal TRB, 1 Link TRB, 1 Event Data TRB). If periodic endpoints exit, the TRB cache must be large enough to hold TRBs (including Link TRBs and Event Data TRBs) for at least one service interval.</ipxact:description>
      <ipxact:value>16</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="32" minimum="1" parameterId="DWC_USB3_HOST_NUM_CACHE_EP_PER_HS_INSTANCE" prompt="Number of Cached Endpoints for Each High-Speed USB Instance (1-32)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_CACHE_EP_PER_HS_INSTANCE</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the number of High-Speed endpoints that can be cached for each High-Speed USB Bus-Instance. (120 + `DWC_USB3_HOST_NUM_CACHE_TRB_PER_HS_EP * 16) bytes of internal RAM are allocated for each high speed endpoint cache. If SS is enabled and if the system bus latency is more than 2.1uS, then at least 20 endpoint cache and the following " Number of Cached TRBs for Each Cached High-Speed Endpoint" parameter size can be reduced to 10 from 20 for optimized RAM size.</ipxact:description>
      <ipxact:value>10</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="126" minimum="2" parameterId="DWC_USB3_HOST_NUM_CACHE_TRB_PER_HS_EP" prompt="Number of Cached TRBs for Each Cached High-Speed Endpoint (2-126)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_CACHE_TRB_PER_HS_EP</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the number of TRBs that can be cached in the core for each cached High-Speed endpoint. 16 bytes of internal RAM are allocated for each cached TRB. 

The TRB cache must be large enough to hold TRBs (including Link TRBs and Event Data TRBs) for at least one maximum burst size of packets. For example, if your system page size is 4 KB (one TRB holds up to four 1 KB packets) and since USB 2.0 burst size is 3 packets, you need at least a cache size of 3 TRBs (1 data TRBs, 1 Link TRB, and 1 Event Data TRB). If your application performs scatter-gather operations where a single packet is split across more than two TRBs then the cache size should account for this. For example, if a single 1 KB packet is scattered in 4 data buffers of each 256 bytes each then you would need a minimum of 14 TRB cache (3 * 4 normal TRB, 1 Link TRB, 1 Event Data TRB). If periodic endpoints exit, The TRB cache must be large enough to hold TRBs (including Link TRBs and Event Data TRBs) for at least one service interval.</ipxact:description>
      <ipxact:value>8</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="32" minimum="1" parameterId="DWC_USB3_HOST_NUM_CACHE_EP_PER_FSLS_INSTANCE" prompt="Number of Cached Endpoints for Each Full/Low-Speed USB Instance (1-32)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_CACHE_EP_PER_FSLS_INSTANCE</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the number of Full/Low-Speed endpoints that can be cached for each Full/Low-Speed USB Bus-Instance. (120 + `DWC_USB3_HOST_NUM_CACHE_TRB_PER_FSLS_EP * 16) bytes of internal RAM are allocated for each full/low speed endpoint cache.</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="126" minimum="2" parameterId="DWC_USB3_HOST_NUM_CACHE_TRB_PER_FSLS_EP" prompt="Number of Cached TRBs for Each Cached Full-Low-Speed Endpoint (2-126)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_NUM_CACHE_TRB_PER_FSLS_EP</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the number of TRBs that can be cached in the core for each cached Full/Low-Speed endpoint. 16 bytes of internal RAM are allocated for each cached TRB. 

The TRB cache must be large enough to hold TRBs (including Link TRBs and Event Data TRBs) for at least one maximum packet size of packets. If your application performs scatter-gather operations where a single packet is split across more than two TRBs then the cache size should account for this. For example, if a single 1 KB packet is scattered in 4 data buffers of each 256 bytes each then you would need a minimum of 6 TRB cache (4 normal TRB, 1 Link TRB, 1 Event Data TRB). If periodic endpoints exit, The TRB cache must be large enough to hold TRBs (including Link TRBs and Event Data TRBs) for at least one service interval.</ipxact:description>
      <ipxact:value>8</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="32" minimum="1" parameterId="DWC_USB3_NUM_RXF_SS_PKTS" prompt="Size of the SuperSpeed RxFIFO in Number of 1024-byte Packets - Per SS Bus-Instance (1-32)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_RXF_SS_PKTS</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the size of the SuperSpeed RxFIFO in number of 1024-byte packets per SS Bus-Instance. 

Each SuperSpeed USB Bus-Instance would require one RxFIFO. For example, if you have 2 SS Bus-Instances and chose 3 for this parameter, then 6144 bytes of RAM is allocated for SS RxFIFO. Each 1024 bytes provides a 2.1us latency tolerance. If the system bus latency is more than 2.1uS, then at least a 5 to 6 packet buffer is recommended. For more information, see the "Memory Requirements" section in the Databook.</ipxact:description>
      <ipxact:value>3</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="16" minimum="1" parameterId="DWC_USB3_NUM_RXF_HS_PKTS" prompt="Size of the High-Speed RxFIFO in Number of 1024-byte Packets - Per HS Bus-Instance (1-16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_RXF_HS_PKTS</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the size of the High-Speed RxFIFO in number of 1024-byte packets per HS Bus-Instance. 

Each High-Speed USB Bus-Instance requires one RxFIFO. For example, if you have 2 HS Bus-Instances and chose 2 for this parameter, then 4096 bytes of RAM is allocated for HS RxFIFO. Since HS ISOC max packet size is 1024, at least 2048 bytes should be allocated for HS RxFIFO. Each 1024 bytes provides 20us latency tolerance. 

For more information, see the "Memory Requirements" section of the Databook.</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="4" minimum="1" parameterId="DWC_USB3_NUM_RXF_FSLS_PKTS" prompt="Size of the Full-Speed/Low-Speed RxFIFO in Number of 1024-byte Packets - Per FS/LS Bus-Instance (1-4)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_RXF_FSLS_PKTS</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the size of the Full-Speed/Low-Speed RxFIFO in number of 1024-byte packets per FS/LS Bus-Instance.

Each Full-Speed/Low-Speed USB Bus-Instance requires one RxFIFO. For example, if you have 1 FS/LS Bus-Instances and chose 1 for this parameter, then 1024 bytes of RAM is allocated for FS/LS RxFIFO. Since FS ISOC max payload size is 1023, at least 1024 bytes must be allocated for FS/LS RxFIFO.

For more information, see the "Memory Requirements" section of the Databook.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="32" minimum="1" parameterId="DWC_USB3_NUM_TXF_SS_PKTS" prompt="Size of the SuperSpeed TxFIFO in Number of 1024-byte Packets - Per SS Bus-Instance (1-32)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_TXF_SS_PKTS</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the size of the SuperSpeed TxFIFO in number of 1024-byte packets per SS Bus-Instance. 

Each SuperSpeed USB Bus-Instance requires one TxFIFO. For example, if you have 2 SS Bus-Instances and chose 4 for this parameter, then 8182 bytes of RAM is allocated for SS TxFIFO. In a PCIe application, the read access has more latency than write. It is recommended to allocate more TxFIFO than RxFIFO which gives better area and performance trade off. Each 1024byte provides a 2.1us latency tolerance. If the system bus latency is more than 2.1uS, then at least a 5 to 6 packet buffer is recommended. 

For more information, see the "Memory Requirements" section of the Databook.</ipxact:description>
      <ipxact:value>4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="16" minimum="1" parameterId="DWC_USB3_NUM_TXF_HS_PKTS" prompt="Size of the High-Speed TxFIFO in Number of 1024-byte Packets - Per HS Bus-Instance (1-16)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_TXF_HS_PKTS</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the size of the High-Speed TxFIFO in number of 1024-byte packets per HS Bus-Instance. 

Each High-Speed USB Bus-Instance would require one TxFIFO. For example, if you have 2 HS Bus-Instances and chose 2 for this parameter, then 4096 bytes of RAM is allocated for HS TxFIFO. Because HS ISOC max packet size is 1024, at least 2048 bytes must be allocated for HS TxFIFO. Each 1024 bytes provides 20us latency tolerance. 

For more information, see the "Memory Requirements" section of the Databook.</ipxact:description>
      <ipxact:value>2</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HostConfig_HostConfig" maximum="4" minimum="1" parameterId="DWC_USB3_NUM_TXF_FSLS_PKTS" prompt="Size of the Full-Speed/Low-Speed TxFIFO in Number of 1024-byte Packets - Per FS/LS Bus-Instance (1-4)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_NUM_TXF_FSLS_PKTS</ipxact:name>
      <ipxact:description>Recommended not to reduce the size from default value.

Specifies the size of the Full-Speed/Low-Speed TxFIFO in number of 1024-byte packets per FS/LS Bus-Instance. 

Each Full-Speed/Low-Speed USB Bus-Instance requires one TxFIFO. For example, if you have 1 FS/LS Bus-Instances and chose 1 for this parameter, then 1024 bytes of RAM is allocated for FS/LS TxFIFO. Since FS ISOC max payload size is 1023, at least 1024 bytes should be allocated for FS/LS TxFIFO. 

For more information, see the "Memory Requirements" section of the Databook.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_GTXTHRCFG_INIT" prompt="Global Transmit Threshold Configuration Register (GTXTHRCFG) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GTXTHRCFG_INIT</ipxact:name>
      <ipxact:description>Specifies the Global Transmit Threshold Configuration Register (GTXTHRCFG) power-on initialization value. 

This register contains threshold enable bits and threshold count fields. To enable USB packet thresholding upon power-on, then you need to update this value. For more information, see the "Memory Requirements" and "GTXTHRCFG" sections of the Databook and "TX/RX Data FIFO Sizes and TX/RX Threshold Control Register Settings" section of User Guide.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. 

If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_GRXTHRCFG_INIT" prompt="Global Receive Threshold Configuration Register (GRXTHRCFG) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GRXTHRCFG_INIT</ipxact:name>
      <ipxact:description>Specifies the Global Receive Threshold Configuration Register (GRXTHRCFG) power-on initialization value. 

This register contains threshold enable bits and threshold count fields. To enable USB packet thresholding upon power-on, then you need to update this value. For more information, see the "Memory Requirements" and "GRXTHRCFG" sections of the Databook and "TX/RX Data FIFO Sizes and TX/RX Threshold Control Register Settings" section of User Guide.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. 

If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_GCTL_INIT" prompt="Global Control Register&amp;apos;s (GCTL) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GCTL_INIT</ipxact:name>
      <ipxact:description>Specifies the Global Control Register-1's (GCTL) power-on initialization value.

bit [31:19]: Suspend Clock Scaledown value (suspend_clk_period/mac3_clk_period)

bit [18]: Master filter bypass

bit [17]: Bypass SetAddress in Device - For simulation purpose only

bit [16]: Attempt 3 SS connection

bit [15:14]: SOF Scaledown Value - Simulation purpose only

bit [13:12]: Port Capability Direction
 - 2'b01: for default Host operation (Power on value allowed only when DWC_USB3_MODE=1)
 - 2'b10: for default Device operation (Power on value allowed only when DWC_USB3_MODE!=1)
 - 2'b11 - for default OTG operation (Power on value allowed only when DWC_USB3_MODE=2 and DWC_USB3_EN_OTG!=0)
bit [11]: Core Soft Reset

bit [10]: SOFITPSYNC - Core generated ITP from the ref_clk based counter

bit [9]: Disable U1/U2 timer Scaledown

bit [8]: Debug attach

bit [7:6]: RAM Clock Select 
 - 2'b00: bus clock.
 - 2'b01: pipe clock; only in device mode.
 - 2'b10: pipe/2 clock in device mode; automatic switching between pipe/2 mac2_clk in host mode.
 - 2'b11: mac2_clk in device mode; automatic switching between pipe_clk/mac2_clk in host mode. (supported only when 8-bit UTMI/ULPI is used, and not supported in 16-bit UTMI mode).
Note: In host mode, it is recommended to have the ram_clk assigned to bus_clk. However, depending on the bandwidth requirement, you can optionally have the controller dynamically switch the ram_clk between bus_clk, pipe_clk and mac2_clk based on the available USB 2.0/3.0 clocks. For details on when this feature can be enabled in host mode, refer to "Minimum Clock Frequencies: bus_clk, ram_clk" section in the Databook.

bit [5:4]: Scaledown Mode 

bit [3]: 1'b0: Enable Scrambling; 1'b1: Disable Scrambling;

bit [2]: Enable 8 us LFPS for U2 exit

bit [1]: Global Hibernation Enable

bit [0]: 1'b0 - Enable internal clock gating; 1'b1 - Disable internal clock gating;
If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. If you are developing your own xHCI host driver, then this register must be configured by your driver.

For more information, see the "GCTL" section of the Databook.</ipxact:description>
      <ipxact:value>'h30c12004</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_ECC" configGroups="BasicConfig_BasicConfig" parameterId="DWC_USB3_EN_ECC" prompt="Enable Automotive ECC Generation and Checking for RAMs?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_ECC</ipxact:name>
      <ipxact:description>Enables automotive ECC generation, correction, and checking

When enabled, the controller generates ECC, corrects 1-bit errors, and reports multi-bit errors to the software. The area of ECC logic is approximately "Number of RAMs * 2.5 KGates in 64-bit mode/4.5 Kgates in 128-bit mode". Single-bit error correction is transparent to the software. If a multi-bit error happens, it will be reported to the software through an event and the controller will go in to safe halted state. The only recovery is to reset the controller and re-enumerate.

Note: This parameter can only be enabled when you have an automotive package license for USB 3.0 in addition to base licenses for USB 3.0 Host, Device, or DRD products.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HUB_NUM_U3_PORTS" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_HUB_NUM_U3_PORTS" prompt="Number of USB 3.0 Capable Hub Ports (1-15)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_NUM_U3_PORTS</ipxact:name>
      <ipxact:description>Specifies the number of USB 3.0 capable down-stream Hub ports.</ipxact:description>
      <ipxact:value>4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_HUB_SFLASH_SUPT" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_EN_HUB_SFLASH_SUPT" prompt="Enable Xilinx Serial Flash-RAM/PROM Support?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_HUB_SFLASH_SUPT</ipxact:name>
      <ipxact:description>Specifies whether Xilinx Serial Flash-RAM/PROM support is required to load Hub Descriptors.

The memory requirements for the Hub descriptor is 256bytes (2048bits).

Refer to Xilinx website for a Serial Flash/PROM that meets your requirements. Most Xilinx Serial Flash/PROM are much larger in size than the required 2048bits.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="HubConfig_HubConfig" maximum="128" minimum="4" parameterId="DWC_USB3_HUB_SFLASH_DIVFACTOR" prompt="Mac Clock (125MHz) to Xilinx Serial Flash-RAM/PROM Clock Divide Factor?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_SFLASH_DIVFACTOR</ipxact:name>
      <ipxact:description>Specifies the MAC clock(125MHz) to Serial Flash/PROM clock divide factor.

The typical Xilinx Serial Flash/PROM memory operating frequency range is 2.5 to 20 MHz. Refer to the Xilinx website for a Serial Flash/PROM that meets your requirements.</ipxact:description>
      <ipxact:value>16</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_JTAG_INTERFACE" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_JTAG_INTERFACE" prompt="Enable JTAG Debug support?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_JTAG_INTERFACE</ipxact:name>
      <ipxact:description>Specifies whether JTAG debug interface is enabled.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HUB_NUM_RXHEADERS" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_HUB_NUM_RXHEADERS" prompt="Number of Headers in Each Rx Header Buffer?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_NUM_RXHEADERS</ipxact:name>
      <ipxact:description>Specifies the number of Headers in each Rx Header Buffers.</ipxact:description>
      <ipxact:value>4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HUB_NUM_TXHEADERS" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_HUB_NUM_TXHEADERS" prompt="Number of Headers in Each Tx Header Buffer?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_NUM_TXHEADERS</ipxact:name>
      <ipxact:description>Specifies the number of Headers in each Tx Header Buffers</ipxact:description>
      <ipxact:value>4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HUB_NUM_UPSTRMRX_DATAPKTS" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_HUB_NUM_UPSTRMRX_DATAPKTS" prompt="Number of Packets in Upstream Rx Data Packet Buffer?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_NUM_UPSTRMRX_DATAPKTS</ipxact:name>
      <ipxact:description>Specifies the number of packets in Upstream Rx Data Packet Buffer. Each packet requires 1024 bytes of space.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HUB_NUM_UPSTRMTX_DATAPKTS" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_HUB_NUM_UPSTRMTX_DATAPKTS" prompt="Number of Packets in Upstream Tx Data Packet Buffer?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_NUM_UPSTRMTX_DATAPKTS</ipxact:name>
      <ipxact:description>Specifies the number Packets in Upstream Tx Data Packet Buffer. Each packet needs 1024 bytes of space.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HUB_DESC_DEPTH" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_HUB_DESC_DEPTH" prompt="Depth of the Descriptor ROM or Serial-Flash (in 32-bit Dwords)?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_DESC_DEPTH</ipxact:name>
      <ipxact:description>Specifies the depth of the Descriptor ROM or Serial-Flash in 32-bit Dwords. 

For example, a value of 64 represents a 256byte (64 * 4) ROM.</ipxact:description>
      <ipxact:value>64</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HUB_DESC_SS_START_DEPTH" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_HUB_DESC_SS_START_DEPTH" prompt="Starting Depth of the SS Descriptors in the ROM or Serial-Flash (in 32-bit Dwords)?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_DESC_SS_START_DEPTH</ipxact:name>
      <ipxact:description>Specifies the starting depth of the Descriptor ROM or Serial-Flash in 32-bit Dwords used for DWC_usb3 core.

If you share the same ROM or Serial-Flash between USB2.0 hub and USB3.0 SS Hub, the lower portion of the ROM or Serial-Flash has data for the USB2.0 Hub and the upper part has data for the SS Hub. The DWC_usb3 controller reads the entire ROM or Serial-Flash but uses only the data from this depth. The DWC_usb3 controller provides the USB2.0 descriptors to the USB2.0 controller through the "hub_usb2_desc" interface.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HUB_ENABLE_VCI" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_HUB_ENABLE_VCI" prompt="Enable Vendor Control Command Interface" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_ENABLE_VCI</ipxact:name>
      <ipxact:description>Controls the enabling of Vendor Control Interface for decoding Vendor Control Commands for hub control endpoint (Ep0).

When enabled, the hub will not STALL vendor control commands and passes these commands externally through the Vendor Control Interface (VCI) for external decoding. When disabled ( default) hub will STALL any Vendor Control commands.
 - 0: Vendor Control Interface does not exit and hub STALLS Vendor Control Commands.
 - 1: Vendor Control commands are not stalled and are passed externally for decoding through the VCI.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_HUB_ENABLE_SCRAMBLING" configGroups="HubConfig_HubConfig" parameterId="DWC_USB3_HUB_ENABLE_SCRAMBLING" prompt="Scrambling Control For Simulation" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HUB_ENABLE_SCRAMBLING</ipxact:name>
      <ipxact:description>This option only affects the simulation.

This controls if scrambling is enabled/disabled when running hub tests in coreConsultant.

This directly controls the hub_enable_scrambling input pin of the Hub.
 - 0: A value of 0 will be assigned to "hub_enable_scrambling" input to disable scrambling on all ports.
 - 1: A value of 1 will be assigned to "hub_enable_scrambling" input to enable scrambling on all ports.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_GSBUSCFG0_INIT" prompt="Global System Bus Configuration Register-0&amp;apos;s (GSBUSCFG0) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GSBUSCFG0_INIT</ipxact:name>
      <ipxact:description>Specifies the Global System Bus Configuration Register-0's (GSBUSCFG0) power-on initialization value. The GSBUSCFG0 register defines the system bus configuration.

The bits other than defined here must be 0. The different fields are:
 - bit[31:28]: AHB-prot/AXI-cache/OCP-ReqInfo for Data Read
 - bit[27:24]: AHB-prot/AXI-cache/OCP-ReqInfo for Descriptor Read
 - bit[23:20]: AHB-prot/AXI-cache/OCP-ReqInfo for Data Write
 - bit[19:16]: AHB-prot/AXI-cache/OCP-ReqInfo for Descriptor Write
 - bit[15:12]: Reserved 
 - bit[11]: 1'b1 - Data Access is Big Endian
 - bit[10]: 1'b1 - Descriptor Access is Big Endian
 - bit[9]: 1'b1 - Data Write is Posted
 - bit[8]: 1'b1 - Descriptor Write is Posted
 - bit[7]: 1'b1 - Enable INCR256 Burst Type
 - bit[6]: 1'b1 - Enable INCR128 Burst Type
 - bit[5]: 1'b1 - Enable INCR64 Burst Type
 - bit[4]: 1'b1 - Enable INCR32 Burst Type
 - bit[3]: 1'b1 - Enable INCR16 Burst Type
 - bit[2]: 1'b1 - Enable INCR8 Burst Type
 - bit[1]: 1'b1 - Enable INCR4 Burst Type
 - bit[0]: 1'b1 - Enable Undefined Length INCR Burst Type
If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. If you are developing your own xHCI host driver, then this register must be configured by your driver. Refer to "GSBUSCFG0" section of the Databook for more details.</ipxact:description>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_GSBUSCFG1_INIT" prompt="Global System Bus Configuration Register-1&amp;apos;s (GSBUSCFG1) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GSBUSCFG1_INIT</ipxact:name>
      <ipxact:description>Specifies the Global System Bus Configuration Register-1's (GSBUSCFG1) power-on initialization value. The GSBUSCFG1 register defines the system bus configuration.

The bits other than defined here must be 0. The different fields are:
 - bit[31:13]: Reserved
 - bit[12]: AXI, 1 KB Page Boundary Enable 
 - bit[11:8]: AXI Pipelined Transfer Burst Request Limit
 - bit[7:0]: Reserved
If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. If you are developing your own xHCI host driver, then this register must be configured by your driver. Refer to "GSBUSCFG1" section of the Databook for more details.</ipxact:description>
      <ipxact:value>'h300</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_GTXFIFOPRIDEV_INIT" prompt="Global Device TXFIFO DMA Priority Register&amp;apos;s (GTXFIFOPRIDEV) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GTXFIFOPRIDEV_INIT</ipxact:name>
      <ipxact:description>Specifies the Global Device TXFIFO DMA Priority Register's (GTXFIFOPRIDEV) power-on initialization value.

This register assigns FIFOs to either the high or low round-robin DMA priority groups. Register bit[n] represents the priority level (0: low; 1: high) of FIFO[n].

The DMA arbiter grants system bus access on a per-packet basis:
 - First priority to the high-priority FIFOs on a round-robin basis
 - Second priority to the low-priority FIFOs on a round-robin basis
For more information, see the "GTXFIFOPRIDEV" section in the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. 

If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_GTXFIFOPRIHST_INIT" prompt="Global Host TXFIFO DMA Priority Register&amp;apos;s (GTXFIFOPRIHST) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GTXFIFOPRIHST_INIT</ipxact:name>
      <ipxact:description>Specifies the Global Host TXFIFO DMA Priority Register's (GTXFIFOPRIHST) power-on initialization value.

This register assigns FIFOs to either the high or low round-robin DMA priority groups of each speed group: SS BIs and HS/FSLS BIs. Register bit[n] represents the priority level (0: low; 1: high) of FIFO[n].

The DMA arbiter grants system bus access on a per-packet basis for each speed group:
 - First priority to the high-priority FIFOs on a round-robin basis
 - Second priority to the low-priority FIFOs on a round-robin basis
For more information, see the "GTXFIFOPRIHST" section in the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. 

If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_GRXFIFOPRIHST_INIT" prompt="Global Host RXFIFO DMA Priority Register&amp;apos;s (GRXFIFOPRIHST) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GRXFIFOPRIHST_INIT</ipxact:name>
      <ipxact:description>Specifies the Global Host RXFIFO DMA Priority Register's (GRXFIFOPRIHST) power-on initialization value.

This register assigns FIFOs to either the high or low round-robin DMA priority groups of each speed group: SS BIs and HS/FSLS BIs. Register bit[n] represents the priority level (0: low; 1: high) of FIFO[n].

The DMA arbiter grants system bus access on a per-packet basis for each speed group:
 - First priority to the high-priority FIFOs on a round-robin basis
 - Second priority to the low-priority FIFOs on a round-robin basis
For more information, see the "GRXFIFOPRIHST" section in the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. 

If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_GFIFOPRIDBC_INIT" prompt="Global Host DbC FIFO DMA Priority Register&amp;apos;s (GFIFOPRIDBC) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GFIFOPRIDBC_INIT</ipxact:name>
      <ipxact:description>Specifies the Global Host DbC FIFO DMA Priority Register's (GFIFOPRIDBC) power-on initialization value.

This register assigns the priority level of FIFOs belonging to DbC.

For more information, see the "GFIFOPRIDBC" section in the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. 

If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="31" minimum="0" parameterId="DWC_USB3_GDMAHLRATIO_TX_INIT" prompt="Global Host FIFO DMA High-Low Priority Ratio Register&amp;apos;s (GDMAHLRATIO) TX SS:HSFSLS Ratio Power-On Initialization Value (0x0-1f)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_GDMAHLRATIO_TX_INIT</ipxact:name>
      <ipxact:description>Specifies the Global Host FIFO DMA High-Low Priority Ratio Register's (GDMAHLRATIO) TX SS:HSFSLS Ratio power-on initialization value (bit[4:0]).

This register specifies the relative priority of the SS FIFOs vs. the HS+FSLS FIFOs. Specifically, the DMA arbiter prioritizes the HS/FSLS round-robin arbiter group for one packet after the specified number of packet grants to the SS round-robin arbiter group.

For more information, see the "GDMAHLRATIO" section in the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. 

If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>8</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="31" minimum="0" parameterId="DWC_USB3_GDMAHLRATIO_RX_INIT" prompt="Global Host FIFO DMA High-Low Priority Ratio Register&amp;apos;s (GDMAHLRATIO) RX SS:HSFSLS Ratio Power-On Initialization Value (0x0-1f)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_GDMAHLRATIO_RX_INIT</ipxact:name>
      <ipxact:description>Specifies the Global Host FIFO DMA High-Low Priority Ratio Register's (GDMAHLRATIO) RX SS:HSFSLS Ratio power-on initialization value (bit[12:8]).

This register specifies the relative priority of the SS FIFOs vs. the HS+FSLS FIFOs. Specifically, the DMA arbiter prioritizes the HS/FSLS round-robin arbiter group for one packet after the specified number of packet grants to the SS round-robin arbiter group.

For more information, see the "GDMAHLRATIO" section in the Databook.

If you use a standard driver, such as the xHCI driver from Microsoft, you must initialize this register to meet your system requirements before synthesizing the core. 

If you are developing your own xHCI host driver, then this register can be configured by your driver.</ipxact:description>
      <ipxact:value>8</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_LPM_ERRATA" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_EN_LPM_ERRATA" prompt="Enable LPM Errata" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_LPM_ERRATA</ipxact:name>
      <ipxact:description>Enables LPM Errata. 

Enabling this parameter enables support for the following USB Errata:
 - Errata for USB 2.0 ECN: Link Power Management (LPM) 7/2007
 - xHCI 1_0 Errata 08 BESL Dated 10/19/2011.
In host mode, the following changes will take effect.
 - In the xHCI capability registers, bit 20 of the USB2.0 protocol defined fields will be set to 1. Setting this bit informs the xHCI driver that the host controller supports BESL decoding.
 - The duration of resume is changed based on the BESL values as compared to the HIRD values.
In Device mode the following changes will take effect. 
 - A new field in the DCTL register has been added which will control the ACK response from the device in response to an LPM token. {DCTL[23:20]} is used for this purpose. If the HIRD value received in the LPM token is greater than the register field value, then the device controller will respond with an NYET response. If the HIRD value received in the LPM token is less than or equal to the register field, then an ACK response is send by the device controller.
Note: Device driver for the controller must make sure that bits 15:2 of BmAttribute field in the USB2.0 Extension Descriptor are set accordingly to communicate to the host its optimized power savings design points. The driver must also be able to program the LPM_NYET_thres field (DCTL[23:20]) for controlling the NYET response if required.

For more information, see the "LPM Errata Support" section in the Databook.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_DEV_EN_SCATTER_PACKETS_OF_8_TO_15_TRBS" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_DEV_EN_SCATTER_PACKETS_OF_8_TO_15_TRBS" prompt="Support Device/DbC Scatter-Gather Packets of 8 to 15 TRBs (9..15 if MDW128)?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_EN_SCATTER_PACKETS_OF_8_TO_15_TRBS</ipxact:name>
      <ipxact:description>Enables Device and Debug Capability mode scatter-gather packets composed of 8 to 15 TRBs (9 to 15 if MDWIDTH==128). It is recommended that you enable this parameter and option to select only up to 7 will be removed in the future releases.

Setting this parameter ensures support for scatter-gather packets composed of up to 15 TRBs, or DWC_USB3_CACHE_TRBS_PER_TRANSFER (in device mode), or DWC_USB3_DBC_TRBS_PER_TRANSFER (in DbC mode), whichever is less.
Otherwise, Device/Dbc mode can support scatter-gather packets composed of up to 7 TRBs (8 TRBs if MDWIDTH==128), or DWC_USB3_CACHE_TRBS_PER_TRANSFER (in device mode), or DWC_USB3_DBC_TRBS_PER_TRANSFER (in DbC mode), whichever is less.
This parameter affects the RXQ and TXQ FIFO depths.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_DEV_RAM_CLK_FREQ_PERF" prompt="Information - Device minimum ram_clk frequency (MHz) for full performance" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_RAM_CLK_FREQ_PERF</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the device-mode minimum ram_clk frequency to achieve full bandwidth. This full performance frequency depends on the following parameters:
 - SS or HS-only mode
 - MDWIDTH (32, 64, 128)
 - Number of RAMs (2 or 3)
 - RAM Type (single or two-port)</ipxact:description>
      <ipxact:value>63</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_DEV_RAM_CLK_FREQ_FUNC" prompt="Information - Device Minimum ram_clk frequency (MHz) for correct functionality" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_RAM_CLK_FREQ_FUNC</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the device-mode minimum ram_clk frequency to achieve correct functionality of the core. However, this clock frequency does not guarantee full performance.

This lower clock frequency is useful for FPGA testing or low-power low-performance modes. The core continues to function as long as the RAM has sufficient bandwidth to service USB traffic since DMA traffic has lower priority for the internal RAM arbitration. If the DMA bandwidth is less than the USB bandwidth, obviously the data throughput is reduced. The minimum ram_clk frequency for correct functionality depends on the master bus data width (MDWIDTH). MDWIDTH=32 requires a minimum ram_clk frequency of 125MHz to service USB 3.0 device traffic, while MDWIDTH=64 requires 62.5MHz and MDWIDTH=128 requires 60MHz.</ipxact:description>
      <ipxact:value>63</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_HOST_RAM_CLK_FREQ_PERF" prompt="Information - Host minimum ram_clk frequency (MHz) for full performance" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_RAM_CLK_FREQ_PERF</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the host-mode minimum ram_clk frequency to achieve full bandwidth on all possible concurrently operating BIs. This full performance frequency depends on the following parameters:
 - 1. Number of 3.0 BIs (SS)
 - 2. Number of 2.0 BIs (HS and FSLS)
 - 3. MDWIDTH (32, 64, 128)
 - 4. Number of RAMs (2 or 3)
 - 5. RAM Type (single or two-port)
 - 6. Dedicated DBC BI (if HOST_NUM_U3_ROOT_PORTS &gt; NUM_SS_USB_INSTANCES)
Note: If the value of this parameter is less than the frequency of pipe/utmi clock, then you can enable automatic ram_clk selection using GUCTL[7:6] option.</ipxact:description>
      <ipxact:value>79</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_HOST_RAM_CLK_FREQ_FUNC" prompt="Information - Host minimum ram_clk frequency (MHz) for correct functionality" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_RAM_CLK_FREQ_FUNC</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the host-mode minimum ram_clk frequency to achieve correct functionality of the core with all possible configured and concurrently operating BIs. However, this clock frequency does not guarantee full performance.

This lower clock frequency is useful for FPGA testing or low-power low-performance modes. The core continues to function as long as the RAM has sufficient bandwidth to service USB traffic since DMA traffic has lower priority for the internal RAM arbitration. If the DMA bandwidth is less than the USB bandwidth, obviously the data throughput is reduced. The minimum ram_clk frequency for correct functionality depends on the master bus data width (MDWIDTH). MDWIDTH=32 requires a minimum ram_clk frequency of 125MHz to service USB 3.0 host traffic with single active SS-BI, while MDWIDTH=64 requires 62.5MHz and MDWIDTH=128 requires 60MHz to ensure adequate multi-BI arbitration (Note: device mode also requires at least 60MHz).</ipxact:description>
      <ipxact:value>79</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="32" parameterId="DWC_USB3_DCACHE_DEPTH_DEV" prompt="Information - Default Device RAM0 Cache Depth" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DCACHE_DEPTH_DEV</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the minimum Cache requirement for Device.</ipxact:description>
      <ipxact:value>724</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="32" parameterId="DWC_USB3_DCACHE_DEPTH_HST" prompt="Information - Default Host RAM0 Cache Depth" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DCACHE_DEPTH_HST</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the minimum cache requirement for Host.</ipxact:description>
      <ipxact:value>1994</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="32768" minimum="32" parameterId="DWC_USB3_DCACHE_DEPTH_INFO" prompt="Information - Default Device/Host/DRD RAM0 Cache Depth" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DCACHE_DEPTH_INFO</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the minimum RAM0 requirement for Device/Host/DRD Cache, Register, and internal queues mapped into RAM0.

In the case of DRD, it is either the Device or Host Cache requirement, whichever is greater. When RAM0 is shared with RxFIFO (and TxFIFO), you can use this base value and add the RxFIFO (and TxFIFO) RAM requirements needed for your application over this.

This value cannot be reduced. It is recommended that you allocate additional 256 bytes to provide margin for future updates. This is done by increasing the "Total RAM0 Depth" by 256/MDWIDTH.</ipxact:description>
      <ipxact:value>1994</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="32" parameterId="DWC_USB3_DEV_TXF_ALL_DEPTH" prompt="Information - Default Device RAM0/RAM1 TxFIFO Depth" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_TXF_ALL_DEPTH</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the minimum TxFIFO requirement for Device.</ipxact:description>
      <ipxact:value>1101</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="32" parameterId="DWC_USB3_HOST_TXF_ALL_DEPTH" prompt="Information - Default Host RAM0/RAM1 TxFIFO Depth" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_TXF_ALL_DEPTH</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the minimum TxFIFO requirement for Host.</ipxact:description>
      <ipxact:value>940</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="32" parameterId="DWC_USB3_TXF_ALL_DEPTH" prompt="Information - Default Device/Host/DRD RAM0/RAM1 TxFIFO Depth" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_TXF_ALL_DEPTH</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the minimum TxFIFO requirement for Device/Host/DRD.

In the case of DRD, it is either the Device or Host TxFIFO requirement, whichever is greater.

When RAM0 is shared with the TXFIFOs and/or RXFIFOs, take the sum of this base value and the required TXFIFO and/or RXFIFO depths to find the total RAM0 depth.</ipxact:description>
      <ipxact:value>1101</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="32" parameterId="DWC_USB3_DEV_RXF_DEPTH_DEFAULT" prompt="Information - Default Device RAM0/RAM2 RxFIFO Depth" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_DEV_RXF_DEPTH_DEFAULT</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the minimum RxFIFO requirement for Device.</ipxact:description>
      <ipxact:value>389</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="32" parameterId="DWC_USB3_HOST_RXF_ALL_DEPTH" prompt="Information - Default Host RAM0/RAM2 RxFIFO Depth" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_HOST_RXF_ALL_DEPTH</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the minimum RxFIFO requirement for Host.</ipxact:description>
      <ipxact:value>776</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="32" parameterId="DWC_USB3_RXF_ALL_DEPTH" prompt="Default Information - Device/Host/DRD RAM0/RAM2 RxFIFO Depth" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_RXF_ALL_DEPTH</ipxact:name>
      <ipxact:description>This informational (read-only) value defines the minimum RxFIFO requirement for Device/Host/DRD. In the case of DRD, it is either the Device or Host RxFIFO requirement, whichever is greater.</ipxact:description>
      <ipxact:value>776</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="32" parameterId="DWC_USB3_RAM0_DEPTH" prompt="Total RAM0 Depth (32 to 65536)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_RAM0_DEPTH</ipxact:name>
      <ipxact:description>Specifies the depth of RAM0.

It is recommended to not reduce the size from the default value since this value is automatically calculated from your previous parameters selections. It is recommended that you allocate an additional 256 bytes to provide a margin for future Cache size updates. This is done by increasing the RAM0 depth by 256/MDWIDTH.

In Host, Device, and DRD configuration, the RAM0 contains:
 - 3 RAM Config: RAM0 contains Descriptor Cache.
 - 2 RAM Config: RAM0 contains Descriptor Cache and RxFIFOs. 
 - 1 RAM Config: RAM0 contains Descriptor Cache, RxFIFOs, and TxFIFOs.
RxFIFO Size: 
 - In Device mode, the recommended RxFIFO size in number of MaxPacket is "(@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_EN_ISOC_SUPT==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): @DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)". When system latency is larger than 2.1uS (10 uS in USB 2.0 only mode) larger FIFO size is selected. Please note that in addition to the packet space there are a few additional bytes overhead. MDWDITH/8 bytes per packet are allocated for status information. 40 to 64 bytes allocated in RxFIFO for receiving 3 back to back SETUP packets in device mode and also to allow margin for the clock-crossing delay. When the Master Bus width is 128 bits, 64 bytes is needed; else, 40 bytes is needed 
 - In Host mode, for each SS, HS, and FS/LS instances 3, 2, and 1 1KB buffer is allocated if the system latency is larger than 2.1uS (10 uS in USB 2.0 only mode) else 5, 3, and 1 1KB buffer is recommended. Note that in addition to the packet space there are a few additional bytes overhead. The HS and FS/LS FIFOs need additional 32-bytes for status information. In Host mode, the sum of SS, HS, and FS/LS Rx data buffering is total RxFIFO size.
TxFIFO Size: 
 - In Device configuration 512 bytes for Control IN endpoint is needed and for other IN endpoints "(@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF1_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF1_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))" number of MaxPackets amount of FIFO is recommended. When system latency is larger than 2.1uS (10 uS in USB 2.0 only mode) larger FIFO size is selected and also larger FIFO for burstable endpoint is needed. Please note that in addition to the packet space there are a few additional bytes overhead. MDWDITH/8 bytes per packet and per endpoint are allocated for status information. In Device mode, sum of all the IN endpoint buffering is total TxFIFO size. 
 - In Host mode, for each SS, HS, and FS/LS instances 4, 2, and 1 1KB buffer is allocated if the system latency is larger than 2.1uS (10 uS in USB 2.0 only mode) else 5, 3, and 1 1KB buffer is recommended. Note that in addition to the packet space there are a few additional bytes overhead. The SS, HS and FS/LS TxFIFOs need additional MDWIDTH/8 bytes per packets for status information and one additional MDWIDTH/8 per TxFIFO. In Host mode, the sum of SS, HS, and FS/LS Tx data buffering is total TxFIFO size.
In Hub configuration, RAM0 contains Hub descriptors and Upstream Tx Data Packets.</ipxact:description>
      <ipxact:value>1994</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="0" parameterId="DWC_USB3_RAM1_DEPTH" prompt="Total RAM1 Depth (32 to 65536)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_RAM1_DEPTH</ipxact:name>
      <ipxact:description>Specifies the depth of RAM1. It is recommended not to reduce the size from default value since this value is automatically calculated from your previous parameters selections.

In Host, Device, and DRD configuration RAM1 contains:
 - 3 RAM Config: Contains TxFIFOs.
 - 2 RAM Config: Contains TxFIFOs.
TxFIFO Size: 
 - In Device configuration 512 bytes for Control IN endpoint is needed and for other IN endpoints "(@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_DEV_TXF1_BURST_EN==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): (@DWC_USB3_DEV_TXF1_BURST_EN==0 ? 2: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)))" number of MaxPackets amount of FIFO is recommended. When system latency is larger than 2.1uS (10 uS in USB 2.0 only mode), a larger FIFO size is selected and also a larger FIFO for burstable endpoint is needed. Please note that in addition to the packet space there are a few additional bytes overhead. MDWDITH/8 bytes per packet are allocated for status information. In Device mode, the sum of all the IN endpoint buffering is total TxFIFO size. 
 - In Host mode, for each SS, HS, and FS/LS instances 4, 2, and 1 1KB buffer is allocated if the system latency is larger than 2.1uS (10 uS in USB 2.0 only mode); otherwise, 5, 3, and 1 1KB buffer is recommended. Please note that in addition to the packet space there are a few additional bytes overhead. The SS, HS and FS/LS TxFIFOs need additional MDWIDTH/8 bytes per packets for status information and one additional MDWIDTH/8 per TxFIFO. In Host mode, the sum of SS, HS, and FS/LS Tx data buffering is total TxFIFO size.  
In Hub configuration RAM1 contains the Upstream Rx Data Packets.</ipxact:description>
      <ipxact:value>1101</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="AdvancedConfig_AdvancedConfig" maximum="65536" minimum="0" parameterId="DWC_USB3_RAM2_DEPTH" prompt="Total RAM2 Depth (32 to 65536)" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_RAM2_DEPTH</ipxact:name>
      <ipxact:description>Specifies the depth of RAM2. It is recommended not to reduce the size from default value since this value is automatically calculated from your previous parameters selections.

3 RAM config: Contains RxFIFOs.

RxFIFO Size: 
 - In Device mode, the recommended RxFIFO size in number of MaxPacket is "(@DWC_USB3_EN_USB2_ONLY==1 ? ((@DWC_USB3_EN_ISOC_SUPT==1 &amp;&amp; @DWC_USB3_MDBUS_ACCESS_GT21==1) ? 3: (@DWC_USB3_MDBUS_ACCESS_GT21==1 ? 4: 2)): @DWC_USB3_MDBUS_ACCESS_GT21==1 ? 5: 3)". When system latency is larger than 2.1uS (10 uS in USB 2.0 only mode) larger FIFO size is selected. Please note that in addition to the packet space there are a few additional bytes overhead. MDWDITH/8 bytes per packet are allocated for status information. 40 to 64 bytes allocated in RxFIFO for receiving 3 back to back SETUP packets in device mode and also to allow margin for the clock-crossing delay. When the Master Bus width is 128 bits, 64 bytes is needed; else, 40 bytes is needed
 - In Host mode, for each SS, HS, and FS/LS instances 3, 2, and 1 1KB buffer is allocated if the system latency is larger than 2.1uS (10 uS in USB 2.0 only mode) else 5, 3, and 1 1KB buffer is recommended. Please note that in addition to the packet space there are a few additional bytes overhead. The HS and FS/LS FIFOs need additional 32-bytes for status information. In Host mode, the sum of SS, HS, and FS/LS Rx data buffering is total TxFIFO size.</ipxact:description>
      <ipxact:value>776</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT" prompt="Preserve logic_analyzer_trace mux select during reset for hardware debug?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT</ipxact:name>
      <ipxact:description>When enabled, this parameter will detach the reset signal from the GDBGLSPMUX register so that the mux select for the logic_analyzer_trace top-level output will not lose its value during reset. This is useful when debugging signals across hibernation resets.

Note: This will cause synthesis tools to warn about flip-flops with missing reset in DWC_usb3_csr_dev/gdbglspmux_reg[]</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_FPGA" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_EN_FPGA" prompt="Enable FPGA Implementation?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_FPGA</ipxact:name>
      <ipxact:description>This parameter is used at Synopsys for FPGA Device and Host hardware validation of the core.
Enabling this parameter is not recommended for ASIC because this adds 1-clock delay during cache/Rx/Tx memory access.

You can use this parameter during driver development with an FPGA platform. Set this parameter to 1 to improve FPGA timing; timing is improved by: 
 - adding registers for a pipeline stage on RX data path in the PTL
 - adding registers for a pipeline stage on cache/DMA request in LSP BARB
 - adding registers for a pipeline stage on address generation in LSP HCMD
 - adding registers for a pipeline in the MAC
 - connect the pipe3_TxData and pipe3_TxDataK outputs directly to the external PHY instead of through the U3PMU (only for DWC_USB3_EN_PWROPT==2)</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_LOG_PHYS_EP_SUPT" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_EN_LOG_PHYS_EP_SUPT" prompt="Enable USB Logical Endpoint to Physical Endpoint Mapping?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_LOG_PHYS_EP_SUPT</ipxact:name>
      <ipxact:description>This parameter is used at Synopsys for FPGA Device hardware validation of the core. This is not recommended for the ASIC; since this will removed flexible endpoint configurability by software.

You can use this parameter during driver development with an FPGA platform. Set this parameter to 0 to improve FPGA timing. Selects whether the device core supports a flexible or fixed logical-&gt;physical endpoint mapping. A fixed mapping improves timing and may reduce gate count (5K gate reduction). For example,

Flexible EP DISABLE: No SW control
 - Physical ep 0 -&gt; Logical ep 0 OUT
 - Physical ep 1 -&gt; Logical ep 0 IN
 - Physical ep 2 -&gt; Logical ep 1 OUT
 - Physical ep 3 -&gt; Logical ep 1 IN
 - Physical ep 4 -&gt; Logical ep 2 OUT
 - Physical ep 5 -&gt; Logical ep 2 IN
 - Physical ep 6 -&gt; Logical ep 3OUT
 - Physical ep 7 -&gt; Logical ep 3 IN
 - ..........
 - Physical ep 30 - Logical ep 15 OUT
 - Physical ep 31 - Logical ep 15 IN
Flexible EP ENABLE: SW configurable
 - Physical ep 0 -&gt; Logical ep 0 OUT
 - Physical ep 1 -&gt; Logical ep 0 IN
 - Physical ep 2 -&gt; Logical ep 4 IN
 - Physical ep 3 -&gt; Logical ep 15 IN
 - ...........
For more details on flexible EP option, refer to "Flexible Endpoint Mapping" section in the Databook.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_ATSPEED_DFT" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_ATSPEED_DFT" prompt="Enable Additional DFT Control Ports?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_ATSPEED_DFT</ipxact:name>
      <ipxact:description>This parameter enables additional DFT Control signals for internally generated clocks. This creates additional dft_* ports to control clocks.

When this parameter is not enabled then, only the "scan_mode" port controls scan by-pass. 

This parameter controls only whether additional inputs are used to control clock muxes, clock-gate cell, and reset bypass. The DWC_usb3 core by default supports At-Speed DFT irrespective of this parameter is enabled or not. All the module are driven with their appropriate clock during scan-mode. 

Refer to "Synthesis, DFT, and UPF Flow" chapter in the User Guide for more details.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_BUS_FILTERS" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_EN_BUS_FILTERS" prompt="Enable Filter for VBUS and ID related control inputs from the PHY?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_BUS_FILTERS</ipxact:name>
      <ipxact:description>Enables Bus Filters for the following UTMI/ULPI signals and PIPE3PowerControl input signal from the PHY.
 - utmiotg_iddig
 - utmiotg_vbusvalid
 - utmisrp_bvalid
 - utmisrp_sessend
 - pipe3_PowerPresent
Each filter is implemented in the DWC_usb3_filter.v module as a 5ms counter that works on the mac_clk. If your PHY already has a filter de-bounce, then it is not necessary to enable the one in the DWC_usb3. For example, Synopsys-PHY does not have the filters. In the case of UTMI PHY, the utmi* signals arrive from the PHY and in the case of ULPI PHY these signals are internally generated in the DWC_usb3 core's ULPI wrapper. These filters can be individually bypassed by the "bus_filter_bypass[3:0]" port or all these filters can be disabled by GCTL.MASTERFILTBYPASS register bit.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_PMU_FILTER" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_EN_PMU_FILTER" prompt="Enable Filters for UTMI and Overcurrent related inputs from the PHY in PMU module?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_PMU_FILTER</ipxact:name>
      <ipxact:description>Enables simple filters for the following UTMI signals and overcurrent input signal in the PMU module. These filters are used only during hibernation when DWC_usb3 is powered off.
 - phy_utmi_linestate
 - phy_utmiotg_vbusvalid
 - phy_utmisrp_bvalid
 - phy_hub_port_overcurrent
 - phy_utmiotg_iddig</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_PIPE_32BIT_ONLY" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_PIPE_32BIT_ONLY" prompt="PIPE Interface is always 32-bit?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_PIPE_32BIT_ONLY</ipxact:name>
      <ipxact:description>If your PIPE interface is always 32-bits @125MHz, then mac3_clk will be set to pipe3_rx_pclk. 

This avoids the clock dividers and muliplexers on the mac3_clk and simplifies the DFT and clock insertion. If you enable this, please make sure the DWC_USB3_GUSB3PIPECTL_INIT parameter bit[16:15] are 2'b00 to match this.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_RAM_CLK_TO_BUS_CLK" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_RAM_CLK_TO_BUS_CLK" prompt="Always Assign ram_clk to bus_clk_early?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_RAM_CLK_TO_BUS_CLK</ipxact:name>
      <ipxact:description>This parameter enables you to always connect bus_clk_early to ram_clk.

Normally, it is not recommended that you select this parameter because this removes the flexibility in lowering bus_clk in low power modes, and also could cause functional failures if the system bus_clk does not meet the minimum ram clock frequency requirement. 

The bus_clk_early frequency must satisfy the following minimum ram_clk frequency requirement.

For a USB 2.0 device, the minimum ram_clk frequency is 60 MHz.

For a SS device and host, the minimum ram_clk frequency depends on the configuration and mode of operation. For details, refer to "Minimum Clock Frequencies: bus_clk, ram_clk" section in the "Area, Speed, Power, DFT, and Performance" chapter of the Databook.

Note: Functional failure occurs if the ram_clk frequency does not meet the requirements. This parameter avoids the clock dividers and multiplexers on the ram_clk and simplifies the DFT and clock insertion (the clock domain synchronizers between bus_clk and ram_clk are still present and are not optimized away).</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_EN_SYNC_ALL_POSEDGE" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_EN_SYNC_ALL_POSEDGE" prompt="Always use posedge clock synchronizers?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_EN_SYNC_ALL_POSEDGE</ipxact:name>
      <ipxact:description>Selects whether to use posedge clocked synchronizers instead of first-stage negedge, second-stage posedge synchronizers.
Note that given design requirements, certain synchronizers will still remain with a negedge first-stage and certain clock-generation logic requires negedge clocking. For a list of negedge flops, see workspace/syn/final/report/neg*.rpt. Negedge first-stage synchronizers are required in the DWC_usb3_pwrm_u3piu module to meet the USB 3.0 Specification requirement that SuperSpeed signaling must start within 20us of LFPS transmission. These synchronizers also minimize PIPE3 signal compression and expansion through the following synchronizers:
 - U_DWC_usb3_pwrm_prt_U_DWC_usb3_pwrm_u3piu_U_DWC_usb3_bussync_rx_status_U_DWC_usb3_sync_ctl_s2dl_in_p_1d_reg_0_
 - U_DWC_usb3_pwrm_prt_U_DWC_usb3_pwrm_u3piu_U_DWC_usb3_bussync_rx_status_U_DWC_usb3_sync_ctl_d2sl_in_p_1d_reg_0_
 - U_DWC_usb3_pwrm_prt_U_DWC_usb3_pwrm_u3piu_U_DWC_usb3_bussync_linkstate_U_DWC_usb3_sync_ctl_d2sl_in_p_1d_reg_0_
 - U_DWC_usb3_pwrm_prt_U_DWC_usb3_pwrm_u3piu_U_DWC_usb3_bussync_linkstate_U_DWC_usb3_sync_ctl_s2dl_in_p_1d_reg_0_
 - U_DWC_usb3_pwrm_prt_U_DWC_usb3_pwrm_u3piu_PIPE3_sync_9b_32_reg_35_
If you select all posedge-clocked synchronizers with either FAST_TAT_EN set to zero or mac2_clk set to 30 MHz (16-bit UTMI mode), the device-mode minimum ram_clk frequency increases from 60 MHz to 100 MHz to support the 5-clock turnaround time. If the mac2_clk is 60 MHz and FAST_TAT_EN is 1, enabling all posedge-clocked synchronizers does not increase the minimum ram_clk frequency of 60 MHz. For more details, refer to "Negedge-Sampled Signals and SDF Annotated Timing Check OFF flops" section of the Databook. In host mode, if you are using 16-bit UTMI interface and you have DWC_USB3_FAST_TAT disabled, you cannot enable this parameter.</ipxact:description>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter choiceRef="DWC_USB3_REMOVE_PIPE_CLK_MUX_FOR_20_MODE" configGroups="AdvancedConfig_AdvancedConfig" parameterId="DWC_USB3_REMOVE_PIPE_CLK_MUX_FOR_20_MODE" prompt="Remove pipe_clk mux for 2.0 mode?" resolve="immediate" type="longint">
      <ipxact:name>DWC_USB3_REMOVE_PIPE_CLK_MUX_FOR_20_MODE</ipxact:name>
      <ipxact:description>This parameter removes additional clock muxes on pipe3_clk for working with USB 2.0 PHY only.

In v2.90a, a new feature was added to support USB 2.0 speeds only even when the controller is configured for USB 3.0 (that is, non USB 2.0-only) mode and for some reason USB 3.0 PHY is not connected or not working.

The feature can be enabled by setting GUCTL1[DEV_FORCE_20_CLK_FOR_30_CLK] to 1'b1.

This mode adds muxes on pipe3_clk input to route the USB 2.0 clocks internally. If this mode is not used or the muxes are implemented outside the controller, then the muxes inside the controller are not needed and can be removed by enabling this parameter.

Enabling the parameter removes the muxes and the related logic to support GUCTL1[DEV_FORCE_20_CLK_FOR_30_CLK] functionality.</ipxact:description>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter configGroups="PHYConfig_PHYConfig" parameterId="DWC_USB3_GSCFG_INIT" prompt="Global SSIC Configuration Register (GSCFG) Power-On Initialization Value (0x0-ffffffff)" resolve="immediate" type="bit">
      <ipxact:name>DWC_USB3_GSCFG_INIT</ipxact:name>
      <ipxact:description>Specifies Global SSIC Configuration Register (GSCFG) power-on initialization value. 

GSCFG register defines the fields for some SSIC Configurations. 

For field value definitions, refer to "GSCFG" in the Databook. 

Reserved and unlisted bits must be set to 0.</ipxact:description>
      <ipxact:value>'h440</ipxact:value>
    </ipxact:parameter>
  </ipxact:parameters>
  <ipxact:vendorExtensions>
    <snps:component>
      <snps:checksum>CRAhYxIzorynRTRj1GRS/w==</snps:checksum>
    </snps:component>
  </ipxact:vendorExtensions>
</ipxact:component>

